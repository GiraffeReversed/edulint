[W0612]
why = "Having unused variables in code makes the code unnecessarily complicated."
examples = """A solution is to remove the variable, if possible, or rename it to `_`, which is a common convention for naming unused variables. A variable named `_` should never be used anywhere later in code."""

[R6201]
why = "Having unnecessary conditions in code makes the code more cluttered and therefore harder to understand."
examples = """
A condition that returns bool in both branches can be simplified even if it contains a logical statement.

```py
def problematic(a: bool, b: bool) -> bool:
    if a or b:
        return True
    else:
        return False
```

```py
def good(a: bool, b: bool) -> bool:
    return a or b
```

**Danger:** if the condition is not a `bool` value (e.g. `if lst`), then returning the value directly is not equivalent. In such case, take care to change the condition to an expression that does evaluate to bool (e.g. `len(lst) > 0`).
"""

[R1714]
why = "Shorter conditions are usually easier to read."
examples = """
Comparison of a variable to two values can be simplified using the `in` operator.
This is more readable and also safer against copy-paste errors.

```py
def problematic(text: str):
    if text == 'a' or text == 'b':
        return
```

```py
def good(text: str):
    if text in ('a', 'b'):
        return
```

If you are comparing a single character, you can also do this:

```py
def good(char: str):
    if char in 'ab':
        return
```
"""

[R6609] # use-augmented-assign
why = "Using augmented assign is not only shorter, but also clearer and less prone to errors."
examples = "For example, instead of writing `x = x + 1`, you can write `x += 1`. Works for almost any operator."

[R6308] # use-enumerate
why = "You should use enumerate instead of iterating through indices because it's more concise. It prevents you from introducing off-by-one errors and allows you to name the items"
examples = """
```py
fruits = ['apple', 'banana', 'cherry']

def problematic(fruits):
    for i in range(len(fruits)):
        print(i, fruits[i])

def good(fruits):
    for i, fruit in enumerate(fruits):
        print(i, fruit)
```
"""

[R6307] # use-foreach
why = "You should use Python foreach-style loop instead of iterating through indices because it's easier to read, and less prone to off-by-one errors. Also, you do not have to index the list, since you can use the value directly."
examples = """
```py
fruits = ['apple', 'banana', 'cherry']

def problematic(fruits):
    for i in range(len(fruits)):
        print(fruits[i])

def good(fruits):
    for fruit in fruits:
        print(fruit)
```
"""

[R6207] # simplifiable-if-nested
why = "You should use single `if` statement with conditions joined by `and` instead of nested `if` statements because code with nested `if`s is harder to trace: the reader has to check there is no `else` or other code after the inner `if`."
examples = """
```py
def problematic(x, y):
    if x > 0:
        if y > 0:
            print("both values are positive")

def good(x, y):
    if x > 0 and y > 0:
        print("both values are positive")
```
"""

[R6605] # use-elif
why = "You should use `elif` over `else: if`. Otherwise it is harder to see what the possible branches do, as they are not on the same indentation level."
examples = """
```py
def problematic(x):
    if x < 0:
        print("x is negative")
    else:
        if x == 0:
            print("x is zero")
        else:
            print("x is positive")

def good(x):
    if x < 0:
        print("x is negative")
    elif x == 0:
        print("x is zero")
    else:
        print("x is positive")
```
"""

[R6305] # use-for-loop
why = "Use `for` loop when you know the number of iterations in advance (e.g. the number of iterations is constant or stored in a variable). Using a `while` loop is more verbose and can lead to errors if you forget to increment the iteration counter."
examples = """
```py
def problematic(n):
    i = 0
    while i < n:
        print(i)
        i += 1

def good(n):
    for i in range(n):
        print(i)
```
"""

[R6208] # simplifiable-if-seq
why = "You should use single `if` statement with conditions joined by `or` instead of consecutive `if` statements returning the same value. Otherwise the code is unnecessarily long."
examples = """
from math import sqrt

def problematic(x, y):
    if x < 0:
        return None
    if y < 0:
        return None
    return sqrt(x * y)

def good(x, y):
    if x < 0 or y < 0:
        return None
    return sqrt(x * y)
"""

[R6202] # simplifiable-if-return-conj
why = "In some cases, using logical operator can simplify an `if` statement even if one of the branches does not return a bool value. Using `and`, `or` and negation can make the code more concise."
examples = """
```py
# a function checking if a word starts with A

def problematic(word):
    if word == "":
        return False
    return word[0] == "A"

def good(word):
    return word != "" and word[0] == "A"
```

**Danger:** if the condition or some of the returned values is not a `bool` value (e.g. `if lst`), then returning the value directly is not equivalent. In such case, take care to change the condition to an expression that does evaluate to bool (e.g. `len(lst) > 0`).
"""

[R6603] # use-isdecimal
why = """Use `isdecimal`, because it is more strict and only allows real decimal digits that can be converted to number using `int`. `isnumeric` and `isdigit` also return `True` for other numeric characters like these \"¹₂③¼Ⅴ\". However, if a string contains these characters, it can pass through `isnumeric` or `isdigit`, but converting the number using `int` fails.

Do not rely on function's name, check its documentation :)"""

[R6613] # no-is-bool
why = """Do not use `is` with bool. It is unnecessary, you can use the value directly.

Advanced note: If you are going for three-valued logic (`True`, `False`, `None`), try restructuring your code to first compare to None. This is not the best practice but there is no way to differentiate legitimate use of `is bool` from illegitimate."""

examples = "Use `cond` instead of `cond is True` and `not cond` instead of `cond is False`."

[R6611] # redundant-elif
why = "Having a duplicate condition in your code can easily introduce a bug. Use `else` instead of `elif` with negated condition, or change the conditions if they are not supposed to be negations of each other."
examples = """
```py
def problematic(x):
    if x > 0:
        print("greater than zero")
    elif x <= 0:
        print("lesser than zero or equal to it")

def good1(x):
    if x > 0:
        print("greater than zero")
    else:
        print("lesser than zero or equal to it")

def good2(x):
    if x > 0:
        print("greater than zero")
    elif x < 0:
        print("lesser than zero")
```
"""

[R6608] # redundant-arithmetic
why = "Replace operations whose result does not depend on the variables with their result. Unnecessary operations in code are unnecessary :) But maybe you made a mistake in the priority of an operator?"
examples = """Use `x` instead of `x + 0`, `x * 1`, `x + \"\"`, or `x + []`, `1` instead of `x / x` and so on.

If you want to make a copy of a list, use its `copy` method.

In Python, strings are immutable, so adding an empty string to "create a copy" is unnecesary. Any modification to a list creates a copy.
"""

[R6607] # no-repeated-op
why = "You should prefer multiplication/exponeniation over repeating addition/multiplication. Using the appropriate operator makes the code more readable, as you make your intention more explicit."
examples = "Use `x * 2` instead of `x + x` and `x ** 2` instead of `x * x`."

[R6601] # use-append
why = "Avoid creating temporary structure. It is inefficient and code that uses the correct tools is more readable."
examples = "Use `lst.append(val)` instead of `lst += [val]` and `lst.extend(val)`."

[R6602] # use-integral-division
why = "Decimal numbers cannot be represented precisely on a computer, contrary to integers. By introducing float division, your code starts to behave incorrectly when operating with very large numbers."
examples = "Use integer division: `x // y` instead of `int(x / y)."

[R6401] # no-global-vars
why = "Use of global variables makes the code much less readable and traceable, as it is hard to anticipate all possible execution paths when there is global state involved."
examples = "Restructure your code not to need the global variable. You can do this by passing the value as a function parameter and returning the altered variation instead."

[R6614] # use-ord-letter
why = "Your code uses a magic number. A magic number is a number that comes out of nowhere and at first glance, the reader has no idea what it means. Using magic numbers makes the code unreadable and can also read to bugs, as soon as the code's writer also forgets what the magic value means."
examples = "You can use `ord` to convert a character to its numeric value, using that instead of the number itself. That means, use `ord('A')` instead of `65`."

[R6205] # simplifiable-if-pass
why = "Empty if condition makes the code cluttered and also harder to read (the reader must negate the condition themself to see when the `else` branch executes)."
examples = """
```py
def problematic(x):
    if x <= 0:
        pass
    else:
        print("greater than zero")

def good(x):
    if x > 0:
        print("greater than zero")
```
"""

[R6615] # use-literal-letter
why = "Your code uses a magic number. A magic number is a number that comes out of nowhere and at first glance, the reader has no idea what it means. Using magic numbers makes the code unreadable and can also read to bugs, as soon as the code's writer also forgets what the magic value means."
examples = """In Python, you can compare characters directly. Therefore, you can drop the call to `ord` and compare the letters directly: use `letter > 'A'` instead of `ord(letter) > 65`.

If you do not like the idea of comparing letters, you can use `ord(letter) > ord('A')`. Both are better than using magic numbers.
"""

[R6204] # simplifiable-if-expr
why = "Having unnecessary conditions in code makes the code more cluttered and therefore harder to understand."
examples = """Use `x > 0` instead of `True if x > 0 else False`.

**Danger:** if the condition is not a `bool` value (e.g. `True if lst else False`), then using the value directly is not equivalent. In such case, take care to change the condition to an expression that does evaluate to bool (e.g. `len(lst) > 0`).
"""

[R6604] # no-loop-else
why = "Loops with `else` branch are harder to trace, so using them is prone to an error. Or maybe you did not realize that a loop does not have to have an `else` branch?"
examples = """
Does your code make use of the `else` branch? Maybe you can just drop it and continue the code after unindented?

```py
def problematic(numbers):
    for num in numbers:
        if num > 100:
            print("Found number greater than 100.")
            break
    else:
        print("All numbers are lesser or equal to 100.")


def contains_above(numbers, limit):
    for num in numbers:
        if num > limit:
            return True
    return False

def good(numbers):
    if contains_above(numbers, 100):
        print("Found number greater than 100.")
    else:
        print("All numbers are lesser or equal to 100.")
```
"""

[R6303] # modifying-iterated-structure
why = "Adding elements to a structure you iterate over or removing elements from it can lead to unexpected behavior and to bugs."
examples = """
```py
# function which removes even numbers from a list

def problematic(numbers):
    for num in numbers:
        if num % 2 == 0:
            numbers.remove(num)
    return numbers

def good(numbers):
    # now the code iterates over a copy, but modifies the original value
    for num in numbers.copy():
        if num % 2 == 0:
            numbers.remove(num)
    return numbers

def good_and_efficient(numbers):
    odd_numbers = []
    for num in numbers:
        if num % 2 == 1:
            odd_numbers.append(num)
    return odd_numbers
```

Be careful that this detector does not catch every case when you modify the structure you iterate over. If the detector does not report anything, it does not mean there is no issue in your code.
"""

[R6301] # no-while-true
why = "The condition of a `while` loop says a lot about what the loop does. It is also easier to verify that the loop will end."
examples = """
```py
def problematic(n):
    while True:
        if n == 1:
            break
        # some code

def good(n):
    while n != 1:
        # some code
```
"""

[R6306] # loop-shadows-control-variable
why = "Shadowing variable names is error-prone."
examples = """
```py
# function that prints a rectangle from # that has n rows and m columns

def problematic(n, m):
    for i in range(n):
        for i in range(m):
            print("#", end="")
        print()

def good(n, m):
    for i in range(n):
        for j in range(m):
            print("#", end="")
        print()
```
In the problematic code, both `for` loops have `i` as their target. It is better to give nested loops different variable names, even if you do not use them.
"""

[R6203] # simplifiable-if-assignment
why = "Having unnecessary conditions in code makes the code more cluttered and therefore harder to understand."
examples = """
A condition that assigns bool in both branches can be simplified.

```py
def problematic(a: bool, b: bool) -> bool:
    if a or b:
        val = True
    else:
        val = False
    # more code
```

```py
def good(a: bool, b: bool) -> bool:
    val = a or b
    # more code
```

**Danger:** if the condition is not a `bool` value (e.g. `if lst`), then assigning the value directly is not equivalent. In such case, take care to change the condition to an expression that does evaluate to bool (e.g. `len(lst) > 0`).
"""

[R6304] # changing-control-variable
why = "Modifying the control variable at the end of a `for` loop has no effect. In Python, the `for` loop itself takes care of assigning new value in each iteration."
examples = "You can just remove the line which modifies the variable."

[R6302] # use-tighter-boundaries
examples = """
```py
def problematic(n):
    for i in range(n):
        if i == 0:
            continue
        # some code

def good(n):
    for i in range(1, n):
        # some code
```
"""

[R6606] # at-most-one-iteration-for-loop
why = "A for loop that makes at most one iteration is unnecessary. This may be a result of refactoring, or a bug."
examples = """
Remove the for loop and deindent the code inside it, or change it to make more than one iteration. Did you maybe forget that range never provides the stop value? (`for i in range(5, 6)` assigns only 5 to `i`, but never 6).

```py
def problematic():
    for i in range(5, 6):
        # do stuff

def good_removes_for():
    # do stuff

def good_makes_more_iterations():
    for i in range(5, 7):
        # do stuff
```
"""

# [R6206] # no-value-in-one-branch-return

[R6210] # simplifiable-if-assignment-conj
why = "In some cases, using logical operator can simplify an `if` statement even if one of the branches does not return a bool value. Using `and`, `or` and negation can make the code more concise."
examples = """
```py
# a function assigning the information if a word starts with A

def problematic(word):
    if word == "":
        starts_with_A = False
    else:
        starts_with_A = word[0] == "A"

def good(word):
    starts_with_A = word != "" and word[0] == "A"
```

**Danger:** if the condition or some of the assigned values is not a `bool` value (e.g. `if lst`), then assigning the value directly is not equivalent. In such case, take care to change the contition to an expression that does evaluate to bool (e.g. `len(lst) > 0`).
"""

[R6612] # unreachable-else
why = "The else branch is unreachable due to preceding conditions, which exhaust all possibilities. This may be a result of refactoring, or a bug."
examples = """
```py
def problematic(x):
    if x > 0:
        print("x is greater than zero")
    elif x <= 0:
        print("x is lesser or equal to zero")
    else:
        print("this code is unreachable")
```

Remove the else branch or fix the preceding conditions.
"""

[R6209] # simplifiable-if-expr-conj
why = "In some cases, using logical operator can simplify an `if` statement even if one of the branches does not return a bool value. Using `and`, `or` and negation can make the code more concise."
examples = """
```py
# a function checking if a word starts with A

def problematic(word):
    return False if word == "" else word[0] == "A"

def good(word):
    return word != "" and word[0] == "A"
```

**Danger:** if the condition or some of the used values is not a `bool` value (e.g. `if lst`), then using the value directly is not equivalent. In such case, take care to change the condition to an expression that does evaluate to bool (e.g. `len(lst) > 0`).
"""

[R6610] # do-not-multiply-mutable
why = """In Python, multiplying a list creates a list of references _to the same instance_ of the object the list contains. See the following code:

```
lst = [[]] * 3
lst[0].append(42)
```

`lst` now equals `[[42], [42], [42]] (try it!).
"""
examples = "Instead of `[[]] * 3` use for example `[[] for i in range(3)]`."

[R6616] # use-early-return
why = "Early return is a pattern in which you first handle simple situations before moving on to complicated ones. It cleans up the control flow (simple situations usually represent invalid or trivial input) and usually allows the complicated code to be less indented, which makes it easier to read."
examples = """
```py
def short_problematic():
    if test:
        # long code
    else:
        return 0

def short_good():
    if not test:  # <-- note that the condition needs to be negated
        return 0
    # long code
```

```py
# a function that transforms score to grade

def long_problematic(score):
    if 0 <= score and score <= 100:
        if score >= 90:
            return "A"
        elif score >= 80:
            return "B"
        elif score >= 70:
            return "C"
        elif score >= 60:
            return "D"
        else:
            return "F"
    else:
        return None

def long_good(score):
    if score < 0 or score > 100:  # <-- condition is again negated
        return None

    if score >= 90:
        return "A"
    elif score >= 80:
        return "B"
    elif score >= 70:
        return "C"
    elif score >= 60:
        return "D"
    else:
        return "F"
```
"""

[E9984] # for-target-subscript
why = "A for loop that assigns value to a list subscript or an attribute can have weird side effects and should be avoided as a bad practice."
examples = """
```py
def problematic(lst, i, n):
    for lst[i] in range(n):
        # body

def good(lst, i, n):
    for j in range(n):
        # body (possibly altering value of lst[i])
```
"""

[W0622] # redefined-builtin
why = "A variable or function name overrides a Python's built-in function (such as `sum` or `min`). Built-in function overrriding can lead to subtle bugs and code that is confusing to read."
examples = """
Some renaming suggestions:

- `sum` -> `total`, `result`, ...
- `list` -> `students`, `numbers`, `data`, ...
- `min` -> `minimum`, `lowest`, ...
- `max` -> `maximum`, `highest`, ...
- `len` -> `size`, `length`, ...
"""

[E129] # visually indented line with same indent as next logical line
examples = """
```py
def problematic(c1, c2):
    if c1 and \
        c2:  # <- once indented code (four spaces)
        # code indented as usual (four spaces)

def good1(c1, c2):
    if c1 and \
       c2: <- aligned with condition start on the previous line (three spaces, not four)
        # code indented as usual (four spaces)

def good2(c1, c2):
    if c1 and \
            c2: <- double indentation (eight spaces)
        # code indented as usual (four spaces)

def good3(c1, c2):
    if (
        c1 and
        c2
    ):
        # code indented as usual (four spaces)
```
"""

[R6211] # simplifiable-with-abs
why = "If the condition uses 'abs', it is more clear what it tests. Function 'abs' takes a number and returns its absolute value."
examples = """
```py
def problematic(n):
    return n < -5 or n > 5

def good(n):
    return abs(n) > 5
```
"""

[R6212] # redundant-compare-in-condition
examples = """
```py
def problematic(m, n):
    if m > 5 and m > 1:
        # code

def good1(m, n):
    if m > 5:
        # code

def good2(m, n):
    if m > 5 and n > 1:
        # code
```
"""

[R6213] # redundant-compare-avoidable-with-max-min
examples = """
```py
def problematic(x, m, n):
    if x > m and x > n:
        # code


def good(x, m, n):
    if x > max(m, n):
        # code
```
"""

[R6214] # using-compare-instead-of-equal
examples = """
```py
def problematic(x):
    if x >= 0 and x <= 0:
        # code

def good(x):
    if x == 0:
        # code
```
"""

[R6215] # simplifiable-test-by-equals
examples = """
```py
def problematic(x, y):
    if x % 2 == 0 and y % 2 == 0 or x % 2 == 1 and y % 2 == 1:
        # code

def good(x, y):
    if x % 2 == y % 2:
        # code
```
"""

[R6501] # identical-if-branches
examples = """
```py
def problematic(x, y):
    if x > y:
        print(x)
    else:
        print(x)

def good1(x, y):
    print(x)

def good2(x, y):
    if x > y:
        print(x)
    else:
        print(y)
```

If the condition has side effects, make sure you still execute it.
```py
def problematic(lst, x):
    if lst.pop() > 0:
        print(x)
    else:
        print(x)

def good(lst, x):
    lst.pop()
    print(x)
```
"""

[R6502] # identical-if-branches-part
why = "Repeating identical lines makes code harder to read, because the reader has to check that the lines are indeed identical."
examples = """
```py
def problematic(x):
    if x > 10:
        print("x is greater than 10")
        result = x * 2
    elif x == 10:
        print("x is exactly 10")
        result = x * 2
    else:
        result = x * 2

    # code using result

def good(x):
    if x > 10:
        print("x is greater than 10")
    elif x == 10:
        print("x is exactly 10")
    result = x * 2

    # code using result
```
"""

[R6552] # similar-block-to-loop-range
examples = """
```py
def problematic(n):
    if len(row) != 9:
        return False
    if 1 not in row:
        return False
    if 2 not in row:
        return False
    if 3 not in row:
        return False
    # ...
    if 9 not in row:
        return False
    return True

def good(n):
    if len(row) != 9:
        return False
    for num in range(1, 10):  # or range(9) and use num + 1
        if num not in row:
            return False
    return True
```
"""

[R6560] # similar-block-to-loop-collection
examples = """
```py
def problematic(text):
    vowel_count = count_letter(text, 'a')
    vowel_count += count_letter(text, 'e')
    vowel_count += count_letter(text, 'i')
    vowel_count += count_letter(text, 'o')
    vowel_count += count_letter(text, 'u')
    vowel_count += count_letter(text, 'y')
    return vowel_count

def good(text):
    vovel_count = 0
    for letter in ['a', 'e', 'i', 'o', 'u', 'y']:
        vowel_count += count_letter(text, letter)
    return vowel_count
```
"""

[R6553] # similar-block-to-loop-merge
examples = """
```py
def problematic():
    for i in range(5):
        forward(30)
        right(90)
        forward(30)
        left(90)
        forward(30)
        right(90)
        forward(30)
        left(90)

def good():
    for i in range(10):
        forward(30)
        right(90)
        forward(30)
        left(90)
```
"""

[R6555] # similar-block-to-use
examples = """
```py
def process_number(num, is_first): ...

def problematic(numbers):
    for i in range(numbers):
        if i == 0:
            process_number(numbers[i], True)
        else:
            process_number(numbers[i], False)

def good(numbers):
    for i in range(numbers):
        process_number(number[i], i == 0)
```
"""

[R6556] # similar-if-into-block
examples = """
```py
def problematic(lst1, lst2):
    diff = abs(len(lst1) - len(lst2))
    if len(lst1) > len(lst2):
        for j in range(diff):
            lst2.append(None)
    else:
        for j in range(diff):
           lst1.append(None)

def good(lst1, lst2):
    diff = abs(len(lst1) - len(lst2))
    for j in range(diff):
        if len(lst1) > len(lst2):
            lst2.append(None)
        else:
           lst1.append(None)
```
"""
[R6557] # similar-if-to-untwisted
examples = """
```py
def problematic(i, j):
    if i % 2 == 0:
        if j % 2 == 0:
            print("#", end=" ")
        else:
            print(".", end=" ")
    else:
        if j % 2 == 0:
            print(".", end=" ")
        else:
            print("#", end=" ")

def good(i, j):
    if (i % 2 == 0 and j % 2 == 0) or (i % 2 != 0 and j % 2 != 0):
        print("#", end=" ")
    else:
        print(".", end=" ")
```
"""
[R6558] # similar-if-to-expr
examples = """
```py
def problematic(lst1, lst2):
    if len(lst1) > len(lst2):
        longer = lst1
    else:
        longer = lst2
    # code using longer

def good(lst1, lst2):
    longer = lst1 if len(lst1) > len(lst2) else lst2
    # code using longer
```
"""
[R6559] # similar-if-to-extracted
examples = """
```
def problematic(year):
    for month in range(1, 13):
        if month == 1 or month == 3 or month == 5 \
           or month == 7 or month == 8 \
           or month == 10 or month == 12:
            for day in range(1, 32):
                process_date(year, month, day)

        elif month == 2 and ((year % 4 == 0 and year % 100 != 0) or
                             (year % 400 == 0)):
            for day in range(1, 30):
                process_date(year, month, day)

        elif month == 2:
            for day in range(1, 29):
                process_date(year, month, day)

        else:
            for day in range(1, 31):
                process_date(year, month, day)

### use a helper variable
def good1(year):
    for month in range(1, 13):
        if month == 1 or month == 3 or month == 5 \
           or month == 7 or month == 8 \
           or month == 10 or month == 12:
            days_in_month = 31

        elif month == 2 and ((year % 4 == 0 and year % 100 != 0) or
                             (year % 400 == 0)):
            days_in_month = 29

        elif month == 2:
            days_in_month = 28

        else:
            days_in_month = 30

        for day in range(1, days_in_month + 1):
            process_date(year, month, day)


### or a helper function
def get_days_in_month(year, month):
        if month == 1 or month == 3 or month == 5 \
           or month == 7 or month == 8 \
           or month == 10 or month == 12:
            return 31

        if month == 2 and ((year % 4 == 0 and year % 100 != 0) or
                             (year % 400 == 0)):
            return 29

        if month == 2:
            return 28

        return 30

def good2(year):
    for month in range(1, 13):
        for day in range(1, get_days_in_month(year, month) + 1):
            process_date(year, month, day)
```
"""
