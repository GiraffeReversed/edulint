{
    "fatal": [
        {
            "checker": "main",
            "id": "F0001",
            "name": "fatal",
            "definition": {
                "checker_name": "main",
                "msgid": "F0001",
                "symbol": "fatal",
                "msg": "%s",
                "description": "Used when an error occurred preventing the analysis of a               module (unable to find it for instance).",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "",
            "bad_code": "",
            "details": "**Additional details:**\n\nThis is a message linked to an internal problem in pylint. There's nothing to change in your code.\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "F0002",
            "name": "astroid-error",
            "definition": {
                "checker_name": "main",
                "msgid": "F0002",
                "symbol": "astroid-error",
                "msg": "%s: %s",
                "description": "Used when an unexpected error occurred while building the Astroid  representation. This is usually accompanied by a traceback. Please report such errors !",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "",
            "bad_code": "",
            "details": "**Additional details:**\n\nThis is a message linked to an internal problem in pylint. There's nothing to change in your code,\nbut maybe in pylint's configuration or installation.\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "F0010",
            "name": "parse-error",
            "definition": {
                "checker_name": "main",
                "msgid": "F0010",
                "symbol": "parse-error",
                "msg": "error while code parsing: %s",
                "description": "Used when an exception occurred while building the Astroid representation which could be handled by astroid.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nThis is a message linked to an internal problem in pylint. There's nothing to change in your code.\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "F0011",
            "name": "config-parse-error",
            "definition": {
                "checker_name": "main",
                "msgid": "F0011",
                "symbol": "config-parse-error",
                "msg": "error while parsing the configuration: %s",
                "description": "Used when an exception occurred while parsing a pylint configuration file.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "",
            "bad_code": "",
            "details": "**Additional details:**\n\nThis is a message linked to a problem in your configuration not your code.\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "F0202",
            "name": "method-check-failed",
            "definition": {
                "checker_name": "classes",
                "msgid": "F0202",
                "symbol": "method-check-failed",
                "msg": "Unable to check methods signature (%s / %s)",
                "description": "Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "",
            "bad_code": "",
            "details": "**Additional details:**\n\nThis is a message linked to an internal problem in pylint. There's nothing to change in your code.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        }
    ],
    "error": [
        {
            "checker": "main",
            "id": "E0001",
            "name": "syntax-error",
            "definition": {
                "checker_name": "main",
                "msgid": "E0001",
                "symbol": "syntax-error",
                "msg": "%s",
                "description": "Used when a syntax error is raised for a module.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "fruit_stock = {\n    'apple': 42,\n    'orange': 21,\n    'banana': 12\n}\n",
            "bad_code": "fruit_stock = {\n    'apple': 42,\n    'orange': 21  # [syntax-error]\n    'banana': 12\n}\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "E0011",
            "name": "unrecognized-inline-option",
            "definition": {
                "checker_name": "main",
                "msgid": "E0011",
                "symbol": "unrecognized-inline-option",
                "msg": "Unrecognized file option %r",
                "description": "Used when an unknown inline option is encountered.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# pylint: enable=too-many-public-methods\n",
            "bad_code": "# +1: [unrecognized-inline-option]\n# pylint:applesoranges=1\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "E0013",
            "name": "bad-plugin-value",
            "definition": {
                "checker_name": "main",
                "msgid": "E0013",
                "symbol": "bad-plugin-value",
                "msg": "Plugin '%s' is impossible to load, is it installed ? ('%s')",
                "description": "Used when a bad value is used in 'load-plugins'.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "E0014",
            "name": "bad-configuration-section",
            "definition": {
                "checker_name": "main",
                "msgid": "E0014",
                "symbol": "bad-configuration-section",
                "msg": "Out-of-place setting encountered in top level configuration-section '%s' : '%s'",
                "description": "Used when we detect a setting in the top level of a toml configuration that shouldn't be there.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "E0015",
            "name": "unrecognized-option",
            "definition": {
                "checker_name": "main",
                "msgid": "E0015",
                "symbol": "unrecognized-option",
                "msg": "Unrecognized option found: %s",
                "description": "Used when we detect an option that we do not recognize.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "async",
            "id": "E1700",
            "name": "yield-inside-async-function",
            "definition": {
                "checker_name": "async",
                "msgid": "E1700",
                "symbol": "yield-inside-async-function",
                "msg": "Yield inside async function",
                "description": "Used when an `yield` or `yield from` statement is found inside an async function.",
                "scope": "node-based-msg",
                "minversion": [
                    3,
                    5
                ],
                "maxversion": null,
                "old_names": []
            },
            "good_code": "async def foo():\n    def _inner_foo():\n        yield from [1, 2, 3]\n\n\nasync def foo():\n    yield 42\n",
            "bad_code": "async def foo():\n    yield from [1, 2, 3]  # [yield-inside-async-function]\n",
            "details": "**Additional details:**\n\nThe message can't be emitted when using Python < 3.5.\n",
            "related_links": "**Related links:**\n\n- `PEP 525 <https://peps.python.org/pep-0525/>`_\n",
            "checker_module_name": "pylint.checkers.async",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "async",
            "id": "E1701",
            "name": "not-async-context-manager",
            "definition": {
                "checker_name": "async",
                "msgid": "E1701",
                "symbol": "not-async-context-manager",
                "msg": "Async context manager '%s' doesn't implement __aenter__ and __aexit__.",
                "description": "Used when an async context manager is used with an object that does not implement the async context management protocol.",
                "scope": "node-based-msg",
                "minversion": [
                    3,
                    5
                ],
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class AsyncContextManager:\n    def __aenter__(self):\n        pass\n\n    def __aexit__(self, *exc):\n        pass\n\n\nasync def foo():\n    async with AsyncContextManager():\n        pass\n",
            "bad_code": "class ContextManager:\n    def __enter__(self):\n        pass\n\n    def __exit__(self, *exc):\n        pass\n\n\nasync def foo():\n    async with ContextManager():  # [not-async-context-manager]\n        pass\n",
            "details": "**Additional details:**\n\nAsync context manager doesn't implement ``__aenter__`` and ``__aexit__``. It can't be emitted when using Python < 3.5.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.async",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0111",
            "name": "bad-reversed-sequence",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0111",
                "symbol": "bad-reversed-sequence",
                "msg": "The first reversed() argument is not a sequence",
                "description": "Used when the first argument to reversed() builtin isn't a sequence (does not implement __reversed__, nor __getitem__ and __len__",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "reversed([1, 2, 3, 4])\n",
            "bad_code": "reversed({1, 2, 3, 4})  # [bad-reversed-sequence]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0119",
            "name": "misplaced-format-function",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0119",
                "symbol": "misplaced-format-function",
                "msg": "format function is not called on str",
                "description": "Emitted when format function is not called on str object. e.g doing print(\"value: {}\").format(123) instead of print(\"value: {}\".format(123)). This might not be what the user intended to do.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print('Value: {}'.format('Car'))\n",
            "bad_code": "print('Value: {}').format('Car')  # [misplaced-format-function]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0100",
            "name": "init-is-generator",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0100",
                "symbol": "init-is-generator",
                "msg": "__init__ method is a generator",
                "description": "Used when the special class method __init__ is turned into a generator by a yield in its body.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    def __init__(self, worms):\n        self.__worms = worms\n\n    def worms(self):\n        yield from self.__worms\n\napple = Fruit([\"Fahad\", \"Anisha\", \"Tabatha\"])\nfor worm in apple.worms():\n    pass\n",
            "bad_code": "class Fruit:\n    def __init__(self, worms):  # [init-is-generator]\n        yield from worms\n\napple = Fruit([\"Fahad\", \"Anisha\", \"Tabatha\"])\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0101",
            "name": "return-in-init",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0101",
                "symbol": "return-in-init",
                "msg": "Explicit return in __init__",
                "description": "Used when the special class method __init__ has an explicit return value.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Sum:\n\n    def __init__(self, a, b) -> None:\n        self.result = a + b\n",
            "bad_code": "class Sum:\n\n    def __init__(self, a, b):  # [return-in-init]\n        return a + b\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `__init__ method documentation <https://docs.python.org/3/reference/datamodel.html#object.__init__>`_\n",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0102",
            "name": "function-redefined",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0102",
                "symbol": "function-redefined",
                "msg": "%s already defined line %s",
                "description": "Used when a function / class / method is redefined.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def get_email():\n    pass\n",
            "bad_code": "def get_email():\n    pass\n\n\ndef get_email():  # [function-redefined]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0103",
            "name": "not-in-loop",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0103",
                "symbol": "not-in-loop",
                "msg": "%r not properly in loop",
                "description": "Used when break or continue keywords are used outside a loop.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def print_even_numbers():\n    for i in range(100):\n        if i % 2:\n            continue\n        print(i)\n",
            "bad_code": "def print_even_numbers():\n    for i in range(100):\n        if i % 2 == 0:\n            print(i)\n    else:\n        continue  # [not-in-loop]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0104",
            "name": "return-outside-function",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0104",
                "symbol": "return-outside-function",
                "msg": "Return outside function",
                "description": "Used when a \"return\" statement is found outside a function or method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def get_the_answer():\n    return 42\n",
            "bad_code": "return 42  # [return-outside-function]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0105",
            "name": "yield-outside-function",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0105",
                "symbol": "yield-outside-function",
                "msg": "Yield outside function",
                "description": "Used when a \"yield\" statement is found outside a function or method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def one_to_ten():\n    for i in range(10):\n        yield i\n",
            "bad_code": "for i in range(10):\n    yield i  # [yield-outside-function]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0106",
            "name": "return-arg-in-generator",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0106",
                "symbol": "return-arg-in-generator",
                "msg": "Return with argument inside generator",
                "description": "Used when a \"return\" statement with an argument is found outside in a generator function or method (e.g. with some \"yield\" statements).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": [
                    3,
                    3
                ],
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0107",
            "name": "nonexistent-operator",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0107",
                "symbol": "nonexistent-operator",
                "msg": "Use of the non-existent %s operator",
                "description": "Used when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which doesn't exist in Python.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "i = 0\n\nwhile i <= 10:\n    print(i)\n    i += 1\n",
            "bad_code": "i = 0\n\nwhile i <= 10:\n    print(i)\n    ++i  # [nonexistent-operator]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0108",
            "name": "duplicate-argument-name",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0108",
                "symbol": "duplicate-argument-name",
                "msg": "Duplicate argument name %s in function definition",
                "description": "Duplicate argument names in function definitions are syntax errors.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def get_fruits(apple, banana, orange):\n    pass\n",
            "bad_code": "def get_fruits(apple, banana, apple):  # [duplicate-argument-name]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0110",
            "name": "abstract-class-instantiated",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0110",
                "symbol": "abstract-class-instantiated",
                "msg": "Abstract class %r with abstract methods instantiated",
                "description": "Used when an abstract class with `abc.ABCMeta` as metaclass has abstract methods and is instantiated.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import abc\n\n\nclass Animal(abc.ABC):\n    @abc.abstractmethod\n    def make_sound(self):\n        pass\n\n\nclass Sheep(Animal):\n    def make_sound(self):\n        print(\"bhaaaaa\")\n\n\nsheep = Sheep()\n",
            "bad_code": "import abc\n\n\nclass Animal(abc.ABC):\n    @abc.abstractmethod\n    def make_sound(self):\n        pass\n\n\nsheep = Animal()  # [abstract-class-instantiated]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0112",
            "name": "too-many-star-expressions",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0112",
                "symbol": "too-many-star-expressions",
                "msg": "More than one starred expression in assignment",
                "description": "Emitted when there are more than one starred expressions (`*x`) in an assignment. This is a SyntaxError.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "*sirius_and_arcturus, vega = [\"Sirius\", \"Arcturus\", \"Vega\"]\n",
            "bad_code": "*stars, *constellations = [\"Sirius\", \"Arcturus\", \"Vega\"]  # [too-many-star-expressions]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0113",
            "name": "invalid-star-assignment-target",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0113",
                "symbol": "invalid-star-assignment-target",
                "msg": "Starred assignment target must be in a list or tuple",
                "description": "Emitted when a star expression is used as a starred assignment target.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "fruit = ['apple', 'banana', 'orange']\n",
            "bad_code": "*fruit = ['apple', 'banana', 'orange']  # [invalid-star-assignment-target]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0114",
            "name": "star-needs-assignment-target",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0114",
                "symbol": "star-needs-assignment-target",
                "msg": "Can use starred expression only in assignment target",
                "description": "Emitted when a star expression is not used in an assignment target.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "sirius, *arcturus_and_vega = [\"Sirius\", \"Arcturus\", \"Vega\"]\n",
            "bad_code": "stars = *[\"Sirius\", \"Arcturus\", \"Vega\"]  # [star-needs-assignment-target]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0115",
            "name": "nonlocal-and-global",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0115",
                "symbol": "nonlocal-and-global",
                "msg": "Name %r is nonlocal and global",
                "description": "Emitted when a name is both nonlocal and global.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "NUMBER = 42\n\n\ndef update_number(number):\n    global NUMBER\n    NUMBER = number\n    print(f\"New global number is: {NUMBER}\")\n\n\nupdate_number(24)\n",
            "bad_code": "NUMBER = 42\n\n\ndef update_number(number):  # [nonlocal-and-global]\n    global NUMBER\n    nonlocal NUMBER\n    NUMBER = number\n    print(f\"New global number is: {NUMBER}\")\n\n\nupdate_number(24)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0116",
            "name": "continue-in-finally",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0116",
                "symbol": "continue-in-finally",
                "msg": "'continue' not supported inside 'finally' clause",
                "description": "Emitted when the `continue` keyword is found inside a finally clause, which is a SyntaxError.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": [
                    3,
                    8
                ],
                "old_names": []
            },
            "good_code": "while True:\n    try:\n        pass\n    except ValueError:\n        pass\n    else:\n        continue\n",
            "bad_code": "while True:\n    try:\n        pass\n    finally:\n        continue  # [continue-in-finally]\n",
            "details": "**Additional details:**\n\nNote this message can't be emitted when using Python version 3.8 or greater.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0117",
            "name": "nonlocal-without-binding",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0117",
                "symbol": "nonlocal-without-binding",
                "msg": "nonlocal name %s found without binding",
                "description": "Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopes",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    colors = [\"red\", \"green\"]\n\n    def get_color(self):\n        nonlocal colors\n",
            "bad_code": "class Fruit:\n    def get_color(self):\n        nonlocal colors  # [nonlocal-without-binding]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "E0118",
            "name": "used-prior-global-declaration",
            "definition": {
                "checker_name": "basic",
                "msgid": "E0118",
                "symbol": "used-prior-global-declaration",
                "msg": "Name %r is used prior to global declaration",
                "description": "Emitted when a name is used prior a global declaration, which results in an error since Python 3.6.",
                "scope": "node-based-msg",
                "minversion": [
                    3,
                    6
                ],
                "maxversion": null,
                "old_names": []
            },
            "good_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\n    global TOMATO\n    TOMATO = \"moneymaker\"\n",
            "bad_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\n    print(TOMATO)  # [used-prior-global-declaration]\n    global TOMATO\n    TOMATO = \"cherry tomato\"\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0301",
            "name": "non-iterator-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0301",
                "symbol": "non-iterator-returned",
                "msg": "__iter__ returns non-iterator",
                "description": "Used when an __iter__ method returns something which is not an iterable (i.e. has no `__next__` method)",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W0234",
                        "old-non-iterator-returned-1"
                    ],
                    [
                        "E0234",
                        "old-non-iterator-returned-2"
                    ]
                ]
            },
            "good_code": "import random\n\n\nclass GenericAstrology:\n    def __init__(self, signs, predictions):\n        self.signs = signs\n        self.predictions = predictions\n\n    def __iter__(self):\n        self.index = 0\n        self.number_of_prediction = len(self.predictions)\n        return self\n\n    def __next__(self):\n        if self.index == len(self.signs):\n            raise StopIteration\n        self.index += 1\n        prediction_index = random.randint(0, self.number_of_prediction - 1)\n        return self.signs[self.index - 1], self.predictions[prediction_index]\n\n\nSIGNS = [\"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\"]\nPREDICTIONS = [\"good things\", \"bad thing\", \"existential dread\"]\nfor sign, prediction in GenericAstrology(SIGNS, PREDICTIONS):\n    print(f\"{sign} : {prediction} today\")\n",
            "bad_code": "import random\n\n\nclass GenericAstrology:\n    def __init__(self, signs, predictions):\n        self.signs = signs\n        self.predictions = predictions\n\n    def __iter__(self):  # [non-iterator-returned]\n        self.index = 0\n        self.number_of_prediction = len(self.predictions)\n        return self\n\n\nSIGNS = [\"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\"]\nPREDICTIONS = [\"good things\", \"bad thing\", \"existential dread\"]\nfor sign, prediction in GenericAstrology(SIGNS, PREDICTIONS):\n    print(f\"{sign} : {prediction} today\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0302",
            "name": "unexpected-special-method-signature",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0302",
                "symbol": "unexpected-special-method-signature",
                "msg": "The special method %r expects %s param(s), %d %s given",
                "description": "Emitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "E0235",
                        "bad-context-manager"
                    ]
                ]
            },
            "good_code": "class ContextManager:\n    def __enter__(self):\n        pass\n\n    def __exit__(self, type, value, traceback):\n        pass\n",
            "bad_code": "class ContextManager:\n    def __enter__(self, context):  # [unexpected-special-method-signature]\n        pass\n\n    def __exit__(self, type):  # [unexpected-special-method-signature]\n        pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0303",
            "name": "invalid-length-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0303",
                "symbol": "invalid-length-returned",
                "msg": "__len__ does not return non-negative integer",
                "description": "Used when a __len__ method returns something which is not a non-negative integer",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class FruitBasket:\n    def __init__(self, fruits):\n        self.fruits = [\"Apple\", \"Banana\", \"Orange\"]\n\n    def __len__(self):\n        return len(self.fruits)\n",
            "bad_code": "class FruitBasket:\n    def __init__(self, fruits):\n        self.fruits = [\"Apple\", \"Banana\", \"Orange\"]\n\n    def __len__(self):  # [invalid-length-returned]\n        return - len(self.fruits)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0304",
            "name": "invalid-bool-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0304",
                "symbol": "invalid-bool-returned",
                "msg": "__bool__ does not return bool",
                "description": "Used when a __bool__ method returns something which is not a bool",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class GoodBool:\n    \"\"\"__bool__ returns `bool`\"\"\"\n\n    def __bool__(self):\n        return True\n",
            "bad_code": "class BadBool:\n    \"\"\"__bool__ returns an int\"\"\"\n\n    def __bool__(self):  # [invalid-bool-returned]\n        return 1\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0305",
            "name": "invalid-index-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0305",
                "symbol": "invalid-index-returned",
                "msg": "__index__ does not return int",
                "description": "Used when an __index__ method returns something which is not an integer",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class GoodIndex:\n    \"\"\"__index__ returns <type 'int'>\"\"\"\n\n    def __index__(self):\n        return 19\n",
            "bad_code": "class BadIndex:\n    \"\"\"__index__ returns a dict\"\"\"\n\n    def __index__(self):  # [invalid-index-returned]\n        return {\"19\": \"19\"}\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0306",
            "name": "invalid-repr-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0306",
                "symbol": "invalid-repr-returned",
                "msg": "__repr__ does not return str",
                "description": "Used when a __repr__ method returns something which is not a string",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Repr:\n    \"\"\"__repr__ returns <type 'str'>\"\"\"\n\n    def __repr__(self):\n        return \"apples\"\n",
            "bad_code": "class Repr:\n    \"\"\"__repr__ returns <type 'int'>\"\"\"\n\n    def __repr__(self):  # [invalid-repr-returned]\n        return 1\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0307",
            "name": "invalid-str-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0307",
                "symbol": "invalid-str-returned",
                "msg": "__str__ does not return str",
                "description": "Used when a __str__ method returns something which is not a string",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Str:\n    \"\"\"__str__ returns <type 'str'>\"\"\"\n\n    def __str__(self):\n        return \"oranges\"\n",
            "bad_code": "class Str:\n    \"\"\"__str__ returns int\"\"\"\n\n    def __str__(self):  # [invalid-str-returned]\n        return 1\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0308",
            "name": "invalid-bytes-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0308",
                "symbol": "invalid-bytes-returned",
                "msg": "__bytes__ does not return bytes",
                "description": "Used when a __bytes__ method returns something which is not bytes",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class GoodBytes:\n    \"\"\"__bytes__ returns <type 'bytes'>\"\"\"\n\n    def __bytes__(self):\n        return b\"some bytes\"\n",
            "bad_code": "class BadBytes:\n    \"\"\"__bytes__ returns <type 'str'>\"\"\"\n\n    def __bytes__(self):  # [invalid-bytes-returned]\n        return \"123\"\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0309",
            "name": "invalid-hash-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0309",
                "symbol": "invalid-hash-returned",
                "msg": "__hash__ does not return int",
                "description": "Used when a __hash__ method returns something which is not an integer",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class GoodHash:\n    \"\"\"__hash__ returns `int`\"\"\"\n\n    def __hash__(self):\n        return 19\n",
            "bad_code": "class BadHash:\n    \"\"\"__hash__ returns dict\"\"\"\n\n    def __hash__(self):  # [invalid-hash-returned]\n        return {}\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0310",
            "name": "invalid-length-hint-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0310",
                "symbol": "invalid-length-hint-returned",
                "msg": "__length_hint__ does not return non-negative integer",
                "description": "Used when a __length_hint__ method returns something which is not a non-negative integer",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class GoodLengthHint:\n    \"\"\"__length_hint__ returns <type 'int'>\"\"\"\n\n    def __length_hint__(self):\n        return 10\n",
            "bad_code": "class BadLengthHint:\n    \"\"\"__length_hint__ returns non-int\"\"\"\n\n    def __length_hint__(self):  # [invalid-length-hint-returned]\n        return 3.0\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0311",
            "name": "invalid-format-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0311",
                "symbol": "invalid-format-returned",
                "msg": "__format__ does not return str",
                "description": "Used when a __format__ method returns something which is not a string",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class GoodFormat:\n    \"\"\"__format__ returns <type 'str'>\"\"\"\n\n    def __format__(self, format_spec):\n        return \"hello!\"\n",
            "bad_code": "class BadFormat:\n    \"\"\"__format__ returns <type 'int'>\"\"\"\n\n    def __format__(self, format_spec):  # [invalid-format-returned]\n        return 1\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0312",
            "name": "invalid-getnewargs-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0312",
                "symbol": "invalid-getnewargs-returned",
                "msg": "__getnewargs__ does not return a tuple",
                "description": "Used when a __getnewargs__ method returns something which is not a tuple",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class GoodGetNewArgs:\n    \"\"\"__getnewargs__ returns <type 'tuple'>\"\"\"\n\n    def __getnewargs__(self):\n        return (1, 2)\n",
            "bad_code": "class BadGetNewArgs:\n    \"\"\"__getnewargs__ returns an integer\"\"\"\n\n    def __getnewargs__(self):  # [invalid-getnewargs-returned]\n        return 1\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0313",
            "name": "invalid-getnewargs-ex-returned",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0313",
                "symbol": "invalid-getnewargs-ex-returned",
                "msg": "__getnewargs_ex__ does not return a tuple containing (tuple, dict)",
                "description": "Used when a __getnewargs_ex__ method returns something which is not of the form tuple(tuple, dict)",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class GoodGetNewArgsEx:\n    \"\"\"__getnewargs_ex__ returns <type 'tuple'>\"\"\"\n\n    def __getnewargs_ex__(self):\n        return ((1,), {\"2\": 2})\n",
            "bad_code": "class BadGetNewArgsEx:\n    \"\"\"__getnewargs_ex__ returns tuple with incorrect arg length\"\"\"\n\n    def __getnewargs_ex__(self):  # [invalid-getnewargs-ex-returned]\n        return (tuple(1), dict(x=\"y\"), 1)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.special_methods_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0202",
            "name": "method-hidden",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0202",
                "symbol": "method-hidden",
                "msg": "An attribute defined in %s line %s hides this method",
                "description": "Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    def __init__(self, vitamins):\n        self.vitamins = vitamins\n\n    def antioxidants(self):\n        pass\n",
            "bad_code": "class Fruit:\n    def __init__(self, vitamins):\n        self.vitamins = vitamins\n\n    def vitamins(self):  # [method-hidden]\n        pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0203",
            "name": "access-member-before-definition",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0203",
                "symbol": "access-member-before-definition",
                "msg": "Access to member %r before its definition line %s",
                "description": "Used when an instance member is accessed before it's actually assigned.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Foo:\n    def __init__(self, param):\n        self.param = param\n        if self.param:\n            pass\n",
            "bad_code": "class Foo:\n    def __init__(self, param):\n        if self.param:  # [access-member-before-definition]\n            pass\n        self.param = param\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0211",
            "name": "no-method-argument",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0211",
                "symbol": "no-method-argument",
                "msg": "Method has no argument",
                "description": "Used when a method which should have the bound instance as first argument has no argument defined.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Person:\n    def print_greeting(self):\n        print(\"hello\")\n",
            "bad_code": "class Person:\n    def print_greeting():  # [no-method-argument]\n        print(\"hello\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0213",
            "name": "no-self-argument",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0213",
                "symbol": "no-self-argument",
                "msg": "Method should have \"self\" as first argument",
                "description": "Used when a method has an attribute different the \"self\" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    def __init__(self, name):\n        self.name = name\n",
            "bad_code": "class Fruit:\n    def __init__(this, name):  # [no-self-argument]\n        this.name = name\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0236",
            "name": "invalid-slots-object",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0236",
                "symbol": "invalid-slots-object",
                "msg": "Invalid object %r in __slots__, must contain only non empty strings",
                "description": "Used when an invalid (non-string) object occurs in __slots__.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Person:\n    __slots__ = ('name', 'surname')\n",
            "bad_code": "class Person:\n    __slots__ = ('name', 3)  # [invalid-slots-object]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Documentation for __slots__ <https://docs.python.org/3/reference/datamodel.html#slots>`_\n",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0237",
            "name": "assigning-non-slot",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0237",
                "symbol": "assigning-non-slot",
                "msg": "Assigning to attribute %r not defined in class slots",
                "description": "Used when assigning to an attribute not defined in the class slots.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Student:\n    __slots__ = ('name', 'surname')\n\n    def __init__(self, name, surname):\n        self.name = name\n        self.surname = surname\n        self.setup()\n\n    def setup(self):\n        pass\n",
            "bad_code": "class Student:\n    __slots__ = ('name',)\n\n    def __init__(self, name, surname):\n        self.name = name\n        self.surname = surname  # [assigning-non-slot]\n        self.setup()\n\n    def setup(self):\n        pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0238",
            "name": "invalid-slots",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0238",
                "symbol": "invalid-slots",
                "msg": "Invalid __slots__ object",
                "description": "Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Person:\n    __slots__ = (\"name\", \"age\",)\n",
            "bad_code": "class Person:  # [invalid-slots]\n    __slots__ = 42\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0239",
            "name": "inherit-non-class",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0239",
                "symbol": "inherit-non-class",
                "msg": "Inheriting %r, which is not a class.",
                "description": "Used when a class inherits from something which is not a class.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    def __bool__(self):\n        pass\n",
            "bad_code": "class Fruit(bool):  # [inherit-non-class]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0240",
            "name": "inconsistent-mro",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0240",
                "symbol": "inconsistent-mro",
                "msg": "Inconsistent method resolution order for class %r",
                "description": "Used when a class has an inconsistent method resolution order.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0241",
            "name": "duplicate-bases",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0241",
                "symbol": "duplicate-bases",
                "msg": "Duplicate bases for class %r",
                "description": "Duplicate use of base classes in derived classes raise TypeErrors.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Animal:\n    pass\n\n\nclass Bird(Animal):\n    pass\n\n\nclass Cat(Animal):\n    pass\n",
            "bad_code": "class Animal:\n    pass\n\n\nclass Cat(Animal, Animal):  # [duplicate-bases]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0242",
            "name": "class-variable-slots-conflict",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0242",
                "symbol": "class-variable-slots-conflict",
                "msg": "Value %r in slots conflicts with class variable",
                "description": "Used when a value in __slots__ conflicts with a class variable, property or method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Person:\n    __slots__ = (\"_age\", \"name\",)\n\n    def __init__(self, age, name):\n        self._age = age\n        self.name = name\n\n    @property\n    def age(self):\n        return self._age\n\n    def say_hi(self):\n        print(f\"Hi, I'm {self.name}.\")\n",
            "bad_code": "class Person:\n    # +1: [class-variable-slots-conflict, class-variable-slots-conflict, class-variable-slots-conflict]\n    __slots__ = (\"age\", \"name\", \"say_hi\")\n    name = None\n\n    def __init__(self, age, name):\n        self.age = age\n        self.name = name\n\n    @property\n    def age(self):\n        return self.age\n\n    def say_hi(self):\n        print(f\"Hi, I'm {self.name}.\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0243",
            "name": "invalid-class-object",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0243",
                "symbol": "invalid-class-object",
                "msg": "Invalid __class__ object",
                "description": "Used when an invalid object is assigned to a __class__ property. Only a class is permitted.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Apple:\n    pass\n\n\nclass RedDelicious:\n    pass\n\n\nApple.__class__ = RedDelicious\n",
            "bad_code": "class Apple:\n    pass\n\n\nApple.__class__ = 1  # [invalid-class-object]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "E0244",
            "name": "invalid-enum-extension",
            "definition": {
                "checker_name": "classes",
                "msgid": "E0244",
                "symbol": "invalid-enum-extension",
                "msg": "Extending inherited Enum class \"%s\"",
                "description": "Used when a class tries to extend an inherited Enum class. Doing so will raise a TypeError at runtime.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from enum import Enum\n\n\nclass Color(Enum):\n    ORANGE = 1\n    CHERRY = 2\n\n\nclass Fruit(Enum):\n    ORANGE = 1\n    CHERRY = 2\n    APPLE = 3\n",
            "bad_code": "from enum import Enum\n\n\nclass Color(Enum):\n    ORANGE = 1\n    CHERRY = 2\n\n\nclass Fruit(Color):  # [invalid-enum-extension]\n    APPLE = 3\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "E0701",
            "name": "bad-except-order",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "E0701",
                "symbol": "bad-except-order",
                "msg": "Bad except clauses order (%s)",
                "description": "Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "try:\n    print(int(input()))\nexcept TypeError:\n    raise\nexcept Exception:\n    raise\n",
            "bad_code": "try:\n    print(int(input()))\nexcept Exception:\n    raise\nexcept TypeError:  # [bad-except-order]\n    # This block cannot be reached since TypeError exception\n    # is caught by previous exception handler.\n    raise\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "E0702",
            "name": "raising-bad-type",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "E0702",
                "symbol": "raising-bad-type",
                "msg": "Raising %s while only classes or instances are allowed",
                "description": "Used when something which is neither a class nor an instance is raised (i.e. a `TypeError` will be raised).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class FasterThanTheSpeedOfLightError(ZeroDivisionError):\n    def __init__(self):\n        super().__init__(\"You can't go faster than the speed of light !\")\n\n\ndef calculate_speed(distance: float, time: float) -> float:\n    try:\n        return distance / time\n    except ZeroDivisionError as e:\n        raise FasterThanTheSpeedOfLightError() from e\n",
            "bad_code": "class FasterThanTheSpeedOfLightError(ZeroDivisionError):\n    def __init__(self):\n        super().__init__(\"You can't go faster than the speed of light !\")\n\n\ndef calculate_speed(distance: float, time: float) -> float:\n    try:\n        return distance / time\n    except ZeroDivisionError as e:\n        raise None  # [raising-bad-type]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "E0703",
            "name": "bad-exception-context",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "E0703",
                "symbol": "bad-exception-context",
                "msg": "Exception context set to something which is not an exception, nor None",
                "description": "Used when using the syntax \"raise ... from ...\", where the exception context is not an exception, nor None.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "E0704",
            "name": "misplaced-bare-raise",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "E0704",
                "symbol": "misplaced-bare-raise",
                "msg": "The raise statement is not inside an except clause",
                "description": "Used when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def validate_positive(x):\n    if x <= 0:\n        raise ValueError(f\"{x} is not positive\")\n",
            "bad_code": "def validate_positive(x):\n    if x <= 0:\n        raise  # [misplaced-bare-raise]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "E0710",
            "name": "raising-non-exception",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "E0710",
                "symbol": "raising-non-exception",
                "msg": "Raising a new style class which doesn't inherit from BaseException",
                "description": "Used when a new style class which doesn't inherit from BaseException is raised.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "raise Exception(\"Goodbye world !\")\n",
            "bad_code": "raise str  # [raising-non-exception]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "E0711",
            "name": "notimplemented-raised",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "E0711",
                "symbol": "notimplemented-raised",
                "msg": "NotImplemented raised - should raise NotImplementedError",
                "description": "Used when NotImplemented is raised instead of NotImplementedError",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Worm:\n    def bore(self):\n        raise NotImplementedError\n",
            "bad_code": "class Worm:\n    def bore(self):\n        raise NotImplemented  # [notimplemented-raised]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "E0712",
            "name": "catching-non-exception",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "E0712",
                "symbol": "catching-non-exception",
                "msg": "Catching an exception which doesn't inherit from Exception: %s",
                "description": "Used when a class which doesn't inherit from Exception is used as an exception in an except clause.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class FooError(Exception):\n    pass\n\n\ntry:\n    1 / 0\nexcept FooError:\n    pass\n",
            "bad_code": "class FooError:\n    pass\n\n\ntry:\n    1 / 0\nexcept FooError:  # [catching-non-exception]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "E0401",
            "name": "import-error",
            "definition": {
                "checker_name": "imports",
                "msgid": "E0401",
                "symbol": "import-error",
                "msg": "Unable to import %s",
                "description": "Used when pylint has been unable to import a module.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "F0401",
                        "old-import-error"
                    ]
                ]
            },
            "good_code": "from pathlib import Path\n",
            "bad_code": "from patlib import Path  # [import-error]\n",
            "details": "**Additional details:**\n\nThis can happen if you're importing a package that is not installed in your environment, or if you made a typo.\n\nThe solution is to install the package via pip/setup.py/wheel or fix the typo.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "E0402",
            "name": "relative-beyond-top-level",
            "definition": {
                "checker_name": "imports",
                "msgid": "E0402",
                "symbol": "relative-beyond-top-level",
                "msg": "Attempted relative import beyond top-level package",
                "description": "Used when a relative import tries to access too many levels in the current package.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "logging",
            "id": "E1200",
            "name": "logging-unsupported-format",
            "definition": {
                "checker_name": "logging",
                "msgid": "E1200",
                "symbol": "logging-unsupported-format",
                "msg": "Unsupported logging format character %r (%#02x) at index %d",
                "description": "Used when an unsupported format character is used in a logging statement format string.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.logging",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "logging",
            "id": "E1201",
            "name": "logging-format-truncated",
            "definition": {
                "checker_name": "logging",
                "msgid": "E1201",
                "symbol": "logging-format-truncated",
                "msg": "Logging format string ends in middle of conversion specifier",
                "description": "Used when a logging statement format string terminates before the end of a conversion specifier.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import logging\n\nlogging.warning(\"Here is a variable: %s\", my_var)\n",
            "bad_code": "import logging\n\nlogging.warning(\"Here is a variable: %\", my_var)  # [logging-format-truncated]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.logging",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "logging",
            "id": "E1205",
            "name": "logging-too-many-args",
            "definition": {
                "checker_name": "logging",
                "msgid": "E1205",
                "symbol": "logging-too-many-args",
                "msg": "Too many arguments for logging format string",
                "description": "Used when a logging format string is given too many arguments.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import logging\n\ntry:\n    function()\nexcept Exception as e:\n    logging.error('%s error occurred: %s', type(e), e)\n    raise\n",
            "bad_code": "import logging\n\ntry:\n    function()\nexcept Exception as e:\n    logging.error('Error occurred: %s', type(e), e)  # [logging-too-many-args]\n    raise\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.logging",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "logging",
            "id": "E1206",
            "name": "logging-too-few-args",
            "definition": {
                "checker_name": "logging",
                "msgid": "E1206",
                "symbol": "logging-too-few-args",
                "msg": "Not enough arguments for logging format string",
                "description": "Used when a logging format string is given too few arguments.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import logging\n\ntry:\n    function()\nexcept Exception as e:\n    logging.error('%s error occurred: %s', type(e), e)\n    raise\n",
            "bad_code": "import logging\n\ntry:\n    function()\nexcept Exception as e:\n    logging.error('%s error occurred: %s', e)  # [logging-too-few-args]\n    raise\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.logging",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "modified_iteration",
            "id": "E4702",
            "name": "modified-iterating-dict",
            "definition": {
                "checker_name": "modified_iteration",
                "msgid": "E4702",
                "symbol": "modified-iterating-dict",
                "msg": "Iterated dict '%s' is being modified inside for loop body, iterate through a copy of it instead.",
                "description": "Emitted when items are added or removed to a dict being iterated through. Doing so raises a RuntimeError.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "fruits = {\"apple\": 1, \"orange\": 2, \"mango\": 3}\n\ni = 0\nfor fruit in fruits.copy():\n    fruits[\"apple\"] = i\n    i += 1\n",
            "bad_code": "fruits = {\"apple\": 1, \"orange\": 2, \"mango\": 3}\n\ni = 0\nfor fruit in fruits:\n    fruits[\"apple\"] = i  # [modified-iterating-dict]\n    i += 1\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.modified_iterating_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "modified_iteration",
            "id": "E4703",
            "name": "modified-iterating-set",
            "definition": {
                "checker_name": "modified_iteration",
                "msgid": "E4703",
                "symbol": "modified-iterating-set",
                "msg": "Iterated set '%s' is being modified inside for loop body, iterate through a copy of it instead.",
                "description": "Emitted when items are added or removed to a set being iterated through. Doing so raises a RuntimeError.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "fruits = {\"apple\", \"orange\", \"mango\"}\nfor fruit in fruits.copy():\n    fruits.add(fruit + \"yum\")\n",
            "bad_code": "fruits = {\"apple\", \"orange\", \"mango\"}\nfor fruit in fruits:\n    fruits.add(fruit + \"yum\")  # [modified-iterating-set]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.modified_iterating_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "newstyle",
            "id": "E1003",
            "name": "bad-super-call",
            "definition": {
                "checker_name": "newstyle",
                "msgid": "E1003",
                "symbol": "bad-super-call",
                "msg": "Bad first argument %r given to super()",
                "description": "Used when another argument than the current class is given as first argument of the super builtin.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Animal:\n    pass\n\n\nclass Tree:\n    pass\n\n\nclass Cat(Animal):\n    def __init__(self):\n        super(Animal, self).__init__()\n",
            "bad_code": "class Animal:\n    pass\n\n\nclass Tree:\n    pass\n\n\nclass Cat(Animal):\n    def __init__(self):\n        super(Tree, self).__init__()  # [bad-super-call]\n        super(Animal, self).__init__()\n",
            "details": "**Additional details:**\n\nIn Python 2.7, ``super()`` has to be called with its own class and ``self`` as arguments (``super(Cat, self)``), which can\nlead to a mix up of parent and child class in the code.\n\nIn Python 3 the recommended way is to call ``super()`` without arguments (see also ``super-with-arguments``).\n\nOne exception is calling ``super()`` on a non-direct parent class. This can be used to get a method other than the default\nmethod returned by the ``mro()``.\n",
            "related_links": "**Related links:**\n\n- `Documentation for super() <https://docs.python.org/3/library/functions.html#super>`_\n",
            "checker_module_name": "pylint.checkers.newstyle",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unicode_checker",
            "id": "E2501",
            "name": "invalid-unicode-codec",
            "definition": {
                "checker_name": "unicode_checker",
                "msgid": "E2501",
                "symbol": "invalid-unicode-codec",
                "msg": "UTF-16 and UTF-32 aren't backward compatible. Use UTF-8 instead",
                "description": "For compatibility use UTF-8 instead of UTF-16/UTF-32. See also https://bugs.python.org/issue1503789 for a history of this issue. And https://softwareengineering.stackexchange.com/questions/102205/should-utf-16-be-considered-harmful for some possible problems when using UTF-16 for instance.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unicode",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unicode_checker",
            "id": "E2502",
            "name": "bidirectional-unicode",
            "definition": {
                "checker_name": "unicode_checker",
                "msgid": "E2502",
                "symbol": "bidirectional-unicode",
                "msg": "Contains control characters that can permit obfuscated code executed differently than displayed",
                "description": "bidirectional unicode are typically not displayed characters required to display right-to-left (RTL) script (i.e. Chinese, Japanese, Arabic, Hebrew, ...) correctly. So can you trust this code? Are you sure it displayed correctly in all editors? If you did not write it or your language is not RTL, remove the special characters, as they could be used to trick you into executing code, that does something else than what it looks like.\nMore Information:\nhttps://en.wikipedia.org/wiki/Bidirectional_text\nhttps://trojansource.codes/",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unicode",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unicode_checker",
            "id": "E2510",
            "name": "invalid-character-backspace",
            "definition": {
                "checker_name": "unicode_checker",
                "msgid": "E2510",
                "symbol": "invalid-character-backspace",
                "msg": "Invalid unescaped character backspace, use \"\\b\" instead.",
                "description": "Moves the cursor back, so the character after it will overwrite the character before.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unicode",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unicode_checker",
            "id": "E2511",
            "name": "invalid-character-carriage-return",
            "definition": {
                "checker_name": "unicode_checker",
                "msgid": "E2511",
                "symbol": "invalid-character-carriage-return",
                "msg": "Invalid unescaped character carriage-return, use \"\\r\" instead.",
                "description": "Moves the cursor to the start of line, subsequent characters overwrite the start of the line.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unicode",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unicode_checker",
            "id": "E2512",
            "name": "invalid-character-sub",
            "definition": {
                "checker_name": "unicode_checker",
                "msgid": "E2512",
                "symbol": "invalid-character-sub",
                "msg": "Invalid unescaped character sub, use \"\\x1A\" instead.",
                "description": "Ctrl+Z \"End of text\" on Windows. Some programs (such as type) ignore the rest of the file after it.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unicode",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unicode_checker",
            "id": "E2513",
            "name": "invalid-character-esc",
            "definition": {
                "checker_name": "unicode_checker",
                "msgid": "E2513",
                "symbol": "invalid-character-esc",
                "msg": "Invalid unescaped character esc, use \"\\x1B\" instead.",
                "description": "Commonly initiates escape codes which allow arbitrary control of the terminal.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unicode",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unicode_checker",
            "id": "E2514",
            "name": "invalid-character-nul",
            "definition": {
                "checker_name": "unicode_checker",
                "msgid": "E2514",
                "symbol": "invalid-character-nul",
                "msg": "Invalid unescaped character nul, use \"\\0\" instead.",
                "description": "Mostly end of input for python.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unicode",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unicode_checker",
            "id": "E2515",
            "name": "invalid-character-zero-width-space",
            "definition": {
                "checker_name": "unicode_checker",
                "msgid": "E2515",
                "symbol": "invalid-character-zero-width-space",
                "msg": "Invalid unescaped character zero-width-space, use \"\\u200B\" instead.",
                "description": "Invisible space character could hide real code execution.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unicode",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "E0601",
            "name": "used-before-assignment",
            "definition": {
                "checker_name": "variables",
                "msgid": "E0601",
                "symbol": "used-before-assignment",
                "msg": "Using variable %r before assignment",
                "description": "Emitted when a local variable is accessed before its assignment took place. Assignments in try blocks are assumed not to have occurred when evaluating associated except/finally blocks. Assignments in except blocks are assumed not to have occurred when evaluating statements outside the block, except when the associated try block contains a return statement.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "hello = \"Hello World !\"\nprint(hello)\n",
            "bad_code": "print(hello)  # [used-before-assignment]\nhello = \"Hello World !\"\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "E0602",
            "name": "undefined-variable",
            "definition": {
                "checker_name": "variables",
                "msgid": "E0602",
                "symbol": "undefined-variable",
                "msg": "Undefined variable %r",
                "description": "Used when an undefined variable is accessed.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "number = 3\nprint(number + 2)\n",
            "bad_code": "print(number + 2)  # [undefined-variable]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "E0603",
            "name": "undefined-all-variable",
            "definition": {
                "checker_name": "variables",
                "msgid": "E0603",
                "symbol": "undefined-all-variable",
                "msg": "Undefined variable name %r in __all__",
                "description": "Used when an undefined variable name is referenced in __all__.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "__all__ = [\"get_fruit_color\"]\n\ndef get_fruit_color():\n    pass\n",
            "bad_code": "__all__ = [\"get_fruit_colour\"]  # [undefined-all-variable]\n\ndef get_fruit_color():\n    pass\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Importing * From a Package <https://docs.python.org/3/tutorial/modules.html#importing-from-a-package>`_\n",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "E0604",
            "name": "invalid-all-object",
            "definition": {
                "checker_name": "variables",
                "msgid": "E0604",
                "symbol": "invalid-all-object",
                "msg": "Invalid object %r in __all__, must contain only strings",
                "description": "Used when an invalid (non-string) object occurs in __all__.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "__all__ = ['Fruit', 'Worm']\n\nclass Fruit:\n    pass\n\nclass Worm:\n    pass\n",
            "bad_code": "__all__ = (\n    None,  # [invalid-all-object]\n    Fruit,\n    Worm,\n)\n\nclass Fruit:\n    pass\n\nclass Worm:\n    pass\n",
            "details": "**Additional details:**\n\nFrom `The Python Language Reference \u2013 The import statement <https://docs.python.org/3/reference/simple_stmts.html#the-import-statement>`_:\n    \"The `public names` defined by a module are determined by checking the module's namespace for a variable named ``__all__``; if defined, it must be a sequence of strings which are names defined or imported by that module.\"\n",
            "related_links": "**Related links:**\n\n- `PEP 8 \u2013 Style Guide for Python Code <https://peps.python.org/pep-0008/#module-level-dunder-names>`_\n",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "E0605",
            "name": "invalid-all-format",
            "definition": {
                "checker_name": "variables",
                "msgid": "E0605",
                "symbol": "invalid-all-format",
                "msg": "Invalid format for __all__, must be tuple or list",
                "description": "Used when __all__ has an invalid format.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "__all__ = (\"CONST\",)\n\nCONST = 42\n",
            "bad_code": "__all__ = (\"CONST\")  # [invalid-all-format]\n\nCONST = 42\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "E0611",
            "name": "no-name-in-module",
            "definition": {
                "checker_name": "variables",
                "msgid": "E0611",
                "symbol": "no-name-in-module",
                "msg": "No name %r in module %r",
                "description": "Used when a name cannot be found in a module.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from os import path\n",
            "bad_code": "from os import pizza  # [no-name-in-module]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "E0633",
            "name": "unpacking-non-sequence",
            "definition": {
                "checker_name": "variables",
                "msgid": "E0633",
                "symbol": "unpacking-non-sequence",
                "msg": "Attempting to unpack a non-sequence%s",
                "description": "Used when something which is not a sequence is used in an unpack assignment",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W0633",
                        "old-unpacking-non-sequence"
                    ]
                ]
            },
            "good_code": "a, b, c = 1, 2, 3\n",
            "bad_code": "a, b, c = 1  # [unpacking-non-sequence]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "E0643",
            "name": "potential-index-error",
            "definition": {
                "checker_name": "variables",
                "msgid": "E0643",
                "symbol": "potential-index-error",
                "msg": "Invalid index for iterable length",
                "description": "Emitted when an index used on an iterable goes beyond the length of that iterable.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print([1, 2, 3][2])\n",
            "bad_code": "print([1, 2, 3][3])  # [potential-index-error]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "E1507",
            "name": "invalid-envvar-value",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "E1507",
                "symbol": "invalid-envvar-value",
                "msg": "%s does not support %s type argument",
                "description": "Env manipulation functions support only string type arguments. See https://docs.python.org/3/library/os.html#os.getenv.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import os\n\nos.getenv('1')\n",
            "bad_code": "import os\n\nos.getenv(1)  # [invalid-envvar-value]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "E1300",
            "name": "bad-format-character",
            "definition": {
                "checker_name": "string",
                "msgid": "E1300",
                "symbol": "bad-format-character",
                "msg": "Unsupported format character %r (%#02x) at index %d",
                "description": "Used when an unsupported format character is used in a format string.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"%s %s\" % (\"hello\", \"world\"))\n",
            "bad_code": "print(\"%s %z\" % (\"hello\", \"world\"))  # [bad-format-character]\n",
            "details": "**Additional details:**\n\nThis check is currently only active for \"old-style\" string formatting as seen in the examples.\nSee `Issue #6085 <https://github.com/PyCQA/pylint/issues/6085>`_ for more information.\n",
            "related_links": "**Related links:**\n\n- `Format String Syntax <https://docs.python.org/3/library/string.html#formatstrings>`_\n- `PyFormat <https://pyformat.info/>`_\n",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "E1301",
            "name": "truncated-format-string",
            "definition": {
                "checker_name": "string",
                "msgid": "E1301",
                "symbol": "truncated-format-string",
                "msg": "Format string ends in middle of conversion specifier",
                "description": "Used when a format string terminates before the end of a conversion specifier.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "E1302",
            "name": "mixed-format-string",
            "definition": {
                "checker_name": "string",
                "msgid": "E1302",
                "symbol": "mixed-format-string",
                "msg": "Mixing named and unnamed conversion specifiers in format string",
                "description": "Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers.  This is also used when a named conversion specifier contains * for the minimum field width and/or precision.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"x=%d, y=%d\" % (0, 1))\nprint(\"x=%(x)d, y=%(y)d\" % {\"x\": 0, \"y\": 1})\n",
            "bad_code": "print(\"x=%(x)d, y=%d\" % (0, 1))  # [mixed-format-string]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "E1303",
            "name": "format-needs-mapping",
            "definition": {
                "checker_name": "string",
                "msgid": "E1303",
                "symbol": "format-needs-mapping",
                "msg": "Expected mapping for format string, not %s",
                "description": "Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"%(x)d %(y)d\" % {\"x\": 1, \"y\": 2})\n",
            "bad_code": "print(\"%(x)d %(y)d\" % [1, 2])  # [format-needs-mapping]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "E1304",
            "name": "missing-format-string-key",
            "definition": {
                "checker_name": "string",
                "msgid": "E1304",
                "symbol": "missing-format-string-key",
                "msg": "Missing key %r in format string dictionary",
                "description": "Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "E1305",
            "name": "too-many-format-args",
            "definition": {
                "checker_name": "string",
                "msgid": "E1305",
                "symbol": "too-many-format-args",
                "msg": "Too many arguments for format string",
                "description": "Used when a format string that uses unnamed conversion specifiers is given too many arguments.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"Today is {0}, so tomorrow will be {1}\".format(\"Monday\", \"Tuesday\"))\n",
            "bad_code": "# +1: [too-many-format-args]\nprint(\"Today is {0}, so tomorrow will be {1}\".format(\"Monday\", \"Tuesday\", \"Wednesday\"))\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `String Formmating <https://docs.python.org/3/library/string.html#formatstrings>`_\n",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "E1306",
            "name": "too-few-format-args",
            "definition": {
                "checker_name": "string",
                "msgid": "E1306",
                "symbol": "too-few-format-args",
                "msg": "Not enough arguments for format string",
                "description": "Used when a format string that uses unnamed conversion specifiers is given too few arguments",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"Today is {0}, so tomorrow will be {1}\".format(\"Monday\", \"Tuesday\"))\n",
            "bad_code": "print(\"Today is {0}, so tomorrow will be {1}\".format(\"Monday\"))  # [too-few-format-args]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `String Formmating <https://docs.python.org/3/library/string.html#formatstrings>`_\n",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "E1307",
            "name": "bad-string-format-type",
            "definition": {
                "checker_name": "string",
                "msgid": "E1307",
                "symbol": "bad-string-format-type",
                "msg": "Argument %r does not match format type %r",
                "description": "Used when a type required by format string is not suitable for actual argument type",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"%d\" % 1)\n",
            "bad_code": "print(\"%d\" % \"1\")  # [bad-string-format-type]\n",
            "details": "**Additional details:**\n\nThis check is currently only active for \"old-style\" string formatting as seen in the examples.\nSee `Issue #6085 <https://github.com/PyCQA/pylint/issues/6163>`_ for more information.\n",
            "related_links": "**Related links:**\n\n- `Format String Syntax <https://docs.python.org/3/library/string.html#formatstrings>`_\n- `PyFormat <https://pyformat.info/>`_\n",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "E1310",
            "name": "bad-str-strip-call",
            "definition": {
                "checker_name": "string",
                "msgid": "E1310",
                "symbol": "bad-str-strip-call",
                "msg": "Suspicious argument in %s.%s call",
                "description": "The argument to a str.{l,r,}strip call contains a duplicate character,",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "\"Hello World\".strip(\"Helo\")\n# >>> ' World'\n\"abcbc def bacabc\".strip(\"abc \")\n# >>> 'def'\n",
            "bad_code": "\"Hello World\".strip(\"Hello\")  # [bad-str-strip-call]\n# >>> ' World'\n\"abcbc def bacabc\".strip(\"abcbc \")  # [bad-str-strip-call]\n# >>> 'def'\n",
            "details": "**Additional details:**\n\nA common misconception is that ``str.strip('Hello')`` removes the *substring* ``'Hello'`` from the beginning and end of the string.\nThis is **not**  the case.\nFrom the `documentation <https://docs.python.org/3/library/stdtypes.html?highlight=strip#str.strip>`_:\n\n> The chars argument is not a prefix or suffix; rather, all combinations of its values are stripped\n\nDuplicated characters in the ``str.strip`` call, besides not having any effect on the actual result, may indicate this misunderstanding.\n",
            "related_links": "**Related links:**\n\n- Documentation: `str.strip([chars]) <https://docs.python.org/3/library/stdtypes.html?highlight=strip#str.strip>`_\n",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1133",
            "name": "not-an-iterable",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1133",
                "symbol": "not-an-iterable",
                "msg": "Non-iterable value %s is used in an iterating context",
                "description": "Used when a non-iterable value is used in place where iterable is expected",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "for i in \"10\":\n    pass\n",
            "bad_code": "for i in 10:  # [not-an-iterable]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1134",
            "name": "not-a-mapping",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1134",
                "symbol": "not-a-mapping",
                "msg": "Non-mapping value %s is used in a mapping context",
                "description": "Used when a non-mapping value is used in place where mapping is expected",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def print_colors(**colors):\n    print(colors)\n\n\nprint_colors(**dict(red=1, black=2))\n",
            "bad_code": "def print_colors(**colors):\n    print(colors)\n\n\nprint_colors(**list(\"red\", \"black\"))  # [not-a-mapping]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1101",
            "name": "no-member",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1101",
                "symbol": "no-member",
                "msg": "%s %r has no %r member%s",
                "description": "Used when a variable is accessed for a nonexistent member.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "E1103",
                        "maybe-no-member"
                    ]
                ]
            },
            "good_code": "from pathlib import Path\n\ndirectories = Path(\".\").parents\n\n\nclass Cat:\n    def meow(self):\n        print(\"Meow\")\n\n\nCat().meow()\n",
            "bad_code": "from pathlib import Path\n\ndirectories = Path(\".\").mothers  # [no-member]\n\n\nclass Cat:\n    def meow(self):\n        print(\"Meow\")\n\n\nCat().roar()  # [no-member]\n",
            "details": "**Additional details:**\n\nIf you are getting the dreaded ``no-member`` error, there is a possibility that\neither:\n\n- pylint found a bug in your code\n- You're launching pylint without the dependencies installed in its environment\n- pylint would need to lint a C extension module and is refraining to do so\n- pylint does not understand dynamically generated code\n\nLinting C extension modules is not supported out of the box, especially since\npylint has no way to get an AST object out of the extension module.\n\nBut pylint actually has a mechanism which you might use in case you\nwant to analyze C extensions. Pylint has a flag, called ``extension-pkg-allow-list``\n(formerly ``extension-pkg-whitelist``), through which you can tell it to\nimport that module and to build an AST from that imported module::\n\n   $ pylint --extension-pkg-allow-list=your_c_extension\n\nBe aware though that using this flag means that extensions are loaded into the\nactive Python interpreter and may run arbitrary code, which you may not want. This\nis the reason why we disable by default loading C extensions. In case you do not want\nthe hassle of passing C extensions module with this flag all the time, you\ncan enable ``unsafe-load-any-extension`` in your configuration file, which will\nbuild AST objects from all the C extensions that pylint encounters::\n\n   $ pylint --unsafe-load-any-extension=y\n\nAlternatively, since pylint emits a separate error for attributes that cannot be\nfound in C extensions, ``c-extension-no-member``, you can disable this error for\nyour project.\n\nIf something is generated dynamically, pylint won't be able to understand the code\nfrom your library (c-extension or not). You can then specify generated attributes\nwith the ``generated-members`` option. For example if ``cv2.LINE_AA`` and\n``sphinx.generated_member`` create false positives for ``no-member``, you can do::\n\n   $ pylint --generated-member=cv2.LINE_AA,sphinx.generated_member\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1102",
            "name": "not-callable",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1102",
                "symbol": "not-callable",
                "msg": "%s is not callable",
                "description": "Used when an object being called has been inferred to a non callable object.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "NUMBER = 42\nprint(NUMBER)\n",
            "bad_code": "NUMBER = 42\nprint(NUMBER())  # [not-callable]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1111",
            "name": "assignment-from-no-return",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1111",
                "symbol": "assignment-from-no-return",
                "msg": "Assigning result of a function call, where the function has no return",
                "description": "Used when an assignment is done on a function call but the inferred function doesn't return anything.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def add(x, y):\n    return x + y\n\n\nvalue = add(10, 10)\n",
            "bad_code": "def add(x, y):\n    print(x + y)\n\n\nvalue = add(10, 10)  # [assignment-from-no-return]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1120",
            "name": "no-value-for-parameter",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1120",
                "symbol": "no-value-for-parameter",
                "msg": "No value for argument %s in %s call",
                "description": "Used when a function call passes too few arguments.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def add(x, y):\n    return x + y\n\nadd(1, 2)\n",
            "bad_code": "def add(x, y):\n    return x + y\n\nadd(1)  # [no-value-for-parameter]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1121",
            "name": "too-many-function-args",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1121",
                "symbol": "too-many-function-args",
                "msg": "Too many positional arguments for %s call",
                "description": "Used when a function call passes too many positional arguments.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    def __init__(self, color, name):\n        self.color = color\n        self.name = name\n\n\napple = Fruit(\"red\", \"apple\")\n",
            "bad_code": "class Fruit:\n    def __init__(self, color):\n        self.color = color\n\n\napple = Fruit(\"red\", \"apple\", [1, 2, 3])  # [too-many-function-args]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1123",
            "name": "unexpected-keyword-arg",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1123",
                "symbol": "unexpected-keyword-arg",
                "msg": "Unexpected keyword argument %r in %s call",
                "description": "Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def print_coordinates(x=0, y=0):\n    print(f\"{x=}, {y=}\")\n\n\nprint_coordinates(x=1, y=2)\n",
            "bad_code": "def print_coordinates(x=0, y=0):\n    print(f\"{x=}, {y=}\")\n\n\nprint_coordinates(x=1, y=2, z=3)  # [unexpected-keyword-arg]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1124",
            "name": "redundant-keyword-arg",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1124",
                "symbol": "redundant-keyword-arg",
                "msg": "Argument %r passed by position and keyword in %s call",
                "description": "Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def square(x):\n    return x * x\n\n\nsquare(x=4)\n# or\nsquare(5)\n",
            "bad_code": "def square(x):\n    return x * x\n\n\nsquare(5, x=4)  # [redundant-keyword-arg]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1125",
            "name": "missing-kwoa",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1125",
                "symbol": "missing-kwoa",
                "msg": "Missing mandatory keyword argument %r in %s call",
                "description": "Used when a function call does not pass a mandatory keyword-only argument.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1126",
            "name": "invalid-sequence-index",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1126",
                "symbol": "invalid-sequence-index",
                "msg": "Sequence index is not an int, slice, or instance with __index__",
                "description": "Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "fruits = ['apple', 'banana', 'orange']\nprint(fruits[0])\n",
            "bad_code": "fruits = ['apple', 'banana', 'orange']\nprint(fruits['apple'])  # [invalid-sequence-index]\n",
            "details": "**Additional details:**\n\nBe careful with ``[True]`` or ``[False]`` as sequence index, since ``True`` and ``False`` will respectively\nbe evaluated as ``1`` and ``0`` and will bring the second element of the list and the first without erroring.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1127",
            "name": "invalid-slice-index",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1127",
                "symbol": "invalid-slice-index",
                "msg": "Slice index is not an int, None, or instance with __index__",
                "description": "Used when a slice index is not an integer, None, or an object with an __index__ method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "LETTERS = [\"a\", \"b\", \"c\", \"d\"]\n\nFIRST_THREE = LETTERS[:3]\n",
            "bad_code": "LETTERS = [\"a\", \"b\", \"c\", \"d\"]\n\nFIRST_THREE = LETTERS[:\"3\"]  # [invalid-slice-index]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1128",
            "name": "assignment-from-none",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1128",
                "symbol": "assignment-from-none",
                "msg": "Assigning result of a function call, where the function returns None",
                "description": "Used when an assignment is done on a function call but the inferred function returns nothing but None.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W1111",
                        "old-assignment-from-none"
                    ]
                ]
            },
            "good_code": "def function():\n    return None\n\n\nf = function() if function() else 1\n",
            "bad_code": "def function():\n    return None\n\n\nf = function()  # [assignment-from-none]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1129",
            "name": "not-context-manager",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1129",
                "symbol": "not-context-manager",
                "msg": "Context manager '%s' doesn't implement __enter__ and __exit__.",
                "description": "Used when an instance in a with statement doesn't implement the context manager protocol(__enter__/__exit__).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class MyContextManager:\n    def __enter__(self):\n        pass\n\n    def __exit__(self, *exc):\n        pass\n\n\nwith MyContextManager() as c:\n    pass\n",
            "bad_code": "class MyContextManager:\n    def __enter__(self):\n        pass\n\n\nwith MyContextManager() as c:  # [not-context-manager]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1130",
            "name": "invalid-unary-operand-type",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1130",
                "symbol": "invalid-unary-operand-type",
                "msg": "%s",
                "description": "Emitted when a unary operand is used on an object which does not support this type of operation.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "cherries = 10\neaten_cherries = 2\ncherries -= eaten_cherries\n",
            "bad_code": "cherries = 10\neaten_cherries = int\ncherries = - eaten_cherries  # [invalid-unary-operand-type]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1131",
            "name": "unsupported-binary-operation",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1131",
                "symbol": "unsupported-binary-operation",
                "msg": "%s",
                "description": "Emitted when a binary arithmetic operation between two operands is not supported.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1132",
            "name": "repeated-keyword",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1132",
                "symbol": "repeated-keyword",
                "msg": "Got multiple values for keyword argument %r in function call",
                "description": "Emitted when a function call got multiple values for a keyword.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def func(a, b, c):\n    return a, b, c\n\n\nfunc(1, 2, c=3)\n",
            "bad_code": "def func(a, b, c):\n    return a, b, c\n\n\nfunc(1, 2, c=3, **{\"c\": 4})  # [repeated-keyword]\nfunc(1, 2, **{\"c\": 3}, **{\"c\": 4})  # [repeated-keyword]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1135",
            "name": "unsupported-membership-test",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1135",
                "symbol": "unsupported-membership-test",
                "msg": "Value '%s' doesn't support membership test",
                "description": "Emitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    FRUITS = [\"apple\", \"orange\"]\n    def __contains__(self, name):\n        return name in self.FRUITS\n\n\napple = \"apple\" in Fruit()\n",
            "bad_code": "class Fruit:\n    pass\n\n\napple = \"apple\" in Fruit()  # [unsupported-membership-test]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1136",
            "name": "unsubscriptable-object",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1136",
                "symbol": "unsubscriptable-object",
                "msg": "Value '%s' is unsubscriptable",
                "description": "Emitted when a subscripted value doesn't support subscription (i.e. doesn't define __getitem__ method or __class_getitem__ for a class).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    def __init__(self):\n        self.colors = [\"red\", \"orange\", \"yellow\"]\n\n    def __getitem__(self, idx):\n        return self.colors[idx]\n\n\nFruit()[1]\n",
            "bad_code": "class Fruit:\n    pass\n\n\nFruit()[1]  # [unsubscriptable-object]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1137",
            "name": "unsupported-assignment-operation",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1137",
                "symbol": "unsupported-assignment-operation",
                "msg": "%r does not support item assignment",
                "description": "Emitted when an object does not support item assignment (i.e. doesn't define __setitem__ method).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def pick_fruits(fruits):\n    for fruit in fruits:\n        print(fruit)\n\n    return []\n\n\npick_fruits([\"apple\"])[0] = \"orange\"\n",
            "bad_code": "def pick_fruits(fruits):\n    for fruit in fruits:\n        print(fruit)\n\n\npick_fruits([\"apple\"])[0] = \"orange\"  # [unsupported-assignment-operation]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1138",
            "name": "unsupported-delete-operation",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1138",
                "symbol": "unsupported-delete-operation",
                "msg": "%r does not support item deletion",
                "description": "Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "FRUITS = [\"apple\", \"orange\", \"berry\"]\n\ndel FRUITS[0]\n",
            "bad_code": "FRUITS = (\"apple\", \"orange\", \"berry\")\n\ndel FRUITS[0]  # [unsupported-delete-operation]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1139",
            "name": "invalid-metaclass",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1139",
                "symbol": "invalid-metaclass",
                "msg": "Invalid metaclass %r used",
                "description": "Emitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Plant:\n    pass\n\nclass Apple(Plant):\n    pass\n",
            "bad_code": "class Apple(metaclass=int):  # [invalid-metaclass]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1140",
            "name": "unhashable-dict-key",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1140",
                "symbol": "unhashable-dict-key",
                "msg": "Dict key is unhashable",
                "description": "Emitted when a dict key is not hashable (i.e. doesn't define __hash__ method).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1141",
            "name": "dict-iter-missing-items",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1141",
                "symbol": "dict-iter-missing-items",
                "msg": "Unpacking a dictionary in iteration without calling .items()",
                "description": "Emitted when trying to iterate through a dict without calling .items()",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "data = {'Paris': 2_165_423, 'New York City': 8_804_190, 'Tokyo': 13_988_129}\nfor city, population in data.items():\n    print(f\"{city} has population {population}.\")\n",
            "bad_code": "data = {'Paris': 2_165_423, 'New York City': 8_804_190, 'Tokyo': 13_988_129}\nfor city, population in data:  # [dict-iter-missing-items]\n    print(f\"{city} has population {population}.\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "E1142",
            "name": "await-outside-async",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "E1142",
                "symbol": "await-outside-async",
                "msg": "'await' should be used within an async function",
                "description": "Emitted when await is used outside an async function.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import asyncio\n\n\nasync def main():\n    await asyncio.sleep(1)\n",
            "bad_code": "import asyncio\n\n\ndef main():\n    await asyncio.sleep(1)  # [await-outside-async]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `PEP 492 <https://peps.python.org/pep-0492/#await-expression>`_\n",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typing",
            "id": "E6004",
            "name": "broken-noreturn",
            "definition": {
                "checker_name": "typing",
                "msgid": "E6004",
                "symbol": "broken-noreturn",
                "msg": "'NoReturn' inside compound types is broken in 3.7.0 / 3.7.1",
                "description": "``typing.NoReturn`` inside compound types is broken in Python 3.7.0 and 3.7.1. If not dependent on runtime introspection, use string annotation instead. E.g. ``Callable[..., 'NoReturn']``. https://bugs.python.org/issue34921",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from typing import NoReturn\n\n\ndef exploding_apple(apple) -> NoReturn:\n    print(f\"{apple} is about to explode\")\n    raise Exception(\"{apple} exploded !\")\n",
            "bad_code": "from typing import NoReturn, Union\n\n\ndef exploding_apple(apple) -> Union[None, NoReturn]:  # [broken-noreturn]\n    print(f\"{apple} is about to explode\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.typing",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typing",
            "id": "E6005",
            "name": "broken-collections-callable",
            "definition": {
                "checker_name": "typing",
                "msgid": "E6005",
                "symbol": "broken-collections-callable",
                "msg": "'collections.abc.Callable' inside Optional and Union is broken in 3.9.0 / 3.9.1 (use 'typing.Callable' instead)",
                "description": "``collections.abc.Callable`` inside Optional and Union is broken in Python 3.9.0 and 3.9.1. Use ``typing.Callable`` for these cases instead. https://bugs.python.org/issue42965",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from typing import Callable, Optional\n\n\ndef func() -> Optional[Callable[[int], None]]:\n    ...\n",
            "bad_code": "from collections.abc import Callable\nfrom typing import Optional\n\n\ndef func() -> Optional[Callable[[int], None]]:  # [broken-collections-callable]\n    ...\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `bpo-42965 <https://bugs.python.org/issue42965>`_\n",
            "checker_module_name": "pylint.extensions.typing",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        }
    ],
    "warning": [
        {
            "checker": "main",
            "id": "W0012",
            "name": "unknown-option-value",
            "definition": {
                "checker_name": "main",
                "msgid": "W0012",
                "symbol": "unknown-option-value",
                "msg": "Unknown option value for '%s', expected a valid pylint message and got '%s'",
                "description": "Used when an unknown value is encountered for an option.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "E0012",
                        "bad-option-value"
                    ]
                ]
            },
            "good_code": "# pylint: disable=missing-docstring\n",
            "bad_code": "# pylint: disable=missnig-docstring  # [unknown-option-value]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0143",
            "name": "comparison-with-callable",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0143",
                "symbol": "comparison-with-callable",
                "msg": "Comparing against a callable, did you omit the parenthesis?",
                "description": "This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def function_returning_a_fruit() -> str:\n    return \"orange\"\n\ndef is_an_orange(fruit: str = \"apple\"):\n    # apple == orange\n    return fruit == function_returning_a_fruit()\n",
            "bad_code": "def function_returning_a_fruit() -> str:\n    return \"orange\"\n\ndef is_an_orange(fruit: str = \"apple\"):\n    # apple == <function function_returning_a_fruit at 0x7f343ff0a1f0>\n    return fruit == function_returning_a_fruit  # [comparison-with-callable]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.comparison_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0177",
            "name": "nan-comparison",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0177",
                "symbol": "nan-comparison",
                "msg": "Comparison %s should be %s",
                "description": "Used when an expression is compared to NaNvalues like numpy.NaN and float('nan')",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import numpy as np\n\n\ndef both_nan(x, y) -> bool:\n    return np.isnan(x) and np.isnan(y)\n",
            "bad_code": "import numpy as np\n\n\ndef both_nan(x, y) -> bool:\n    return x == np.NaN and y == float(\"nan\")  # [nan-comparison, nan-comparison]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.comparison_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0107",
            "name": "unnecessary-pass",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0107",
                "symbol": "unnecessary-pass",
                "msg": "Unnecessary pass statement",
                "description": "Used when a \"pass\" statement that can be avoided is encountered.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Foo:\n    \"\"\"Foo docstring.\"\"\"\n",
            "bad_code": "class Foo:\n    \"\"\"Foo docstring.\"\"\"\n    pass  # [unnecessary-pass]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.pass_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0101",
            "name": "unreachable",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0101",
                "symbol": "unreachable",
                "msg": "Unreachable code",
                "description": "Used when there is some code behind a \"return\" or \"raise\" statement, which will never be accessed.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def say_hello():\n    print(\"Hello World!, Inside function.\")\n    return True\n",
            "bad_code": "def say_hello():\n    return True\n    print(\"Hello World!, Outside function.\")  # [unreachable]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0102",
            "name": "dangerous-default-value",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0102",
                "symbol": "dangerous-default-value",
                "msg": "Dangerous default value %s as argument",
                "description": "Used when a mutable value as list or dictionary is detected in a default value for an argument.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def whats_on_the_telly(penguin=None):\n    if penguin is None:\n        penguin = []\n    penguin.append(\"property of the zoo\")\n    return penguin\n",
            "bad_code": "def whats_on_the_telly(penguin=[]):  # [dangerous-default-value]\n    penguin.append(\"property of the zoo\")\n    return penguin\n",
            "details": "**Additional details:**\n\nWith a mutable default value, with each call the default value is modified, i.e.:\n\n.. code-block:: python\n\n    whats_on_the_telly() # [\"property of the zoo\"]\n    whats_on_the_telly() # [\"property of the zoo\", \"property of the zoo\"]\n    whats_on_the_telly() # [\"property of the zoo\", \"property of the zoo\", \"property of the zoo\"]\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0104",
            "name": "pointless-statement",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0104",
                "symbol": "pointless-statement",
                "msg": "Statement seems to have no effect",
                "description": "Used when a statement doesn't have (or at least seems to) any effect.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "NUMBERS = [1, 2, 3]\n\nprint(NUMBERS)\n",
            "bad_code": "[1, 2, 3]  # [pointless-statement]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0105",
            "name": "pointless-string-statement",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0105",
                "symbol": "pointless-string-statement",
                "msg": "String statement has no effect",
                "description": "Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "\"\"\"This is a docstring which describes the module\"\"\"\n\n# This is comment which describes a particular part of the module.\n",
            "bad_code": "\"\"\"This is a docstring which describes the module\"\"\"\n\n\"\"\"This is not a docstring\"\"\"  # [pointless-string-statement]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0106",
            "name": "expression-not-assigned",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0106",
                "symbol": "expression-not-assigned",
                "msg": "Expression \"%s\" is assigned to nothing",
                "description": "Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "are_equal: bool = str(42) == \"42\"\n",
            "bad_code": "str(42) == \"42\"  # [expression-not-assigned]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0108",
            "name": "unnecessary-lambda",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0108",
                "symbol": "unnecessary-lambda",
                "msg": "Lambda may not be necessary",
                "description": "Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"Hello world !\")\n\ndf.apply(str)\n",
            "bad_code": "function = lambda x: print(x)  # [unnecessary-lambda]\n\nfunction(\"Hello world !\")\n\ndf.apply(lambda x: str(x))  # [unnecessary-lambda]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0109",
            "name": "duplicate-key",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0109",
                "symbol": "duplicate-key",
                "msg": "Duplicate key %r in dictionary",
                "description": "Used when a dictionary expression binds the same key multiple times.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "test_score = {\"Mathematics\": 85, \"Biology\": 90, \"History\": 75}\n",
            "bad_code": "test_score = {\"Mathematics\": 85, \"Biology\": 90, \"Mathematics\": 75}  # [duplicate-key]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Python Dictionaries <https://docs.python.org/3/tutorial/datastructures.html#dictionaries>`_\n- `Mapping Types \u2014 dict <https://docs.python.org/3/library/stdtypes.html#typesmapping>`_\n",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0122",
            "name": "exec-used",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0122",
                "symbol": "exec-used",
                "msg": "Use of exec",
                "description": "Used when you use the \"exec\" statement (function for Python 3), to discourage its usage. That doesn't mean you cannot use it !",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def get_user_code(name):\n    return input(f'Enter code to be executed please, {name}: ')\n\n\nusername = \"Ada\"\nallowed_globals = {'__builtins__' : None}\nallowed_locals = {'print': print}\nexec(get_user_code(username), allowed_globals, allowed_locals)  # pylint: disable=exec-used\n",
            "bad_code": "username = \"Ada\"\ncode_to_execute = f\"\"\"input('Enter code to be executed please, {username}: ')\"\"\"\nprogram = exec(code_to_execute)  # [exec-used]\nexec(program)  # [exec-used]\n",
            "details": "**Additional details:**\n\nThe available methods and variables used in ``exec()`` may introduce a security hole.\nYou can restrict the use of these variables and methods by passing optional globals\nand locals parameters (dictionaries) to the ``exec()`` method.\n\nHowever, use of ``exec`` is still insecure. For example, consider the following call\nthat writes a file to the user's system:\n\n.. code-block:: python\n\n    exec(\"\"\"\\nwith open(\"file.txt\", \"w\", encoding=\"utf-8\") as file:\\n file.write(\"# code as nefarious as imaginable\")\\n\"\"\")\n",
            "related_links": "**Related links:**\n\n- `Be careful with exec and eval in Python <https://lucumr.pocoo.org/2011/2/1/exec-in-python/>`_\n",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0123",
            "name": "eval-used",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0123",
                "symbol": "eval-used",
                "msg": "Use of eval",
                "description": "Used when you use the \"eval\" function, to discourage its usage. Consider using `ast.literal_eval` for safely evaluating strings containing Python expressions from untrusted sources.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from ast import literal_eval\n\nliteral_eval(\"[1, 2, 3]\")\n",
            "bad_code": "eval(\"[1, 2, 3]\")  # [eval-used]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0124",
            "name": "confusing-with-statement",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0124",
                "symbol": "confusing-with-statement",
                "msg": "Following \"as\" with another context manager looks like a tuple.",
                "description": "Emitted when a `with` statement component returns multiple values and uses name binding with `as` only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "with open('file.txt', 'w', encoding=\"utf8\") as fh1:\n    with open('file.txt', 'w', encoding=\"utf8\") as fh2:\n        pass\n",
            "bad_code": "with open('file.txt', 'w') as fh1, fh2:  # [confusing-with-statement]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0125",
            "name": "using-constant-test",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0125",
                "symbol": "using-constant-test",
                "msg": "Using a conditional statement with a constant value",
                "description": "Emitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print('This code is always executed.')\n",
            "bad_code": "if 0:  # [using-constant-test]\n    print('This code is never executed.')\nif 1:  # [using-constant-test]\n    print('This code is always executed.')\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0126",
            "name": "missing-parentheses-for-call-in-test",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0126",
                "symbol": "missing-parentheses-for-call-in-test",
                "msg": "Using a conditional statement with potentially wrong function or method call due to missing parentheses",
                "description": "Emitted when a conditional statement (If or ternary if) seems to wrongly call a function due to missing parentheses",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0127",
            "name": "self-assigning-variable",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0127",
                "symbol": "self-assigning-variable",
                "msg": "Assigning the same variable %r to itself",
                "description": "Emitted when we detect that a variable is assigned to itself",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "year = 2000\n",
            "bad_code": "year = 2000\nyear = year  # [self-assigning-variable]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Python assignment statement <https://docs.python.org/3/reference/simple_stmts.html#assignment-statements>`_\n",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0128",
            "name": "redeclared-assigned-name",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0128",
                "symbol": "redeclared-assigned-name",
                "msg": "Redeclared variable %r in assignment",
                "description": "Emitted when we detect that a variable was redeclared in the same assignment.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "FIRST, SECOND = (1, 2)\n",
            "bad_code": "FIRST, FIRST = (1, 2)  # [redeclared-assigned-name]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0129",
            "name": "assert-on-string-literal",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0129",
                "symbol": "assert-on-string-literal",
                "msg": "Assert statement has a string literal as its first argument. The assert will %s fail.",
                "description": "Used when an assert statement has a string literal as its first argument, which will cause the assert to always pass.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def test_division():\n    a = 9 / 3\n    assert a == 3\n",
            "bad_code": "def test_division():\n    a = 9 / 3\n    assert \"No ZeroDivisionError were raised\"  # [assert-on-string-literal]\n",
            "details": "**Additional details:**\n\nDirectly asserting a string literal will always pass. The solution is to\ntest something that could fail, or not assert at all.\n\nFor ``unittest`` assertions there is the similar :ref:`redundant-unittest-assert` message.\n",
            "related_links": "**Related links:**\n\n- `Tests without assertion <https://stackoverflow.com/a/137418/2519059>`_\n- `Testing that there is no error raised <https://stackoverflow.com/questions/20274987>`_\n- `Parametrizing conditional raising <https://docs.pytest.org/en/latest/example/parametrize.html#parametrizing-conditional-raising>`_\n",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0130",
            "name": "duplicate-value",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0130",
                "symbol": "duplicate-value",
                "msg": "Duplicate value %r in set",
                "description": "This message is emitted when a set contains the same value two or more times.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "correct_set = {'value1', 23, 5}\n",
            "bad_code": "incorrect_set = {'value1', 23, 5, 'value1'} # [duplicate-value]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0150",
            "name": "lost-exception",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0150",
                "symbol": "lost-exception",
                "msg": "%s statement in finally block may swallow exception",
                "description": "Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class FasterThanTheSpeedOfLightError(ZeroDivisionError):\n    def __init__(self):\n        super().__init__(\"You can't go faster than the speed of light !\")\n\n\ndef calculate_speed(distance: float, time: float) -> float:\n    try:\n        return distance / time\n    except ZeroDivisionError as e:\n        raise FasterThanTheSpeedOfLightError() from e\n",
            "bad_code": "class FasterThanTheSpeedOfLightError(ZeroDivisionError):\n    def __init__(self):\n        super().__init__(\"You can't go faster than the speed of light !\")\n\n\ndef calculate_speed(distance: float, time: float) -> float:\n    try:\n        return distance / time\n    except ZeroDivisionError as e:\n        raise FasterThanTheSpeedOfLightError() from e\n    finally:\n        return 299792458  # [lost-exception]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0199",
            "name": "assert-on-tuple",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0199",
                "symbol": "assert-on-tuple",
                "msg": "Assert called on a 2-item-tuple. Did you mean 'assert x,y'?",
                "description": "A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "x, y = (1, None)\nassert x\nassert y\n",
            "bad_code": "assert (1, None)  # [assert-on-tuple]\n",
            "details": "**Additional details:**\n\nDirectly asserting a non-empty tuple will always pass. The solution is to\n test something that could fail, or not assert at all.\n\n For ``unittest`` assertions there is the similar :ref:`redundant-unittest-assert` message.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "W0120",
            "name": "useless-else-on-loop",
            "definition": {
                "checker_name": "basic",
                "msgid": "W0120",
                "symbol": "useless-else-on-loop",
                "msg": "Else clause on loop without a break statement, remove the else and de-indent all the code inside it",
                "description": "Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def find_even_number(numbers):\n    for x in numbers:\n        if x % 2 == 0:\n            return x\n    print(\"Did not find an even number\")\n",
            "bad_code": "def find_even_number(numbers):\n    for x in numbers:\n        if x % 2 == 0:\n            return x\n    else:  # [useless-else-on-loop]\n        print(\"Did not find an even number\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.basic_error_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "broad_try_clause",
            "id": "W0717",
            "name": "too-many-try-statements",
            "definition": {
                "checker_name": "broad_try_clause",
                "msgid": "W0717",
                "symbol": "too-many-try-statements",
                "msg": "%s",
                "description": "Try clause contains too many statements.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "FRUITS = {\"apple\": 1, \"orange\": 10}\n\n\ndef pick_fruit(name):\n    try:\n        count = FRUITS[name]\n    except KeyError:\n        return\n\n    count += 1\n    print(f\"Got fruit count {count}\")\n",
            "bad_code": "FRUITS = {\"apple\": 1, \"orange\": 10}\n\n\ndef pick_fruit(name):\n    try:  # [too-many-try-statements]\n        count = FRUITS[name]\n        count += 1\n        print(f\"Got fruit count {count}\")\n    except KeyError:\n        return\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.broad_try_clause",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0201",
            "name": "attribute-defined-outside-init",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0201",
                "symbol": "attribute-defined-outside-init",
                "msg": "Attribute %r defined outside __init__",
                "description": "Used when an instance attribute is defined outside the __init__ method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Student:\n    def __init__(self):\n        self.is_registered = False\n\n    def register(self):\n        self.is_registered = True\n",
            "bad_code": "class Student:\n    def register(self):\n        self.is_registered = True  # [attribute-defined-outside-init]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0211",
            "name": "bad-staticmethod-argument",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0211",
                "symbol": "bad-staticmethod-argument",
                "msg": "Static method with %r as first argument",
                "description": "Used when a static method has \"self\" or a value specified in valid-classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Wolf:\n    @staticmethod\n    def eat(sheep):\n        pass\n",
            "bad_code": "class Wolf:\n    @staticmethod\n    def eat(self):  # [bad-staticmethod-argument]\n        pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0212",
            "name": "protected-access",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0212",
                "symbol": "protected-access",
                "msg": "Access to a protected member %s of a client class",
                "description": "Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Worm:\n    def __swallow(self):\n        pass\n\n    def eat(self):\n        return self.__swallow()\n\n\njim = Worm()\njim.eat()\n",
            "bad_code": "class Worm:\n    def __swallow(self):\n        pass\n\n\njim = Worm()\njim.__swallow()  # [protected-access]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0221",
            "name": "arguments-differ",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0221",
                "symbol": "arguments-differ",
                "msg": "%s %s %r method",
                "description": "Used when a method has a different number of arguments than in the implemented interface or in an overridden method. Extra arguments with default values are ignored.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Drink:\n    def mix(self, fluid_one, fluid_two):\n        return fluid_one + fluid_two\n\n\nclass Cocktail(Drink):\n    def mix(self, fluid_one, fluid_two, alcoholic_fluid_one=\"Beer\"):\n        return fluid_one + fluid_two + alcoholic_fluid_one\n\n\nclass Car:\n    tank = 0\n\n    def fill_tank(self, gas):\n        self.tank += gas\n\n\nclass Airplane:\n    tank = 0\n    kerosene_tank = 0\n\n    def fill_tank(self, gas, kerosene):\n        self.tank += gas\n        self.kerosene_tank += kerosene\n",
            "bad_code": "class Drink:\n    def mix(self, fluid_one, fluid_two):\n        return fluid_one + fluid_two\n\n\nclass Cocktail(Drink):\n    def mix(self, fluid_one, fluid_two, alcoholic_fluid_one):  # [arguments-differ]\n        return fluid_one + fluid_two + alcoholic_fluid_one\n\n\nclass Car:\n    tank = 0\n\n    def fill_tank(self, gas):\n        self.tank += gas\n\n\nclass Airplane(Car):\n    kerosene_tank = 0\n\n    def fill_tank(self, gas, kerosene):  # [arguments-differ]\n        self.tank += gas\n        self.kerosene_tank += kerosene\n",
            "details": "**Additional details:**\n\n``argument-differ`` denotes an issue with the Liskov Substitution Principle.\nThis means that the code in question violates an important design principle which does not have\none single solution. We recommend to search online for the best solution in your case.\n\nTo give some examples of potential solutions:\n- Add the argument to the parent class\n- Remove the inheritance completely\n- Add default arguments to the child class\n",
            "related_links": "**Related links:**\n\n- `Liskov Substitution Principle <https://en.wikipedia.org/wiki/Liskov_substitution_principle>`_\n",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0222",
            "name": "signature-differs",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0222",
                "symbol": "signature-differs",
                "msg": "Signature differs from %s %r method",
                "description": "Used when a method signature is different than in the implemented interface or in an overridden method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Animal:\n    def run(self, distance=0):\n        print(f\"Ran {distance} km!\")\n\n\nclass Dog(Animal):\n    def run(self, distance=0):\n        super(Animal, self).run(distance)\n        print(\"Fetched that stick, wuff !\")\n",
            "bad_code": "class Animal:\n    def run(self, distance=0):\n        print(f\"Ran {distance} km!\")\n\n\nclass Dog(Animal):\n    def run(self, distance):  # [signature-differs]\n        super(Animal, self).run(distance)\n        print(\"Fetched that stick, wuff !\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0223",
            "name": "abstract-method",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0223",
                "symbol": "abstract-method",
                "msg": "Method %r is abstract in class %r but is not overridden",
                "description": "Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Pet:\n    def make_sound(self):\n        raise NotImplementedError\n\n\nclass Cat(Pet):\n    def make_sound(self):\n        print(\"Meeeow\")\n\n\nimport abc\n\n\nclass WildAnimal:\n    @abc.abstractmethod\n    def make_sound(self):\n        pass\n\n\nclass Panther(WildAnimal):\n    def make_sound(self):\n        print(\"MEEEOW\")\n",
            "bad_code": "class Pet:\n    def make_sound(self):\n        raise NotImplementedError\n\n\nclass Cat(Pet):  # [abstract-method]\n    pass\n\n\nimport abc\n\n\nclass WildAnimal:\n    @abc.abstractmethod\n    def make_sound(self):\n        pass\n\n\nclass Panther(WildAnimal):  # [abstract-method]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0231",
            "name": "super-init-not-called",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0231",
                "symbol": "super-init-not-called",
                "msg": "__init__ method from base class %r is not called",
                "description": "Used when an ancestor class method has an __init__ method which is not called by a derived class.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    def __init__(self, name=\"fruit\"):\n        self.name = name\n        print(\"Creating a {self.name}\")\n\n\nclass Apple(Fruit):\n    def __init__(self):\n        super().__init__(\"apple\")\n",
            "bad_code": "class Fruit:\n    def __init__(self, name=\"fruit\"):\n        self.name = name\n        print(\"Creating a {self.name}\")\n\n\nclass Apple(Fruit):\n    def __init__(self):  # [super-init-not-called]\n        print(\"Creating an apple\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0233",
            "name": "non-parent-init-called",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0233",
                "symbol": "non-parent-init-called",
                "msg": "__init__ method from a non direct base class %r is called",
                "description": "Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Animal:\n    def __init__(self):\n        self.is_multicellular = True\n\n\nclass Vertebrate(Animal):\n    def __init__(self):\n        super().__init__()\n        self.has_vertebrae = True\n\n\nclass Cat(Vertebrate):\n    def __init__(self):\n        super().__init__()\n        self.is_adorable = True\n",
            "bad_code": "class Animal:\n    def __init__(self):\n        self.is_multicellular = True\n\n\nclass Vertebrate(Animal):\n    def __init__(self):\n        super().__init__()\n        self.has_vertebrae = True\n\n\nclass Cat(Vertebrate):\n    def __init__(self):\n        Animal.__init__(self)  # [non-parent-init-called]\n        self.is_adorable = True\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0235",
            "name": "useless-super-delegation",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0235",
                "symbol": "useless-super-delegation",
                "msg": "Useless super delegation in method %r",
                "description": "Used whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0236",
            "name": "invalid-overridden-method",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0236",
                "symbol": "invalid-overridden-method",
                "msg": "Method %r was expected to be %r, found it instead as %r",
                "description": "Used when we detect that a method was overridden in a way that does not match its base class which could result in potential bugs at runtime.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    async def bore(self, insect):\n        insect.eat(self)\n\nclass Apple(Fruit):\n    async def bore(self, insect):\n        insect.eat(self)\n",
            "bad_code": "class Fruit:\n    async def bore(self, insect):\n        insect.eat(self)\n\nclass Apple(Fruit):\n    def bore(self, insect):  # [invalid-overridden-method]\n        insect.eat(self)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0237",
            "name": "arguments-renamed",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0237",
                "symbol": "arguments-renamed",
                "msg": "%s %s %r method",
                "description": "Used when a method parameter has a different name than in the implemented interface or in an overridden method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    def brew(self, ingredient_name: str):\n        print(f\"Brewing a {type(self)} with {ingredient_name}\")\n\nclass Apple(Fruit):\n    ...\n\nclass Orange(Fruit):\n    def brew(self, ingredient_name: str):\n        print(f\"Brewing an orange with {ingredient_name}\")\n\nfor fruit, ingredient_name in [[Orange(), \"thyme\"], [Apple(), \"cinnamon\"]]:\n    fruit.brew(ingredient_name=ingredient_name)\n",
            "bad_code": "class Fruit:\n    def brew(self, ingredient_name: str):\n        print(f\"Brewing a {type(self)} with {ingredient_name}\")\n\nclass Apple(Fruit):\n    ...\n\nclass Orange(Fruit):\n    def brew(self, flavor: str):  # [arguments-renamed]\n        print(f\"Brewing an orange with {flavor}\")\n\nfor fruit, ingredient_name in [[Orange(), \"thyme\"], [Apple(), \"cinnamon\"]]:\n    fruit.brew(ingredient_name=ingredient_name)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0238",
            "name": "unused-private-member",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0238",
                "symbol": "unused-private-member",
                "msg": "Unused private member `%s.%s`",
                "description": "Emitted when a private member of a class is defined but not used.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    FRUITS = {\"apple\": \"red\", \"orange\": \"orange\"}\n\n    def __print_color(self, name, color):\n        print(f\"{name}: {color}\")\n\n    def print(self):\n        for fruit, color in self.FRUITS.items():\n            self.__print_color(fruit, color)\n",
            "bad_code": "class Fruit:\n    FRUITS = {\"apple\": \"red\", \"orange\": \"orange\"}\n\n    def __print_color(self):  # [unused-private-member]\n        pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0239",
            "name": "overridden-final-method",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0239",
                "symbol": "overridden-final-method",
                "msg": "Method %r overrides a method decorated with typing.final which is defined in class %r",
                "description": "Used when a method decorated with typing.final has been overridden.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from typing import final\n\n\nclass Animal:\n    @final\n    def can_breathe(self):\n        return True\n\n\nclass Cat(Animal):\n    def can_purr(self):\n        return True\n",
            "bad_code": "from typing import final\n\n\nclass Animal:\n    @final\n    def can_breathe(self):\n        return True\n\n\nclass Cat(Animal):\n    def can_breathe(self):  # [overridden-final-method]\n        pass\n",
            "details": "**Additional details:**\n\nThe message can't be emitted when using Python < 3.8.\n",
            "related_links": "**Related links:**\n\n- `PEP 591 <https://peps.python.org/pep-0591/>`_\n",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0240",
            "name": "subclassed-final-class",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0240",
                "symbol": "subclassed-final-class",
                "msg": "Class %r is a subclass of a class decorated with typing.final: %r",
                "description": "Used when a class decorated with typing.final has been subclassed.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from typing import final\n\n\n@final\nclass PlatypusData:\n    \"\"\"General Platypus data.\"\"\"\n\n    average_length = 46\n    average_body_temperature = 32\n\n\ndef print_average_length_platypus():\n    output = f\"The average length of a platypus is: {PlatypusData.average_length}cm\"\n    print(output)\n",
            "bad_code": "from typing import final\n\n\n@final\nclass PlatypusData:\n    \"\"\"General Platypus data.\"\"\"\n\n    average_length = 46\n    average_body_temperature = 32\n\n\nclass FluorescentPlaytipus(PlatypusData):  # [subclassed-final-class]\n    \"\"\"Playtipus with fluorescent fur.\"\"\"\n",
            "details": "**Additional details:**\n\nThis message is emitted when a class which is decorated with `final` is subclassed; the decorator indicates that the class is not intended to be extended.\n\nNote this message can't be emitted when using Python < 3.8.\n",
            "related_links": "**Related links:**\n\n- `PEP 591 <https://peps.python.org/pep-0591/#the-final-decorator>`_\n",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0244",
            "name": "redefined-slots-in-subclass",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0244",
                "symbol": "redefined-slots-in-subclass",
                "msg": "Redefined slots %r in subclass",
                "description": "Used when a slot is re-defined in a subclass.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Base:\n    __slots__ = (\"a\", \"b\")\n\n\nclass Subclass(Base):\n    __slots__ = (\"d\",)\n",
            "bad_code": "class Base:\n    __slots__ = (\"a\", \"b\")\n\n\nclass Subclass(Base):\n    __slots__ = (\"a\", \"d\")  # [redefined-slots-in-subclass]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "W0245",
            "name": "super-without-brackets",
            "definition": {
                "checker_name": "classes",
                "msgid": "W0245",
                "symbol": "super-without-brackets",
                "msg": "Super call without brackets",
                "description": "Used when a call to super does not have brackets and thus is not an actual call and does not work as expected.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Soup:\n    @staticmethod\n    def temp():\n        print(\"Soup is hot!\")\n\n\nclass TomatoSoup(Soup):\n    @staticmethod\n    def temp():\n        super().temp()\n        print(\"But tomato soup is even hotter!\")\n",
            "bad_code": "class Soup:\n    @staticmethod\n    def temp():\n        print(\"Soup is hot!\")\n\n\nclass TomatoSoup(Soup):\n    @staticmethod\n    def temp():\n        super.temp()  # [super-without-brackets]\n        print(\"But tomato soup is even hotter!\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "consider_ternary_expression",
            "id": "W0160",
            "name": "consider-ternary-expression",
            "definition": {
                "checker_name": "consider_ternary_expression",
                "msgid": "W0160",
                "symbol": "consider-ternary-expression",
                "msg": "Consider rewriting as a ternary expression",
                "description": "Multiple assign statements spread across if/else blocks can be rewritten with a single assignment and ternary expression",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "x, y = input(), input()\nmaximum = x if x >= y else y\n",
            "bad_code": "x, y = input(), input()\nif x >= y:  # [consider-ternary-expression]\n    maximum = x\nelse:\n    maximum = y\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.consider_ternary_expression",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "deprecated_builtins",
            "id": "W0141",
            "name": "bad-builtin",
            "definition": {
                "checker_name": "deprecated_builtins",
                "msgid": "W0141",
                "symbol": "bad-builtin",
                "msg": "Used builtin function %s",
                "description": "Used when a disallowed builtin function is used (see the bad-function option). Usual disallowed functions are the ones like map, or filter , where Python offers now some cleaner alternative like list comprehension.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "numbers = [2 * x for x in [1, 2, 3]]\nprint(numbers)\n",
            "bad_code": "numbers = list(map(lambda x: 2 * x, [1, 2, 3]))  # [bad-builtin]\nprint(numbers)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.bad_builtin",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "eq-without-hash",
            "id": "W1641",
            "name": "eq-without-hash",
            "definition": {
                "checker_name": "eq-without-hash",
                "msgid": "W1641",
                "symbol": "eq-without-hash",
                "msg": "Implementing __eq__ without also implementing __hash__",
                "description": "Used when a class implements __eq__ but not __hash__. Objects get None as their default __hash__ implementation if they also implement __eq__.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    def __init__(self) -> None:\n        self.name = \"apple\"\n\n    def __eq__(self, other: object) -> bool:\n        return isinstance(other, Fruit) and other.name == self.name\n\n    def __hash__(self) -> int:\n        return hash(self.name)\n",
            "bad_code": "class Fruit:  # [eq-without-hash]\n    def __init__(self) -> None:\n        self.name = \"apple\"\n\n    def __eq__(self, other: object) -> bool:\n        return isinstance(other, Fruit) and other.name == self.name\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.eq_without_hash",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "W0702",
            "name": "bare-except",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "W0702",
                "symbol": "bare-except",
                "msg": "No exception type(s) specified",
                "description": "Used when an except clause doesn't specify exceptions type to catch.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "try:\n    import platform_specific_module\nexcept ImportError:\n    platform_specific_module = None\n",
            "bad_code": "try:\n    import platform_specific_module\nexcept:  # [bare-except]\n    platform_specific_module = None\n",
            "details": "**Additional details:**\n\nA good rule of thumb is to limit use of bare \u2018except\u2019 clauses to two cases:\n- If the exception handler will be printing out or logging the traceback; at least the user will be aware that an error has occurred.\n- If the code needs to do some cleanup work, but then lets the exception propagate upwards with raise. ``try...finally`` can be a better way to handle this case.\n",
            "related_links": "**Related links:**\n\n- `Programming recommendation in PEP8 <https://peps.python.org/pep-0008/#programming-recommendations>`_\n",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "W0703",
            "name": "broad-except",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "W0703",
                "symbol": "broad-except",
                "msg": "Catching too general exception %s",
                "description": "Used when an except catches a too general exception, possibly burying unrelated errors.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "W0705",
            "name": "duplicate-except",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "W0705",
                "symbol": "duplicate-except",
                "msg": "Catching previously caught exception type %s",
                "description": "Used when an except catches a type that was already caught by a previous handler.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "try:\n    1 / 0\nexcept ZeroDivisionError:\n    pass\n",
            "bad_code": "try:\n    1 / 0\nexcept ZeroDivisionError:\n    pass\nexcept ZeroDivisionError:  # [duplicate-except]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "W0706",
            "name": "try-except-raise",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "W0706",
                "symbol": "try-except-raise",
                "msg": "The except handler raises immediately",
                "description": "Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# The try except might be removed entirely:\n1 / 0\n\n# Or another more detailed exception can be raised:\ntry:\n    1 / 0\nexcept ZeroDivisionError as e:\n    raise ValueError(\"The area of the rectangle cannot be zero\") from e\n",
            "bad_code": "try:\n    1 / 0\nexcept ZeroDivisionError as e:  # [try-except-raise]\n    raise\n",
            "details": "**Additional details:**\n\nThere is a legitimate use case for re-raising immediately. E.g. with the following inheritance tree::\n\n    +-- ArithmeticError\n         +-- FloatingPointError\n         +-- OverflowError\n         +-- ZeroDivisionError\n\nThe following code shows valid case for re-raising exception immediately::\n\n    def execute_calculation(a, b):\n        try:\n            return some_calculation(a, b)\n        except ZeroDivisionError:\n            raise\n        except ArithmeticError:\n            return float('nan')\n\nThe pylint is able to detect this case and does not produce error.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "W0707",
            "name": "raise-missing-from",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "W0707",
                "symbol": "raise-missing-from",
                "msg": "Consider explicitly re-raising using %s'%s from %s'",
                "description": "Python's exception chaining shows the traceback of the current exception, but also of the original exception. When you raise a new exception after another exception was caught it's likely that the second exception is a friendly re-wrapping of the first exception. In such cases `raise from` provides a better link between the two tracebacks in the final error.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "try:\n    1 / 0\nexcept ZeroDivisionError as e:\n    raise ValueError(\"Rectangle Area cannot be zero\") from e\n",
            "bad_code": "try:\n    1 / 0\nexcept ZeroDivisionError as e:\n    raise ValueError(\"Rectangle Area cannot be zero\")  # [raise-missing-from]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `PEP 3134 <https://peps.python.org/pep-3134/>`_\n",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "W0711",
            "name": "binary-op-exception",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "W0711",
                "symbol": "binary-op-exception",
                "msg": "Exception to catch is the result of a binary \"%s\" operation",
                "description": "Used when the exception to catch is of the form \"except A or B:\".  If intending to catch multiple, rewrite as \"except (A, B):\"",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "try:\n    1 / 0\nexcept (ZeroDivisionError, ValueError):\n    pass\n",
            "bad_code": "try:\n    1 / 0\nexcept ZeroDivisionError or ValueError:  # [binary-op-exception]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "W0715",
            "name": "raising-format-tuple",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "W0715",
                "symbol": "raising-format-tuple",
                "msg": "Exception arguments suggest string formatting might be intended",
                "description": "Used when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formatting",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "raise RuntimeError(\"This looks wrong %s %s\" % (\"a\", \"b\"))\n",
            "bad_code": "raise RuntimeError(\"This looks wrong %s %s\", (\"a\", \"b\"))  # [raising-format-tuple]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "exceptions",
            "id": "W0716",
            "name": "wrong-exception-operation",
            "definition": {
                "checker_name": "exceptions",
                "msgid": "W0716",
                "symbol": "wrong-exception-operation",
                "msg": "Invalid exception operation. %s",
                "description": "Used when an operation is done against an exception, but the operation is not valid for the exception in question. Usually emitted when having binary operations between exceptions in except handlers.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "try:\n    1/0\nexcept (ValueError, TypeError):\n    pass\n",
            "bad_code": "try:\n    1/0\nexcept (ValueError + TypeError):  # [wrong-exception-operation]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "W0301",
            "name": "unnecessary-semicolon",
            "definition": {
                "checker_name": "format",
                "msgid": "W0301",
                "symbol": "unnecessary-semicolon",
                "msg": "Unnecessary semicolon",
                "description": "Used when a statement is ended by a semi-colon (\";\"), which isn't necessary (that's python, not C ;).",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"Hello World!\")\n",
            "bad_code": "print(\"Hello World!\");  # [unnecessary-semicolon]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "W0311",
            "name": "bad-indentation",
            "definition": {
                "checker_name": "format",
                "msgid": "W0311",
                "symbol": "bad-indentation",
                "msg": "Bad indentation. Found %s %s, expected %s",
                "description": "Used when an unexpected number of indentation's tabulations or spaces has been found.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "if input():\n    print('yes')\n",
            "bad_code": "if input():\n   print('yes')  # [bad-indentation]\n",
            "details": "**Additional details:**\n\nThe option ``--indent-string`` can be used to set the indentation unit for this check.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "W0401",
            "name": "wildcard-import",
            "definition": {
                "checker_name": "imports",
                "msgid": "W0401",
                "symbol": "wildcard-import",
                "msg": "Wildcard import %s",
                "description": "Used when `from module import *` is detected.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# Either import module or\n# only import required objects from module.\nimport abc\nfrom abc import ABC, abstractmethod\n",
            "bad_code": "from abc import *  # [wildcard-import]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "W0402",
            "name": "deprecated-module",
            "definition": {
                "checker_name": "imports",
                "msgid": "W0402",
                "symbol": "deprecated-module",
                "msg": "Deprecated module %r",
                "description": "A module marked as deprecated is imported.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "W0404",
            "name": "reimported",
            "definition": {
                "checker_name": "imports",
                "msgid": "W0404",
                "symbol": "reimported",
                "msg": "Reimport %r (imported line %s)",
                "description": "Used when a module is reimported multiple times.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import re\n",
            "bad_code": "import re\nimport re  # [reimported]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "W0406",
            "name": "import-self",
            "definition": {
                "checker_name": "imports",
                "msgid": "W0406",
                "symbol": "import-self",
                "msg": "Module import itself",
                "description": "Used when a module is importing itself.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def a_function():\n    pass\n",
            "bad_code": "from bad import a_function  # [import-self]\n\n\ndef a_function():\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "W0407",
            "name": "preferred-module",
            "definition": {
                "checker_name": "imports",
                "msgid": "W0407",
                "symbol": "preferred-module",
                "msg": "Prefer importing %r instead of %r",
                "description": "Used when a module imported has a preferred replacement module.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import requests\n",
            "bad_code": "import urllib  # [preferred-module]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "W0410",
            "name": "misplaced-future",
            "definition": {
                "checker_name": "imports",
                "msgid": "W0410",
                "symbol": "misplaced-future",
                "msg": "__future__ import is not the first non docstring statement",
                "description": "Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from __future__ import print_function\n\nimport sys\n",
            "bad_code": "import sys\n\nfrom __future__ import print_function  # [misplaced-future]\n",
            "details": "**Additional details:**\n\nA bare raise statement will re-raise the last active exception in the current scope. If the ``raise`` statement is not in an ``except`` or ``finally`` block, a RuntimeError will be raised instead.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "logging",
            "id": "W1201",
            "name": "logging-not-lazy",
            "definition": {
                "checker_name": "logging",
                "msgid": "W1201",
                "symbol": "logging-not-lazy",
                "msg": "Use %s formatting in logging functions",
                "description": "Used when a logging statement has a call form of \"logging.<logging method>(format_string % (format_args...))\". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring-interpolation is disabled then you can use fstring formatting. If logging-format-interpolation is disabled then you can use str.format.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import logging\n\ntry:\n    function()\nexcept Exception as e:\n    logging.error('Error occurred: %s', e)\n    raise\n",
            "bad_code": "import logging\n\ntry:\n    function()\nexcept Exception as e:\n    logging.error('Error occurred: %s' % e)  # [logging-not-lazy]\n    raise\n",
            "details": "**Additional details:**\n\nAnother reasonable option is to use f-strings. If you want to do that, you need to enable\n``logging-not-lazy`` and disable ``logging-fstring-interpolation``.\n",
            "related_links": "**Related links:**\n\n- `Logging variable data <https://docs.python.org/3/howto/logging.html#logging-variable-data>`_\n- `Rationale <https://stackoverflow.com/questions/34619790>`_\n",
            "checker_module_name": "pylint.checkers.logging",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "logging",
            "id": "W1202",
            "name": "logging-format-interpolation",
            "definition": {
                "checker_name": "logging",
                "msgid": "W1202",
                "symbol": "logging-format-interpolation",
                "msg": "Use %s formatting in logging functions",
                "description": "Used when a logging statement has a call form of \"logging.<logging method>(format_string.format(format_args...))\". Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-fstring-interpolation is disabled then you can use fstring formatting. If logging-not-lazy is disabled then you can use % formatting as normal.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import logging\nimport sys\n\nlogging.error('Python version: %s', sys.version)\n",
            "bad_code": "import logging\nimport sys\n\nlogging.error('Python version: {}'.format(sys.version))  # [logging-format-interpolation]\n",
            "details": "**Additional details:**\n\nAnother reasonable option is to use f-string. If you want to do that, you need to enable\n``logging-format-interpolation`` and disable ``logging-fstring-interpolation``.\n",
            "related_links": "**Related links:**\n\n- `logging variable data <https://docs.python.org/3/howto/logging.html#logging-variable-data>`_\n- `rational <https://stackoverflow.com/questions/34619790>`_\n",
            "checker_module_name": "pylint.checkers.logging",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "logging",
            "id": "W1203",
            "name": "logging-fstring-interpolation",
            "definition": {
                "checker_name": "logging",
                "msgid": "W1203",
                "symbol": "logging-fstring-interpolation",
                "msg": "Use %s formatting in logging functions",
                "description": "Used when a logging statement has a call form of \"logging.<logging method>(f\"...\")\".Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-format-interpolation is disabled then you can use str.format. If logging-not-lazy is disabled then you can use % formatting as normal.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import logging\nimport sys\n\nlogging.error('Python version: %s', sys.version)\n",
            "bad_code": "import logging\nimport sys\n\nlogging.error(f'Python version: {sys.version}')  # [logging-fstring-interpolation]\n",
            "details": "**Additional details:**\n\nThis message permits to allow f-string in logging and still be warned of\n``logging-format-interpolation``.\n",
            "related_links": "**Related links:**\n\n- `logging variable data <https://docs.python.org/3/howto/logging.html#logging-variable-data>`_\n- `rational <https://stackoverflow.com/questions/34619790>`_\n",
            "checker_module_name": "pylint.checkers.logging",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "modified_iteration",
            "id": "W4701",
            "name": "modified-iterating-list",
            "definition": {
                "checker_name": "modified_iteration",
                "msgid": "W4701",
                "symbol": "modified-iterating-list",
                "msg": "Iterated list '%s' is being modified inside for loop body, consider iterating through a copy of it instead.",
                "description": "Emitted when items are added or removed to a list being iterated through. Doing so can result in unexpected behaviour, that is why it is preferred to use a copy of the list.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "fruits = [\"apple\", \"orange\", \"mango\"]\nfor fruit in fruits.copy():\n    fruits.append(\"pineapple\")\n",
            "bad_code": "fruits = [\"apple\", \"orange\", \"mango\"]\nfor fruit in fruits:\n    fruits.append(\"pineapple\")  # [modified-iterating-list]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.modified_iterating_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "overlap-except",
            "id": "W0714",
            "name": "overlapping-except",
            "definition": {
                "checker_name": "overlap-except",
                "msgid": "W0714",
                "symbol": "overlapping-except",
                "msg": "Overlapping exceptions (%s)",
                "description": "Used when exceptions in handler overlap or are identical",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def divide_x_by_y(x: float, y: float):\n    try:\n        print(x / y)\n    except FloatingPointError as e:\n        print(f\"There was a FloatingPointError: {e}\")\n    except ArithmeticError as e:\n        # FloatingPointError  were already caught at this point\n        print(f\"There was an OverflowError or a ZeroDivisionError: {e}\")\n\n# Or:\n\ndef divide_x_by_y(x: float, y: float):\n    try:\n        print(x / y)\n    except ArithmeticError as e:\n        print(f\"There was an OverflowError, a ZeroDivisionError or a FloatingPointError: {e}\")\n",
            "bad_code": "def divide_x_by_y(x: float, y: float):\n    try:\n        print(x / y)\n    except (ArithmeticError, FloatingPointError) as e:  # [overlapping-except]\n        print(f\"There was an issue: {e}\")\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Exception hierarchy <https://docs.python.org/3/library/exceptions.html#exception-hierarchy>`_\n",
            "checker_module_name": "pylint.extensions.overlapping_exceptions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9005",
            "name": "multiple-constructor-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9005",
                "symbol": "multiple-constructor-doc",
                "msg": "\"%s\" has constructor parameters documented in class and __init__",
                "description": "Please remove parameter declarations in the class or constructor.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Point:\n    def __init__(self, x, y):\n        \"\"\"Represents a point in the xy-coordinate plane.\n\n        :param x: x coordinate\n        :param y: y coordinate\n        \"\"\"\n        self.x = x\n        self.y = y\n",
            "bad_code": "class Point:  # [multiple-constructor-doc]\n    \"\"\"Represents a point in the xy-coordinate plane.\n\n    :param x: coordinate\n    :param y: coordinate\n    \"\"\"\n\n    def __init__(self, x, y):\n        \"\"\"Represents a point in the xy-coordinate plane.\n\n        :param x: coordinate\n        :param y: coordinate\n        \"\"\"\n        self.x = x\n        self.y = y\n",
            "details": "**Additional details:**\n\nBoth docstrings are acceptable but not both at the same time.\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9006",
            "name": "missing-raises-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9006",
                "symbol": "missing-raises-doc",
                "msg": "\"%s\" not documented as being raised",
                "description": "Please document exceptions for all raised exception types.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def integer_sum(a: int, b: int):\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    :param b: second integer\n    :raises ValueError: One of the parameters is not an integer.\n    \"\"\"\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError('Function supports only integer parameters.')\n    return a + b\n",
            "bad_code": "def integer_sum(a: int, b: int):  # [missing-raises-doc]\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    :param b: second integer\n    \"\"\"\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError('Function supports only integer parameters.')\n    return a + b\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9008",
            "name": "redundant-returns-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9008",
                "symbol": "redundant-returns-doc",
                "msg": "Redundant returns documentation",
                "description": "Please remove the return/rtype documentation from this method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def print_fruits(fruits):\n    \"\"\"Print list of fruits\n\n    Returns\n    -------\n        str\n    \"\"\"\n    print(fruits)\n    return \",\".join(fruits)\n",
            "bad_code": "def print_fruits(fruits):  # [redundant-returns-doc]\n    \"\"\"Print list of fruits\n\n    Returns\n    -------\n        str\n    \"\"\"\n    print(fruits)\n    return None\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9010",
            "name": "redundant-yields-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9010",
                "symbol": "redundant-yields-doc",
                "msg": "Redundant yields documentation",
                "description": "Please remove the yields documentation from this method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def give_fruits(fruits):\n    \"\"\"Something about fruits\n\n    Yields\n    -------\n        str\n            fruit\n    \"\"\"\n    for fruit in fruits:\n        yield fruit\n",
            "bad_code": "def give_fruits(fruits):  # [redundant-yields-doc]\n    \"\"\"Something about fruits\n\n    Yields\n    -------\n        list\n            fruits\n    \"\"\"\n    return fruits\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9011",
            "name": "missing-return-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9011",
                "symbol": "missing-return-doc",
                "msg": "Missing return documentation",
                "description": "Please add documentation about what this method returns.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W9007",
                        "old-missing-returns-doc"
                    ]
                ]
            },
            "good_code": "def integer_sum(a: int, b: int) -> int:\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    :param b: second integer\n    :return: sum of parameters a and b\n    \"\"\"\n    return a + b\n",
            "bad_code": "def integer_sum(a: int, b: int):  # [missing-return-doc]\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    :param b: second integer\n    \"\"\"\n    return a + b\n",
            "details": "**Additional details:**\n\nThis message is raised only when parameter ``accept-no-return-doc`` is set to ``no``.\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9012",
            "name": "missing-return-type-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9012",
                "symbol": "missing-return-type-doc",
                "msg": "Missing return type documentation",
                "description": "Please document the type returned by this method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def integer_sum(a: int, b: int) -> int:\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    :param b: second integer\n    :return: sum of parameters a and b\n    \"\"\"\n    return a + b\n",
            "bad_code": "def integer_sum(a: int, b: int):  # [missing-return-type-doc]\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    :param b: second integer\n    :return: sum of parameters a and b\n    \"\"\"\n    return a + b\n",
            "details": "**Additional details:**\n\nThis message is raised only when parameter ``accept-no-return-doc`` is set to ``no``.\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9013",
            "name": "missing-yield-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9013",
                "symbol": "missing-yield-doc",
                "msg": "Missing yield documentation",
                "description": "Please add documentation about what this generator yields.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W9009",
                        "old-missing-yields-doc"
                    ]
                ]
            },
            "good_code": "from typing import Iterator\n\n\ndef even_number_under(n: int) -> Iterator[int]:\n    \"\"\"Prints even numbers smaller than n.\n    Args:\n        n: Upper limit of even numbers.\n\n    Yields:\n        even numbers\n    \"\"\"\n    for i in range(n):\n        if i % 2 == 1:\n            continue\n        yield i\n",
            "bad_code": "def even_number_under(n: int):  # [missing-yield-doc]\n    \"\"\"Prints even numbers smaller than n.\n    Args:\n        n: Upper limit of even numbers.\n    \"\"\"\n    for i in range(n):\n        if i % 2 == 1:\n            continue\n        yield i\n",
            "details": "**Additional details:**\n\nThis message is raised only when parameter ``accept-no-yields-doc`` is set to ``no``.\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9014",
            "name": "missing-yield-type-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9014",
                "symbol": "missing-yield-type-doc",
                "msg": "Missing yield type documentation",
                "description": "Please document the type yielded by this method.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from typing import Iterator\n\n\ndef even_number_under(n: int) -> Iterator[int]:\n    \"\"\"Prints even numbers smaller than n.\n    Args:\n        n: Upper limit of even numbers.\n\n    Yields:\n        even numbers\n    \"\"\"\n    for i in range(n):\n        if i % 2 == 1:\n            continue\n        yield i\n",
            "bad_code": "def even_number_under(n: int):  # [missing-yield-type-doc]\n    \"\"\"Prints even numbers smaller than n.\n    Args:\n        n: Upper limit of even numbers.\n\n    Yields:\n        even numbers\n    \"\"\"\n    for i in range(n):\n        if i % 2 == 1:\n            continue\n        yield i\n",
            "details": "**Additional details:**\n\nThis message is raised only when parameter ``accept-no-yields-doc`` is set to ``no``.\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9015",
            "name": "missing-param-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9015",
                "symbol": "missing-param-doc",
                "msg": "\"%s\" missing in parameter documentation",
                "description": "Please add parameter declarations for all parameters.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W9003",
                        "old-missing-param-doc"
                    ]
                ]
            },
            "good_code": "def integer_sum(a: int, b: int):\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    :param b: second integer\n    \"\"\"\n    return a + b\n",
            "bad_code": "def integer_sum(a: int, b):  # [missing-param-doc]\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    \"\"\"\n    return a + b\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9016",
            "name": "missing-type-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9016",
                "symbol": "missing-type-doc",
                "msg": "\"%s\" missing in parameter type documentation",
                "description": "Please add parameter type declarations for all parameters.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W9004",
                        "old-missing-type-doc"
                    ]
                ]
            },
            "good_code": "def integer_sum(a: int, b: int):\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    :param b: second integer\n    \"\"\"\n    return a + b\n",
            "bad_code": "def integer_sum(a: int, b):  # [missing-type-doc]\n    \"\"\"Returns sum of two integers\n    :param a: first integer\n    :param b: second integer\n    \"\"\"\n    return a + b\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9017",
            "name": "differing-param-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9017",
                "symbol": "differing-param-doc",
                "msg": "\"%s\" differing in parameter documentation",
                "description": "Please check parameter names in declarations.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9018",
            "name": "differing-type-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9018",
                "symbol": "differing-type-doc",
                "msg": "\"%s\" differing in parameter type documentation",
                "description": "Please check parameter names in type declarations.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9019",
            "name": "useless-param-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9019",
                "symbol": "useless-param-doc",
                "msg": "\"%s\" useless ignored parameter documentation",
                "description": "Please remove the ignored parameter documentation.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def say_hello(_new: str) -> str:\n    \"\"\"say hello!\n\n    :return: comment\n    \"\"\"\n    return \"hello\"\n",
            "bad_code": "def say_hello(_new: str) -> str:  # [useless-param-doc]\n    \"\"\"say hello!\n\n    :param _new:\n    :return: comment\n    \"\"\"\n    return \"hello\"\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9020",
            "name": "useless-type-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9020",
                "symbol": "useless-type-doc",
                "msg": "\"%s\" useless ignored parameter type documentation",
                "description": "Please remove the ignored parameter type documentation.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def print_fruit(fruit):\n    \"\"\"docstring ...\n\n    Args:\n        fruit (str): A fruit.\n    \"\"\"\n    print(fruit)\n",
            "bad_code": "def print_fruit(fruit, _):  # [useless-type-doc]\n    \"\"\"docstring ...\n\n    Args:\n        fruit (str): A fruit.\n        _ (float): Another argument.\n    \"\"\"\n    print(fruit)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "parameter_documentation",
            "id": "W9021",
            "name": "missing-any-param-doc",
            "definition": {
                "checker_name": "parameter_documentation",
                "msgid": "W9021",
                "symbol": "missing-any-param-doc",
                "msg": "Missing any documentation in \"%s\"",
                "description": "Please add parameter and/or type documentation.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docparams",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "redefined-loop-name",
            "id": "W2901",
            "name": "redefined-loop-name",
            "definition": {
                "checker_name": "redefined-loop-name",
                "msgid": "W2901",
                "symbol": "redefined-loop-name",
                "msg": "Redefining %r from loop (line %s)",
                "description": "Used when a loop variable is overwritten in the loop body.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "for name in names:\n    lowercased_name = name.lower()\n",
            "bad_code": "for name in names:\n    name = name.lower()  # [redefined-loop-name]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.redefined_loop_name",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0601",
            "name": "global-variable-undefined",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0601",
                "symbol": "global-variable-undefined",
                "msg": "Global variable %r undefined at the module level",
                "description": "Used when a variable is defined through the \"global\" statement but the variable is not defined in the module scope.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\n    global TOMATO\n    TOMATO = \"moneymaker\"\n",
            "bad_code": "def update_tomato():\n    global TOMATO  # [global-variable-undefined]\n    TOMATO = \"moneymaker\"\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0602",
            "name": "global-variable-not-assigned",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0602",
                "symbol": "global-variable-not-assigned",
                "msg": "Using global for %r but no assignment is done",
                "description": "Used when a variable is defined through the \"global\" statement but no assignment to this variable is done.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\n    global TOMATO\n    TOMATO = \"moneymaker\"\n",
            "bad_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\n    global TOMATO  # [global-variable-not-assigned]\n    print(TOMATO)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0603",
            "name": "global-statement",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0603",
                "symbol": "global-statement",
                "msg": "Using the global statement",
                "description": "Used when you use the \"global\" statement to update a global variable. Pylint just try to discourage this usage. That doesn't mean you cannot use it !",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "var = 1\n\n\ndef foo():\n    print(var)\n    return 10\n\n\nvar = foo()\nprint(var)\n",
            "bad_code": "var = 1\n\n\ndef foo():\n    global var  # [global-statement]\n    var = 10\n    print(var)\n\n\nfoo()\nprint(var)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0604",
            "name": "global-at-module-level",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0604",
                "symbol": "global-at-module-level",
                "msg": "Using the global statement at the module level",
                "description": "Used when you use the \"global\" statement at the module level since it has no effect",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "price = 25\n",
            "bad_code": "price = 25\nglobal price  # [global-at-module-level]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Official Python FAQ - global and local <https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python>`_\n- `PEP 3104 - Access to Names in Outer Scopes <https://peps.python.org/pep-3104/>`_\n- `Python global statement <https://docs.python.org/3/reference/simple_stmts.html#global>`_\n",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0611",
            "name": "unused-import",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0611",
                "symbol": "unused-import",
                "msg": "Unused %s",
                "description": "Used when an imported module or variable is not used.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from logging import getLogger\n\nLOGGER = getLogger(__name__)\n",
            "bad_code": "from logging import getLogger\nfrom pathlib import Path  # [unused-import]\n\nLOGGER = getLogger(__name__)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0612",
            "name": "unused-variable",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0612",
                "symbol": "unused-variable",
                "msg": "Unused variable %r",
                "description": "Used when a variable is defined but not used.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def print_fruits():\n    fruit1 = \"orange\"\n    fruit2 = \"apple\"\n    print(fruit1, fruit2)\n",
            "bad_code": "def print_fruits():\n    fruit1 = \"orange\"\n    fruit2 = \"apple\"  # [unused-variable]\n    print(fruit1)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0613",
            "name": "unused-argument",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0613",
                "symbol": "unused-argument",
                "msg": "Unused argument %r",
                "description": "Used when a function or method argument is not used.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def print_point(x, y):\n    print(f\"Point is located at {x},{y}\")\n",
            "bad_code": "def print_point(x, y):  # [unused-argument]\n    print(f\"Point is located at {x},{x}\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0614",
            "name": "unused-wildcard-import",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0614",
                "symbol": "unused-wildcard-import",
                "msg": "Unused import(s) %s from wildcard import of %s",
                "description": "Used when an imported module or variable is not used from a `'from X import *'` style import.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from abc import ABC\n\n\nclass Animal(ABC): ...\n",
            "bad_code": "from abc import *  # [unused-wildcard-import]\n\n\nclass Animal(ABC): ...\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0621",
            "name": "redefined-outer-name",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0621",
                "symbol": "redefined-outer-name",
                "msg": "Redefining name %r from outer scope (line %s)",
                "description": "Used when a variable's name hides a name defined in an outer scope or except handler.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "count = 10\n\n\ndef count_it(limit):\n    for i in range(limit):\n        print(i)\n",
            "bad_code": "count = 10\n\n\ndef count_it(count):  # [redefined-outer-name]\n    for i in range(count):\n        print(i)\n",
            "details": "**Additional details:**\n\nA common issue is that this message is triggered when using `pytest` `fixtures <https://docs.pytest.org/en/7.1.x/how-to/fixtures.html>`_:\n\n.. code-block:: python\n\n    import pytest\n\n    @pytest.fixture\n    def setup():\n        ...\n\n\n    def test_something(setup):  # [redefined-outer-name]\n        ...\n\nOne solution to this problem is to explicitly name the fixture:\n\n.. code-block:: python\n\n    @pytest.fixture(name=\"setup\")\n    def setup_fixture():\n        ...\n\nAlternatively `pylint` plugins like `pylint-pytest <https://pypi.org/project/pylint-pytest/>`_ can be used.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0622",
            "name": "redefined-builtin",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0622",
                "symbol": "redefined-builtin",
                "msg": "Redefining built-in %r",
                "description": "Used when a variable or function override a built-in.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def map_iterable():\n    pass\n",
            "bad_code": "def map():  # [redefined-builtin]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0631",
            "name": "undefined-loop-variable",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0631",
                "symbol": "undefined-loop-variable",
                "msg": "Using possibly undefined loop variable %r",
                "description": "Used when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def find_even_number(numbers):\n    for x in numbers:\n        if x % 2:\n            return x\n    return None\n",
            "bad_code": "def find_even_number(numbers):\n    for x in numbers:\n        if x % 2 == 0:\n            break\n    return x  # [undefined-loop-variable]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0632",
            "name": "unbalanced-tuple-unpacking",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0632",
                "symbol": "unbalanced-tuple-unpacking",
                "msg": "Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s)",
                "description": "Used when there is an unbalanced tuple unpacking in assignment",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "E0632",
                        "old-unbalanced-tuple-unpacking"
                    ]
                ]
            },
            "good_code": "fruits = (\"orange\", \"apple\", \"strawberry\", \"peer\")\norange, apple, *remaining_fruits = fruits\n",
            "bad_code": "fruits = (\"orange\", \"apple\", \"strawberry\", \"peer\")\norange, apple, strawberry = fruits  # [unbalanced-tuple-unpacking]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `PEP 3132 - Extended Iterable Unpacking <https://peps.python.org/pep-3132/>`_\n",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0640",
            "name": "cell-var-from-loop",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0640",
                "symbol": "cell-var-from-loop",
                "msg": "Cell variable %s defined in loop",
                "description": "A variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def bar(x):\n    print(x)\n\n\ndef foo(numbers):\n    for i in numbers:\n        bar(i)\n",
            "bad_code": "def foo(numbers):\n    for i in numbers:\n        def bar():\n            print(i)  # [cell-var-from-loop]\n        bar()\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Stackoverflow discussion <https://stackoverflow.com/questions/25314547/cell-var-from-loop-warning-from-pylint>`_\n",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0641",
            "name": "possibly-unused-variable",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0641",
                "symbol": "possibly-unused-variable",
                "msg": "Possibly unused variable %r",
                "description": "Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variable",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def choose_fruits(fruits):\n    current_locals = locals()\n    print(fruits)\n    color = \"red\"\n    print(color)\n    return current_locals\n",
            "bad_code": "def choose_fruits(fruits):\n    print(fruits)\n    color = \"red\"  # [possibly-unused-variable]\n    return locals()\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "variables",
            "id": "W0642",
            "name": "self-cls-assignment",
            "definition": {
                "checker_name": "variables",
                "msgid": "W0642",
                "symbol": "self-cls-assignment",
                "msg": "Invalid assignment to %s in method",
                "description": "Invalid assignment to self or cls in instance or class method respectively.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    @classmethod\n    def list_fruits(cls):\n        fruit = 'apple'\n        print(fruit)\n\n    def print_color(self, *colors):\n        color = colors[1]\n        print(color)\n",
            "bad_code": "class Fruit:\n    @classmethod\n    def list_fruits(cls):\n        cls = 'apple'  # [self-cls-assignment]\n\n    def print_color(self, *colors):\n        self = \"red\"  # [self-cls-assignment]\n        color = colors[1]\n        print(color)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.variables",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1501",
            "name": "bad-open-mode",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1501",
                "symbol": "bad-open-mode",
                "msg": "\"%s\" is not a valid mode for open.",
                "description": "Python supports: r, w, a[, x] modes with b, +, and U (only with r) options. See https://docs.python.org/3/library/functions.html#open",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def foo(file_path):\n    with open(file_path, \"r\") as file:\n        contents = file.read()\n",
            "bad_code": "def foo(file_path):\n    with open(file_path, \"rwx\") as file:  # [bad-open-mode]\n        contents = file.read()\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1502",
            "name": "boolean-datetime",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1502",
                "symbol": "boolean-datetime",
                "msg": "Using datetime.time in a boolean context.",
                "description": "Using datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See https://bugs.python.org/issue13936 for reference.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": [
                    3,
                    5
                ],
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1503",
            "name": "redundant-unittest-assert",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1503",
                "symbol": "redundant-unittest-assert",
                "msg": "Redundant use of %s with constant value %r",
                "description": "The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import unittest\n\n\nclass DummyTestCase(unittest.TestCase):\n    def test_dummy(self):\n        actual = \"test_result\"\n        self.assertEqual(actual, \"expected\")\n",
            "bad_code": "import unittest\n\n\nclass DummyTestCase(unittest.TestCase):\n    def test_dummy(self):\n        self.assertTrue(\"foo\")  # [redundant-unittest-assert]\n",
            "details": "**Additional details:**\n\nDirectly asserting a string literal will always pass. The solution is to\ntest something that could fail, or not assert at all.\n\nFor assertions using ``assert`` there are similar messages: :ref:`assert-on-string-literal` and :ref:`assert-on-tuple`.\n",
            "related_links": "**Related links:**\n\n- `Tests without assertion <https://stackoverflow.com/a/137418/2519059>`_\n- `Testing that there is no error raised <https://stackoverflow.com/questions/20274987>`_\n- `Parametrizing conditional raising <https://docs.pytest.org/en/latest/example/parametrize.html#parametrizing-conditional-raising>`_\n",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1505",
            "name": "deprecated-method",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1505",
                "symbol": "deprecated-method",
                "msg": "Using deprecated method %s()",
                "description": "The method is marked as deprecated and will be removed in the future.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1506",
            "name": "bad-thread-instantiation",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1506",
                "symbol": "bad-thread-instantiation",
                "msg": "threading.Thread needs the target function",
                "description": "The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import threading\n\n\ndef thread_target(n):\n    print(n ** 2)\n\n\nthread = threading.Thread(target=thread_target, args=(10,))\nthread.start()\n",
            "bad_code": "import threading\n\n\ndef thread_target(n):\n    print(n ** 2)\n\n\nthread = threading.Thread(lambda: None)  # [bad-thread-instantiation]\nthread.start()\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1507",
            "name": "shallow-copy-environ",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1507",
                "symbol": "shallow-copy-environ",
                "msg": "Using copy.copy(os.environ). Use os.environ.copy() instead. ",
                "description": "os.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See https://bugs.python.org/issue15373 for reference.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import os\n\ncopied_env = os.environ.copy()\n",
            "bad_code": "import copy\nimport os\n\ncopied_env = copy.copy(os.environ)  # [shallow-copy-environ]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1508",
            "name": "invalid-envvar-default",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1508",
                "symbol": "invalid-envvar-default",
                "msg": "%s default type is %s. Expected str or None.",
                "description": "Env manipulation functions return None or str values. Supplying anything different as a default may cause bugs. See https://docs.python.org/3/library/os.html#os.getenv.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import os\n\nenv = os.getenv('SECRET_KEY', '1')\n",
            "bad_code": "import os\n\nenv = os.getenv('SECRET_KEY', 1)  # [invalid-envvar-default]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1509",
            "name": "subprocess-popen-preexec-fn",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1509",
                "symbol": "subprocess-popen-preexec-fn",
                "msg": "Using preexec_fn keyword which may be unsafe in the presence of threads",
                "description": "The preexec_fn parameter is not safe to use in the presence of threads in your application. The child process could deadlock before exec is called. If you must use it, keep it trivial! Minimize the number of libraries you call into.https://docs.python.org/3/library/subprocess.html#popen-constructor",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1510",
            "name": "subprocess-run-check",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1510",
                "symbol": "subprocess-run-check",
                "msg": "Using subprocess.run without explicitly set `check` is not recommended.",
                "description": "The check parameter should always be used with explicitly set `check` keyword to make clear what the error-handling behavior is.https://docs.python.org/3/library/subprocess.html#subprocess.run",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import subprocess\n\nproc = subprocess.run([\"ls\"], check=False)\n",
            "bad_code": "import subprocess\n\nproc = subprocess.run([\"ls\"])  # [subprocess-run-check]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `subprocess.run documentation <https://docs.python.org/3/library/subprocess.html#subprocess.run>`_\n",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1511",
            "name": "deprecated-argument",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1511",
                "symbol": "deprecated-argument",
                "msg": "Using deprecated argument %s of method %s()",
                "description": "The argument is marked as deprecated and will be removed in the future.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1512",
            "name": "deprecated-class",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1512",
                "symbol": "deprecated-class",
                "msg": "Using deprecated class %s of module %s",
                "description": "The class is marked as deprecated and will be removed in the future.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1513",
            "name": "deprecated-decorator",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1513",
                "symbol": "deprecated-decorator",
                "msg": "Using deprecated decorator %s()",
                "description": "The decorator is marked as deprecated and will be removed in the future.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1514",
            "name": "unspecified-encoding",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1514",
                "symbol": "unspecified-encoding",
                "msg": "Using open without explicitly specifying an encoding",
                "description": "It is better to specify an encoding when opening documents. Using the system default implicitly can create problems on other operating systems. See https://peps.python.org/pep-0597/",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def foo(file_path):\n    with open(file_path, encoding=\"utf-8\") as file:\n        contents = file.read()\n",
            "bad_code": "def foo(file_path):\n    with open(file_path) as file:  # [unspecified-encoding]\n        contents = file.read()\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1515",
            "name": "forgotten-debug-statement",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1515",
                "symbol": "forgotten-debug-statement",
                "msg": "Leaving functions creating breakpoints in production code is not recommended",
                "description": "Calls to breakpoint(), sys.breakpointhook() and pdb.set_trace() should be removed from code that is not actively being debugged.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "stdlib",
            "id": "W1518",
            "name": "method-cache-max-size-none",
            "definition": {
                "checker_name": "stdlib",
                "msgid": "W1518",
                "symbol": "method-cache-max-size-none",
                "msg": "'lru_cache(maxsize=None)' or 'cache' will keep all method args alive indefinitely, including 'self'",
                "description": "By decorating a method with lru_cache or cache the 'self' argument will be linked to the function and therefore never garbage collected. Unless your instance will never need to be garbage collected (singleton) it is recommended to refactor code to avoid this pattern or add a maxsize to the cache.The default value for maxsize is 128.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W1516",
                        "lru-cache-decorating-method"
                    ],
                    [
                        "W1517",
                        "cache-max-size-none"
                    ]
                ]
            },
            "good_code": "import functools\n\n\n@functools.cache\ndef cached_fibonacci(n):\n    if n in {0, 1}:\n        return n\n    return cached_fibonacci(n - 1) + cached_fibonacci(n - 2)\n\n\nclass Fibonnaci:\n    def __init__(self):\n        self.result = []\n\n    def fibonacci(self, n):\n        self.result.append(cached_fibonacci(n))\n",
            "bad_code": "import functools\n\n\nclass Fibonnaci:\n    def __init__(self):\n        self.result = []\n\n    @functools.lru_cache(maxsize=None)  # [method-cache-max-size-none]\n    def fibonacci(self, n):\n        if n in {0, 1}:\n            self.result.append(n)\n        self.result.append(self.fibonacci(n - 1) + self.fibonacci(n - 2))\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.stdlib",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1401",
            "name": "anomalous-backslash-in-string",
            "definition": {
                "checker_name": "string",
                "msgid": "W1401",
                "symbol": "anomalous-backslash-in-string",
                "msg": "Anomalous backslash in string: '%s'. String constant might be missing an r prefix.",
                "description": "Used when a backslash is in a literal string but not as an escape.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "string = r\"\\z\"\nstring = \"\\n\"\n",
            "bad_code": "string = \"\\z\"  # [anomalous-backslash-in-string]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1402",
            "name": "anomalous-unicode-escape-in-string",
            "definition": {
                "checker_name": "string",
                "msgid": "W1402",
                "symbol": "anomalous-unicode-escape-in-string",
                "msg": "Anomalous Unicode escape in byte string: '%s'. String constant might be missing an r or u prefix.",
                "description": "Used when an escape like \\u is encountered in a byte string where it has no effect.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(b\"\\\\u%b\" % b\"0394\")\n",
            "bad_code": "print(b\"\\u%b\" % b\"0394\")  # [anomalous-unicode-escape-in-string]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1404",
            "name": "implicit-str-concat",
            "definition": {
                "checker_name": "string",
                "msgid": "W1404",
                "symbol": "implicit-str-concat",
                "msg": "Implicit string concatenation found in %s",
                "description": "String literals are implicitly concatenated in a literal iterable definition : maybe a comma is missing ?",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W1403",
                        "implicit-str-concat-in-sequence"
                    ]
                ]
            },
            "good_code": "x = [\"a\", \"b\"]\n\nwith open(\"hello.txt\", \"r\") as f:\n    print(f.read())\n",
            "bad_code": "x = [\"a\" \"b\"]  # [implicit-str-concat]\n\nwith open(\"hello.txt\" \"r\") as f:  # [implicit-str-concat]\n    print(f.read())\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1405",
            "name": "inconsistent-quotes",
            "definition": {
                "checker_name": "string",
                "msgid": "W1405",
                "symbol": "inconsistent-quotes",
                "msg": "Quote delimiter %s is inconsistent with the rest of the file",
                "description": "Quote delimiters are not used consistently throughout a module (with allowances made for avoiding unnecessary escaping).",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1406",
            "name": "redundant-u-string-prefix",
            "definition": {
                "checker_name": "string",
                "msgid": "W1406",
                "symbol": "redundant-u-string-prefix",
                "msg": "The u prefix for strings is no longer necessary in Python >=3.0",
                "description": "Used when we detect a string with a u prefix. These prefixes were necessary in Python 2 to indicate a string was Unicode, but since Python 3.0 strings are Unicode by default.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def print_fruit():\n    print(\"Apple\")\n",
            "bad_code": "def print_fruit():\n    print(u\"Apple\")  # [redundant-u-string-prefix]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1300",
            "name": "bad-format-string-key",
            "definition": {
                "checker_name": "string",
                "msgid": "W1300",
                "symbol": "bad-format-string-key",
                "msg": "Format string dictionary key should be a string, not %s",
                "description": "Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"%(one)d, %(two)d\" % {\"one\": 1, \"two\": 2})\n",
            "bad_code": "print(\"%(one)d\" % {\"one\": 1, 2: 2})  # [bad-format-string-key]\n",
            "details": "**Additional details:**\n\nThis check only works for old-style string formatting using the '%' operator.\n\nThis check only works if the dictionary with the values to be formatted is defined inline.\nPassing a variable will not trigger the check as the other keys in this dictionary may be\nused in other contexts, while an inline defined dictionary is clearly only intended to hold\nthe values that should be formatted.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1301",
            "name": "unused-format-string-key",
            "definition": {
                "checker_name": "string",
                "msgid": "W1301",
                "symbol": "unused-format-string-key",
                "msg": "Unused key %r in format string dictionary",
                "description": "Used when a format string that uses named conversion specifiers is used with a dictionary that contains keys not required by the format string.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1302",
            "name": "bad-format-string",
            "definition": {
                "checker_name": "string",
                "msgid": "W1302",
                "symbol": "bad-format-string",
                "msg": "Invalid format string",
                "description": "Used when a PEP 3101 format string is invalid.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print('{a[0]} + {a[1]}'.format(a=[0, 1]))\n",
            "bad_code": "print('{a[0] + a[1]}'.format(a=[0, 1])) # [bad-format-string]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Format String Syntax <https://docs.python.org/3/library/string.html#formatstrings>`_\n- `PyFormat <https://pyformat.info/>`_\n",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1303",
            "name": "missing-format-argument-key",
            "definition": {
                "checker_name": "string",
                "msgid": "W1303",
                "symbol": "missing-format-argument-key",
                "msg": "Missing keyword argument %r for format string",
                "description": "Used when a PEP 3101 format string that uses named fields doesn't receive one or more required keywords.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"My name is {first} {last}\".format(first=\"John\", last=\"Wick\"))\n",
            "bad_code": "print(\"My name is {first} {last}\".format(first=\"John\"))  # [missing-format-argument-key]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `PEP 3101 <https://peps.python.org/pep-3101/>`_\n- `Custom String Formmating <https://docs.python.org/3/library/string.html#custom-string-formatting>`_\n",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1304",
            "name": "unused-format-string-argument",
            "definition": {
                "checker_name": "string",
                "msgid": "W1304",
                "symbol": "unused-format-string-argument",
                "msg": "Unused format argument %r",
                "description": "Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"{x} {y} {z}\".format(x=1, y=2, z=3))\n# or\nprint(\"{x} {y}\".format(x=1, y=2))\n",
            "bad_code": "print(\"{x} {y}\".format(x=1, y=2, z=3))  # [unused-format-string-argument]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1305",
            "name": "format-combined-specification",
            "definition": {
                "checker_name": "string",
                "msgid": "W1305",
                "symbol": "format-combined-specification",
                "msg": "Format string contains both automatic field numbering and manual field specification",
                "description": "Used when a PEP 3101 format string contains both automatic field numbering (e.g. '{}') and manual field specification (e.g. '{0}').",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print('{0} {1}'.format('hello', 'world'))\n# or\nprint('{} {}'.format('hello', 'world'))\n",
            "bad_code": "print('{} {1}'.format('hello', 'world'))  # [format-combined-specification]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1306",
            "name": "missing-format-attribute",
            "definition": {
                "checker_name": "string",
                "msgid": "W1306",
                "symbol": "missing-format-attribute",
                "msg": "Missing format attribute %r in format specifier %r",
                "description": "Used when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn't have that attribute.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"{0.real}\".format(1))\n",
            "bad_code": "print(\"{0.real}\".format(\"1\"))  # [missing-format-attribute]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1307",
            "name": "invalid-format-index",
            "definition": {
                "checker_name": "string",
                "msgid": "W1307",
                "symbol": "invalid-format-index",
                "msg": "Using invalid lookup key %r in format specifier %r",
                "description": "Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn't contain or doesn't have that key as an attribute.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "enough_fruits = [\"apple\", \"banana\"]\nprint('The second fruit is a {fruits[1]}'.format(fruits=enough_fruits))\n",
            "bad_code": "not_enough_fruits = [\"apple\"]\nprint('The second fruit is a {fruits[1]}'.format(fruits=not_enough_fruits))  # [invalid-format-index]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1308",
            "name": "duplicate-string-formatting-argument",
            "definition": {
                "checker_name": "string",
                "msgid": "W1308",
                "symbol": "duplicate-string-formatting-argument",
                "msg": "Duplicate string formatting argument %r, consider passing as named argument",
                "description": "Used when we detect that a string formatting is repeating an argument instead of using named string arguments",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1309",
            "name": "f-string-without-interpolation",
            "definition": {
                "checker_name": "string",
                "msgid": "W1309",
                "symbol": "f-string-without-interpolation",
                "msg": "Using an f-string that does not have any interpolated variables",
                "description": "Used when we detect an f-string that does not use any interpolation variables, in which case it can be either a normal string or a bug in the code.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "x = 1\ny = 2\nprint(f\"{x} + {y} = {x + y}\")\n",
            "bad_code": "x = 1\ny = 2\nprint(f\"x + y = x + y\")  # [f-string-without-interpolation]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "string",
            "id": "W1310",
            "name": "format-string-without-interpolation",
            "definition": {
                "checker_name": "string",
                "msgid": "W1310",
                "symbol": "format-string-without-interpolation",
                "msg": "Using formatting for a string that does not have any interpolated variables",
                "description": "Used when we detect a string that does not have any interpolation variables, in which case it can be either a normal string without formatting or a bug in the code.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"number: {}\".format(1))\n",
            "bad_code": "print(\"number\".format(1))  # [format-string-without-interpolation]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.strings",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "W1113",
            "name": "keyword-arg-before-vararg",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "W1113",
                "symbol": "keyword-arg-before-vararg",
                "msg": "Keyword argument before variable positional arguments list in the definition of %s function",
                "description": "When defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def func(*args, x=None):\n    return [*args, x]\n",
            "bad_code": "def func(x=None, *args):  # [keyword-arg-before-vararg]\n    return [x, *args]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "W1114",
            "name": "arguments-out-of-order",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "W1114",
                "symbol": "arguments-out-of-order",
                "msg": "Positional arguments appear to be out of order",
                "description": "Emitted  when the caller's argument names fully match the parameter names in the function signature but do not have the same order.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def function_3_args(first_argument, second_argument, third_argument):\n    \"\"\"Three arguments function\"\"\"\n    return first_argument, second_argument, third_argument\n\n\ndef args_out_of_order():\n    first_argument = 1\n    second_argument = 2\n    third_argument = 3\n\n    function_3_args(first_argument, second_argument, third_argument)\n",
            "bad_code": "def function_3_args(first_argument, second_argument, third_argument):\n    \"\"\"Three arguments function\"\"\"\n    return first_argument, second_argument, third_argument\n\n\ndef args_out_of_order():\n    first_argument = 1\n    second_argument = 2\n    third_argument = 3\n\n    function_3_args(  # [arguments-out-of-order]\n        first_argument, third_argument, second_argument\n    )\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "W1115",
            "name": "non-str-assignment-to-dunder-name",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "W1115",
                "symbol": "non-str-assignment-to-dunder-name",
                "msg": "Non-string value assigned to __name__",
                "description": "Emitted when a non-string value is assigned to __name__",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    pass\n\n\nFruit.__name__ = \"FRUIT\"\n",
            "bad_code": "class Fruit:\n    pass\n\n\nFruit.__name__ = 1  # [non-str-assignment-to-dunder-name]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "W1116",
            "name": "isinstance-second-argument-not-valid-type",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "W1116",
                "symbol": "isinstance-second-argument-not-valid-type",
                "msg": "Second argument of isinstance is not a type",
                "description": "Emitted when the second argument of an isinstance call is not a type.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "isinstance(\"apples and oranges\", str)\n",
            "bad_code": "isinstance(\"apples and oranges\", hex)  # [isinstance-second-argument-not-valid-type]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unnecessary_ellipsis",
            "id": "W2301",
            "name": "unnecessary-ellipsis",
            "definition": {
                "checker_name": "unnecessary_ellipsis",
                "msgid": "W2301",
                "symbol": "unnecessary-ellipsis",
                "msg": "Unnecessary ellipsis constant",
                "description": "Used when the ellipsis constant is encountered and can be avoided. A line of code consisting of an ellipsis is unnecessary if there is a docstring on the preceding line or if there is a statement in the same scope.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def my_function():\n    \"\"\"My docstring\"\"\"\n",
            "bad_code": "def my_function():\n    \"\"\"My docstring\"\"\"\n    ...  # [unnecessary-ellipsis]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.ellipsis_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "miscellaneous",
            "id": "W0511",
            "name": "fixme",
            "definition": {
                "checker_name": "miscellaneous",
                "msgid": "W0511",
                "symbol": "fixme",
                "msg": "%s",
                "description": "Used when a warning note as FIXME or XXX is detected.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# I no longer want to fix this\n\n...\n\n# I have fixed the issue\n",
            "bad_code": "# FIXME: Create an issue on the bug tracker for this refactor we might do someday  # [fixme]\n\n...\n\n# TODO: We should also fix this at some point  # [fixme]\n",
            "details": "**Additional details:**\n\nYou can get use regular expressions and the ``notes-rgx`` option to create some constraints for this message.\nSee `the following issue <https://github.com/PyCQA/pylint/issues/2874>`_ for some examples.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.misc",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "nonascii-checker",
            "id": "W2402",
            "name": "non-ascii-file-name",
            "definition": {
                "checker_name": "nonascii-checker",
                "msgid": "W2402",
                "symbol": "non-ascii-file-name",
                "msg": "%s name \"%s\" contains a non-ASCII character. PEP 3131 only allows non-ascii identifiers, not file names.",
                "description": "Some editors don't support non-ASCII file names properly. Even though Python supports UTF-8 files since Python 3.5 this isn't recommended for interoperability. Further reading:\n- https://peps.python.org/pep-0489/#export-hook-name\n- https://peps.python.org/pep-0672/#confusing-features\n- https://bugs.python.org/issue20485",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.non_ascii_names",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "threading",
            "id": "W2101",
            "name": "useless-with-lock",
            "definition": {
                "checker_name": "threading",
                "msgid": "W2101",
                "symbol": "useless-with-lock",
                "msg": "'%s()' directly created in 'with' has no effect",
                "description": "Used when a new lock instance is created by using with statement which has no effect. Instead, an existing instance should be used to acquire lock.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import threading\n\nlock = threading.Lock()\nwith lock:\n    print(\"Make your bed.\")\nwith lock:\n    print(\"Sleep in it.\")\n",
            "bad_code": "import threading\n\nwith threading.Lock():  # [useless-with-lock]\n    print(\"Make your bed.\")\nwith threading.Lock():  # [useless-with-lock]\n    print(\"Sleep in it\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.threading_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typing",
            "id": "W6001",
            "name": "deprecated-typing-alias",
            "definition": {
                "checker_name": "typing",
                "msgid": "W6001",
                "symbol": "deprecated-typing-alias",
                "msg": "'%s' is deprecated, use '%s' instead",
                "description": "Emitted when a deprecated typing alias is used.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.typing",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unsupported_version",
            "id": "W2601",
            "name": "using-f-string-in-unsupported-version",
            "definition": {
                "checker_name": "unsupported_version",
                "msgid": "W2601",
                "symbol": "using-f-string-in-unsupported-version",
                "msg": "F-strings are not supported by all versions included in the py-version setting",
                "description": "Used when the py-version set by the user is lower than 3.6 and pylint encounters a f-string.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unsupported_version",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unsupported_version",
            "id": "W2602",
            "name": "using-final-decorator-in-unsupported-version",
            "definition": {
                "checker_name": "unsupported_version",
                "msgid": "W2602",
                "symbol": "using-final-decorator-in-unsupported-version",
                "msg": "typing.final is not supported by all versions included in the py-version setting",
                "description": "Used when the py-version set by the user is lower than 3.8 and pylint encounters a ``typing.final`` decorator.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Playtypus(Animal):\n    def lay_egg(self):\n        ...\n",
            "bad_code": "from typing import final\n\n\n@final  # [using-final-decorator-in-unsupported-version]\nclass Playtypus(Animal):\n    @final  # [using-final-decorator-in-unsupported-version]\n    def lay_egg(self):\n        ...\n",
            "details": "**Additional details:**\n\nThe message is emitted when the ``final`` decorator is used with a Python version less than 3.8.\nThe ``final`` decorator was introduced in Python version 3.8.\n",
            "related_links": "**Related links:**\n\n- `PEP 591 <https://peps.python.org/pep-0591/#the-final-decorator>`_\n",
            "checker_module_name": "pylint.checkers.unsupported_version",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "while_used",
            "id": "W0149",
            "name": "while-used",
            "definition": {
                "checker_name": "while_used",
                "msgid": "W0149",
                "symbol": "while-used",
                "msg": "Used `while` loop",
                "description": "Unbounded `while` loops can often be rewritten as bounded `for` loops.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import requests\n\n\ndef fetch_data():\n    for i in range(1, 6):\n        print(f'Attempt {i}...')\n        try:\n            return requests.get('https://example.com/data')\n        except requests.exceptions.RequestException:\n            pass\n",
            "bad_code": "import requests\n\n\ndef fetch_data():\n    i = 1\n    while i < 6:  # [while-used]\n        print(f'Attempt {i}...')\n        try:\n            return requests.get('https://example.com/data')\n        except requests.exceptions.RequestException:\n            pass\n        i += 1\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Stackoverflow discussion <https://stackoverflow.com/questions/920645/when-to-use-while-or-for-in-python>`_\n",
            "checker_module_name": "pylint.extensions.while_used",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        }
    ],
    "convention": [
        {
            "checker": "basic",
            "id": "C0121",
            "name": "singleton-comparison",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0121",
                "symbol": "singleton-comparison",
                "msg": "Comparison %s should be %s",
                "description": "Used when an expression is compared to singleton values like True, False or None.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "game_won = True\nif game_won:\n    print(\"Game won !\")\n",
            "bad_code": "game_won = True\nif game_won == True:  # [singleton-comparison]\n    print(\"Game won !\")\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `PEP 285 \u2013 Adding a bool type <https://peps.python.org/pep-0285/>`_\n",
            "checker_module_name": "pylint.checkers.base.comparison_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0123",
            "name": "unidiomatic-typecheck",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0123",
                "symbol": "unidiomatic-typecheck",
                "msg": "Use isinstance() rather than type() for a typecheck.",
                "description": "The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W0154",
                        "old-unidiomatic-typecheck"
                    ]
                ]
            },
            "good_code": "test_score = {\"Biology\": 95, \"History\": 80}\nif isinstance(test_score, dict):\n    pass\n",
            "bad_code": "test_score = {\"Biology\": 95, \"History\": 80}\nif type(test_score) is dict:  # [unidiomatic-typecheck]\n    pass\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Builtin function type() <https://docs.python.org/3/library/functions.html#type>`_\n- `Builtin function isinstance() <https://docs.python.org/3/library/functions.html#isinstance>`_\n",
            "checker_module_name": "pylint.checkers.base.comparison_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0112",
            "name": "empty-docstring",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0112",
                "symbol": "empty-docstring",
                "msg": "Empty %s docstring",
                "description": "Used when a module, function, class or method has an empty docstring (it would be too easy ;).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "W0132",
                        "old-empty-docstring"
                    ]
                ]
            },
            "good_code": "def foo():\n    \"\"\"A dummy description.\"\"\"\n",
            "bad_code": "def foo():  # [empty-docstring]\n    \"\"\"\"\"\"\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.docstring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0114",
            "name": "missing-module-docstring",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0114",
                "symbol": "missing-module-docstring",
                "msg": "Missing module docstring",
                "description": "Used when a module has no docstring.Empty modules do not require a docstring.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "C0111",
                        "missing-docstring"
                    ]
                ]
            },
            "good_code": "\"\"\"Module providingFunction printing python version.\"\"\"\nimport sys\n\n\ndef print_python_version():\n    print(sys.version)\n",
            "bad_code": "import sys  # [missing-module-docstring]\n\n\ndef print_python_version():\n    print(sys.version)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.docstring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0115",
            "name": "missing-class-docstring",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0115",
                "symbol": "missing-class-docstring",
                "msg": "Missing class docstring",
                "description": "Used when a class has no docstring.Even an empty class must have a docstring.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "C0111",
                        "missing-docstring"
                    ]
                ]
            },
            "good_code": "class Person:\n    \"\"\"Class representing a person\"\"\"\n\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n",
            "bad_code": "class Person:  # [missing-class-docstring]\n\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.docstring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0116",
            "name": "missing-function-docstring",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0116",
                "symbol": "missing-function-docstring",
                "msg": "Missing function or method docstring",
                "description": "Used when a function or method has no docstring.Some special methods like __init__ do not require a docstring.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "C0111",
                        "missing-docstring"
                    ]
                ]
            },
            "good_code": "import sys\n\n\ndef print_python_version():\n    \"\"\"Function printing python version.\"\"\"\n    print(sys.version)\n",
            "bad_code": "import sys\n\n\ndef print_python_version():  # [missing-function-docstring]\n    print(sys.version)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.docstring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0103",
            "name": "invalid-name",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0103",
                "symbol": "invalid-name",
                "msg": "%s name \"%s\" doesn't conform to %s",
                "description": "Used when the name doesn't conform to naming rules associated to its type (constant, variable, class...).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Cat:\n\n    def meow(self, number_of_meow):\n        print(\"Meow\" * number_of_meow)\n        return number_of_meow\n\n\nCAT = Cat().meow(42)\n",
            "bad_code": "class cat:  # [invalid-name]\n\n    def Meow(self, NUMBER_OF_MEOW):  # [invalid-name, invalid-name]\n        print(\"Meow\" * NUMBER_OF_MEOW)\n        return NUMBER_OF_MEOW\n\n\nCat = cat().Meow(42)  # [invalid-name]\n",
            "details": "**Additional details:**\n\nPylint recognizes a number of different name types internally. With a few\nexceptions, the type of the name is governed by the location the assignment to a\nname is found in, and not the type of object assigned.\n\n+--------------------+---------------------------------------------------------------------------------------------------+\n| Name Type          | Description                                                                                       |\n+====================+===================================================================================================+\n| ``module``         | Module and package names, same as the file names.                                                 |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``const``          | Module-level constants, any variable defined at module level that is not bound to a class object. |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``class``          | Names in ``class`` statements, as well as names bound to class objects at module level.           |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``function``       | Functions, toplevel or nested in functions or methods.                                            |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``method``         | Methods, functions defined in class bodies. Includes static and class methods.                    |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``attr``           | Attributes created on class instances inside methods.                                             |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``argument``       | Arguments to any function type, including lambdas.                                                |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``variable``       | Local variables in function scopes.                                                               |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``class-attribute``| Attributes defined in class bodies.                                                               |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``class-const``    | Enum constants and class variables annotated with ``ClassVar``                                    |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``inlinevar``      | Loop variables in list comprehensions and generator expressions.                                  |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ``typevar``        | Type variable declared with ``TypeVar``.                                                          |\n+--------------------+---------------------------------------------------------------------------------------------------+\n\nDefault behavior\n~~~~~~~~~~~~~~~~\nBy default, Pylint will enforce PEP8_-suggested names.\n\nPredefined Naming Styles\n~~~~~~~~~~~~~~~~~~~~~~~~\nPylint provides set of predefined naming styles. Those predefined\nnaming styles may be used to adjust Pylint configuration to coding\nstyle used in linted project.\n\nFollowing predefined naming styles are available:\n\n* ``snake_case``\n* ``camelCase``\n* ``PascalCase``\n* ``UPPER_CASE``\n* ``any`` - fake style which does not enforce any limitations\n\nFollowing options are exposed:\n\n.. option:: --module-naming-style=<style>\n\n.. option:: --const-naming-style=<style>\n\n.. option:: --class-naming-style=<style>\n\n.. option:: --function-naming-style=<style>\n\n.. option:: --method-naming-style=<style>\n\n.. option:: --attr-naming-style=<style>\n\n.. option:: --argument-naming-style=<style>\n\n.. option:: --variable-naming-style=<style>\n\n.. option:: --class-attribute-naming-style=<style>\n\n.. option:: --class-const-naming-style=<style>\n\n.. option:: --inlinevar-naming-style=<style>\n\nPredefined Naming Patterns\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPylint provides predefined naming patterns for some names. These patterns are often\nbased on a Naming Style but there is no option to choose one of the styles mentioned above.\nThe pattern can be overwritten with the options discussed below.\n\nThe following type of names are checked with a predefined pattern:\n\n+--------------------+---------------------------------------------------+------------------------------------------------------------+\n| Name type          | Good names                                        | Bad names                                                  |\n+====================+===================================================+============================================================+\n| ``typevar``        | ``T``, ``_CallableT``, ``_T_co``, ``AnyStr``,     | ``DICT_T``, ``CALLABLE_T``, ``ENUM_T``, ``DeviceType``,    |\n|                    | ``DeviceTypeT``, ``IPAddressT``                   | ``_StrType``, ``TAnyStr``                                  |\n+--------------------+---------------------------------------------------+------------------------------------------------------------+\n\nCustom regular expressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf predefined naming styles are too limited, checker behavior may be further\ncustomized. For each name type, a separate regular expression matching valid\nnames of this type can be defined. If any of custom regular expressions are\ndefined, it overrides ``*-naming-style`` option value.\n\nRegular expressions for the names are anchored at the beginning, any anchor for\nthe end must be supplied explicitly. Any name not matching the regular\nexpression will lead to an instance of ``invalid-name``.\n\n\n.. option:: --module-rgx=<regex>\n\n.. option:: --const-rgx=<regex>\n\n.. option:: --class-rgx=<regex>\n\n.. option:: --function-rgx=<regex>\n\n.. option:: --method-rgx=<regex>\n\n.. option:: --attr-rgx=<regex>\n\n.. option:: --argument-rgx=<regex>\n\n.. option:: --variable-rgx=<regex>\n\n.. option:: --class-attribute-rgx=<regex>\n\n.. option:: --class-const-rgx=<regex>\n\n.. option:: --inlinevar-rgx=<regex>\n\n.. option:: --typevar-rgx=<regex>\n\nMultiple naming styles for custom regular expressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLarge code bases that have been worked on for multiple years often exhibit an\nevolution in style as well. In some cases, modules can be in the same package,\nbut still have different naming style based on the stratum they belong to.\nHowever, intra-module consistency should still be required, to make changes\ninside a single file easier. For this case, Pylint supports regular expression\nwith several named capturing group.\n\nRather than emitting name warnings immediately, Pylint will determine the\nprevalent naming style inside each module and enforce it on all names.\n\nConsider the following (simplified) example::\n\n   pylint --function-rgx='(?:(?P<snake>[a-z_]+)|(?P<camel>[a-z]+([A-Z][a-z]*)*))$' sample.py\n\nThe regular expression defines two naming styles, ``snake`` for snake-case\nnames, and ``camel`` for camel-case names.\n\nIn ``sample.py``, the function name on line 1 and 7 will mark the module\nand enforce the match of named group ``snake`` for the remaining names in\nthe module::\n\n   def valid_snake_case(arg):\n      ...\n\n   def InvalidCamelCase(arg):\n      ...\n\n   def more_valid_snake_case(arg):\n    ...\n\nBecause of this, the name on line 4 will trigger an ``invalid-name`` warning,\neven though the name matches the given regex.\n\nMatches named ``exempt`` or ``ignore`` can be used for non-tainting names, to\nprevent built-in or interface-dictated names to trigger certain naming styles.\n\n.. option:: --name-group=<name1:name2:...,...>\n\n   Default value: empty\n\n   Format: comma-separated groups of colon-separated names.\n\n   This option can be used to combine name styles. For example, ``function:method`` enforces that functions and methods use the same style, and a style triggered by either name type carries over to the other. This requires that the regular expression for the combined name types use the same group names.\n\nName Hints\n~~~~~~~~~~\n\n.. option:: --include-naming-hint=y|n\n\n   Default: off\n\n   Include a hint (regular expression used) for the correct name format with every ``invalid-name`` warning.\n\n.. _PEP8: https://peps.python.org/pep-0008\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.name_checker.checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0104",
            "name": "disallowed-name",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0104",
                "symbol": "disallowed-name",
                "msg": "Disallowed name \"%s\"",
                "description": "Used when the name matches bad-names or bad-names-rgxs- (unauthorized names).",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "C0102",
                        "blacklisted-name"
                    ]
                ]
            },
            "good_code": "def print_fruit():\n    print(\"apples\")\n",
            "bad_code": "def foo():  # [disallowed-name]\n    print(\"apples\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.name_checker.checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0105",
            "name": "typevar-name-incorrect-variance",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0105",
                "symbol": "typevar-name-incorrect-variance",
                "msg": "Type variable name does not reflect variance%s",
                "description": "Emitted when a TypeVar name doesn't reflect its type variance. According to PEP8, it is recommended to add suffixes '_co' and '_contra' to the variables used to declare covariant or contravariant behaviour respectively. Invariant (default) variables do not require a suffix. The message is also emitted when invariant variables do have a suffix.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.name_checker.checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0131",
            "name": "typevar-double-variance",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0131",
                "symbol": "typevar-double-variance",
                "msg": "TypeVar cannot be both covariant and contravariant",
                "description": "Emitted when both the \"covariant\" and \"contravariant\" keyword arguments are set to \"True\" in a TypeVar.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from typing import TypeVar\n\nT_co = TypeVar(\"T_co\", covariant=True)\nT_contra = TypeVar(\"T_contra\", contravariant=True)\n",
            "bad_code": "from typing import TypeVar\n\nT = TypeVar(\"T\", covariant=True, contravariant=True)  # [typevar-double-variance]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.name_checker.checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "C0132",
            "name": "typevar-name-mismatch",
            "definition": {
                "checker_name": "basic",
                "msgid": "C0132",
                "symbol": "typevar-name-mismatch",
                "msg": "TypeVar name \"%s\" does not match assigned variable name \"%s\"",
                "description": "Emitted when a TypeVar is assigned to a variable that does not match its name argument.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from typing import TypeVar\n\nT = TypeVar(\"T\")\n",
            "bad_code": "from typing import TypeVar\n\nX = TypeVar(\"T\")  # [typevar-name-mismatch]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.name_checker.checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "C0202",
            "name": "bad-classmethod-argument",
            "definition": {
                "checker_name": "classes",
                "msgid": "C0202",
                "symbol": "bad-classmethod-argument",
                "msg": "Class method %s should have %s as first argument",
                "description": "Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Klass:\n\n    @classmethod\n    def get_instance(cls):\n        return cls()\n",
            "bad_code": "class Klass:\n\n    @classmethod\n    def get_instance(self):  # [bad-classmethod-argument]\n        return self()\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "C0203",
            "name": "bad-mcs-method-argument",
            "definition": {
                "checker_name": "classes",
                "msgid": "C0203",
                "symbol": "bad-mcs-method-argument",
                "msg": "Metaclass method %s should have %s as first argument",
                "description": "Used when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to \"cls\"), recommended to easily differentiate them from regular instance methods.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "C0204",
            "name": "bad-mcs-classmethod-argument",
            "definition": {
                "checker_name": "classes",
                "msgid": "C0204",
                "symbol": "bad-mcs-classmethod-argument",
                "msg": "Metaclass class method %s should have %s as first argument",
                "description": "Used when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to \"mcs\"), recommended to easily differentiate them from regular instance methods.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "C0205",
            "name": "single-string-used-for-slots",
            "definition": {
                "checker_name": "classes",
                "msgid": "C0205",
                "symbol": "single-string-used-for-slots",
                "msg": "Class __slots__ should be a non-string iterable",
                "description": "Used when a class __slots__ is a simple string, rather than an iterable.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    __slots__ = (\"name\",)\n\n    def __init__(self, name):\n        self.name = name\n",
            "bad_code": "class Fruit:  # [single-string-used-for-slots]\n    __slots__ = \"name\"\n\n    def __init__(self, name):\n        self.name = name\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "use-implicit-booleaness-not-comparison-to-string",
            "id": "C1901",
            "name": "use-implicit-booleaness-not-comparison-to-string",
            "definition": {
                "checker_name": "use-implicit-booleaness-not-comparison-to-string",
                "msgid": "C1901",
                "symbol": "use-implicit-booleaness-not-comparison-to-string",
                "msg": "Avoid comparisons to empty string",
                "description": "Used when Pylint detects comparison to an empty string constant.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "x = \"\"\ny = \"hello\"\n\nif not x:\n    print(\"x is an empty string\")\n\nif y:\n    print(\"y is not an empty string\")\n",
            "bad_code": "x = \"\"\ny = \"hello\"\n\nif x == \"\":  # [use-implicit-booleaness-not-comparison-to-string]\n    print(\"x is an empty string\")\n\nif y != \"\":  # [use-implicit-booleaness-not-comparison-to-string]\n    print(\"y is not an empty string\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.emptystring",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "use-implicit-booleaness-not-comparison-to-zero",
            "id": "C2001",
            "name": "use-implicit-booleaness-not-comparison-to-zero",
            "definition": {
                "checker_name": "use-implicit-booleaness-not-comparison-to-zero",
                "msgid": "C2001",
                "symbol": "use-implicit-booleaness-not-comparison-to-zero",
                "msg": "Avoid comparisons to zero",
                "description": "Used when Pylint detects comparison to a 0 constant.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "x = 0\ny = 1\n\nif not x:\n    print(\"x is equal to zero\")\n\nif y:\n    print(\"y is not equal to zero\")\n",
            "bad_code": "x = 0\ny = 1\n\nif x == 0:   # [use-implicit-booleaness-not-comparison-to-zero]\n    print(\"x is equal to zero\")\n\nif y != 0:   # [use-implicit-booleaness-not-comparison-to-zero]\n    print(\"y is not equal to zero\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.comparetozero",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "comparison-placement",
            "id": "C2201",
            "name": "misplaced-comparison-constant",
            "definition": {
                "checker_name": "comparison-placement",
                "msgid": "C2201",
                "symbol": "misplaced-comparison-constant",
                "msg": "Comparison should be %s",
                "description": "Used when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "C0122",
                        "old-misplaced-comparison-constant"
                    ]
                ]
            },
            "good_code": "def compare_apples(apples=20):\n    for i in range(10):\n        if i >= 5:\n            pass\n        if i == 1:\n            pass\n        if len(apples) > 20:\n            pass\n",
            "bad_code": "def compare_apples(apples=20):\n    for i in range(10):\n        if 5 <= i:  # [misplaced-comparison-constant]\n            pass\n        if 1 == i:  # [misplaced-comparison-constant]\n            pass\n        if 20 < len(apples):  # [misplaced-comparison-constant]\n            pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.comparison_placement",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "consider-using-any-or-all",
            "id": "C0501",
            "name": "consider-using-any-or-all",
            "definition": {
                "checker_name": "consider-using-any-or-all",
                "msgid": "C0501",
                "symbol": "consider-using-any-or-all",
                "msg": "`for` loop could be `%s`",
                "description": "A for loop that checks for a condition and return a bool can be replaced with any or all.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "\ndef any_even(items):\n    \"\"\"Return True if the list contains any even numbers\"\"\"\n    return any(item % 2 == 0 for item in items)\n\ndef all_even(items):\n    \"\"\"Return True if the list contains all even numbers\"\"\"\n    return all(item % 2 == 0 for item in items)\n",
            "bad_code": "def any_even(items):\n    \"\"\"Return True if the list contains any even numbers\"\"\"\n    for item in items:  # [consider-using-any-or-all]\n        if item % 2 == 0:\n            return True\n    return False\n\n\ndef all_even(items):\n    \"\"\"Return True if the list contains all even numbers\"\"\"\n    for item in items:  # [consider-using-any-or-all]\n        if not item % 2 == 0:\n            return False\n    return True\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.for_any_all",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "docstyle",
            "id": "C0198",
            "name": "bad-docstring-quotes",
            "definition": {
                "checker_name": "docstyle",
                "msgid": "C0198",
                "symbol": "bad-docstring-quotes",
                "msg": "Bad docstring quotes in %s, expected \"\"\", given %s",
                "description": "Used when a docstring does not have triple double quotes.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def foo():\n    \"\"\"Docstring.\"\"\"\n    return\n",
            "bad_code": "def foo():  # [bad-docstring-quotes]\n    'Docstring.'\n    return\n",
            "details": "**Additional details:**\n\nFrom `PEP 257`:\n    \"For consistency, always use ``\"\"\"triple double quotes\"\"\"`` around docstrings.\"\n",
            "related_links": "**Related links:**\n\n- `PEP 257 \u2013 Docstring Conventions <https://peps.python.org/pep-0257/#specification>`_\n",
            "checker_module_name": "pylint.extensions.docstyle",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "docstyle",
            "id": "C0199",
            "name": "docstring-first-line-empty",
            "definition": {
                "checker_name": "docstyle",
                "msgid": "C0199",
                "symbol": "docstring-first-line-empty",
                "msg": "First line empty in %s docstring",
                "description": "Used when a blank line is found at the beginning of a docstring.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.docstyle",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "C0301",
            "name": "line-too-long",
            "definition": {
                "checker_name": "format",
                "msgid": "C0301",
                "symbol": "line-too-long",
                "msg": "Line too long (%s/%s)",
                "description": "Used when a line is longer than a given number of characters.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "FRUIT = [\n    \"apricot\",\n    \"blackcurrant\",\n    \"cantaloupe\",\n    \"dragon fruit\",\n    \"elderberry\",\n    \"fig\",\n    \"grapefruit\",\n]\n",
            "bad_code": "# +1: [line-too-long]\nFRUIT = [\"apricot\", \"blackcurrant\", \"cantaloupe\", \"dragon fruit\", \"elderberry\", \"fig\", \"grapefruit\", ]\n",
            "details": "**Additional details:**\n\nIf you attempt to disable this message via ``# pylint: disable=line-too-long`` in a module with no code, you may receive a message for ``useless-suppression``. This is a false positive of ``useless-suppression`` we can't easily fix.\n\nSee https://github.com/PyCQA/pylint/issues/3368 for more information.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "C0302",
            "name": "too-many-lines",
            "definition": {
                "checker_name": "format",
                "msgid": "C0302",
                "symbol": "too-many-lines",
                "msg": "Too many lines in module (%s/%s)",
                "description": "Used when a module has too many lines, reducing its readability.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "C0303",
            "name": "trailing-whitespace",
            "definition": {
                "checker_name": "format",
                "msgid": "C0303",
                "symbol": "trailing-whitespace",
                "msg": "Trailing whitespace",
                "description": "Used when there is whitespace between the end of a line and the newline.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"Hello\")\n",
            "bad_code": "print(\"Hello\")  # [trailing-whitespace]   \n#                                       ^^^ trailing whitespaces\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "C0304",
            "name": "missing-final-newline",
            "definition": {
                "checker_name": "format",
                "msgid": "C0304",
                "symbol": "missing-final-newline",
                "msg": "Final newline missing",
                "description": "Used when the last line in a file is missing a newline.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "C0305",
            "name": "trailing-newlines",
            "definition": {
                "checker_name": "format",
                "msgid": "C0305",
                "symbol": "trailing-newlines",
                "msg": "Trailing newlines",
                "description": "Used when there are trailing blank lines in a file.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"apple\")\n",
            "bad_code": "print(\"apple\")\n# The file ends with 2 lines that are empty # +1: [trailing-newlines]\n\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "C0321",
            "name": "multiple-statements",
            "definition": {
                "checker_name": "format",
                "msgid": "C0321",
                "symbol": "multiple-statements",
                "msg": "More than one statement on a single line",
                "description": "Used when more than on statement are found on the same line.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "fruits = [\"apple\", \"orange\", \"mango\"]\n\nif \"apple\" in fruits:\n    pass\nelse:\n    print(\"no apples!\")\n",
            "bad_code": "fruits = [\"apple\", \"orange\", \"mango\"]\n\nif \"apple\" in fruits: pass  # [multiple-statements]\nelse:\n    print(\"no apples!\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "C0325",
            "name": "superfluous-parens",
            "definition": {
                "checker_name": "format",
                "msgid": "C0325",
                "symbol": "superfluous-parens",
                "msg": "Unnecessary parens after %r keyword",
                "description": "Used when a single item in parentheses follows an if, for, or other keyword.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "x = input()\ny = input()\nif x == y:\n    pass\n\ni = 0\nexclude = []\nif i - 0 in exclude:\n    pass\n",
            "bad_code": "x = input()\ny = input()\nif (x == y):  # [superfluous-parens]\n    pass\n\ni = 0\nexclude = []\nif (i - 0) in exclude:  # [superfluous-parens]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "C0327",
            "name": "mixed-line-endings",
            "definition": {
                "checker_name": "format",
                "msgid": "C0327",
                "symbol": "mixed-line-endings",
                "msg": "Mixed line endings LF and CRLF",
                "description": "Used when there are mixed (LF and CRLF) newline signs in a file.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "format",
            "id": "C0328",
            "name": "unexpected-line-ending-format",
            "definition": {
                "checker_name": "format",
                "msgid": "C0328",
                "symbol": "unexpected-line-ending-format",
                "msg": "Unexpected line ending format. There is '%s' while it should be '%s'.",
                "description": "Used when there is different newline than expected.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.format",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "import-private-name",
            "id": "C2701",
            "name": "import-private-name",
            "definition": {
                "checker_name": "import-private-name",
                "msgid": "C2701",
                "symbol": "import-private-name",
                "msg": "Imported private %s (%s)",
                "description": "Used when a private module or object prefixed with _ is imported. PEP8 guidance on Naming Conventions states that public attributes with leading underscores should be considered private.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.private_import",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "C0410",
            "name": "multiple-imports",
            "definition": {
                "checker_name": "imports",
                "msgid": "C0410",
                "symbol": "multiple-imports",
                "msg": "Multiple imports on one line (%s)",
                "description": "Used when import statement importing multiple modules is detected.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import os\nimport sys\n",
            "bad_code": "import os, sys  # [multiple-imports]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "C0411",
            "name": "wrong-import-order",
            "definition": {
                "checker_name": "imports",
                "msgid": "C0411",
                "symbol": "wrong-import-order",
                "msg": "%s should be placed before %s",
                "description": "Used when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports)",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import os\nimport sys\n\nimport pylint\n\nfrom . import utils\n",
            "bad_code": "import os\nfrom . import utils\nimport pylint  # [wrong-import-order]\nimport sys  # [wrong-import-order]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "C0412",
            "name": "ungrouped-imports",
            "definition": {
                "checker_name": "imports",
                "msgid": "C0412",
                "symbol": "ungrouped-imports",
                "msg": "Imports from package %s are not grouped",
                "description": "Used when imports are not grouped by packages",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import logging\nimport logging.config\nimport os\nimport sys\nfrom logging.handlers import FileHandler\n",
            "bad_code": "import logging\nimport os\nimport sys\nimport logging.config  # [ungrouped-imports]\nfrom logging.handlers import WatchedFileHandler\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "C0413",
            "name": "wrong-import-position",
            "definition": {
                "checker_name": "imports",
                "msgid": "C0413",
                "symbol": "wrong-import-position",
                "msg": "Import \"%s\" should be placed at the top of the module",
                "description": "Used when code and imports are mixed",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import os\nimport sys\n\nhome = os.environ['HOME']\nprint(f'Home directory is {home}', file=sys.stderr)\n",
            "bad_code": "import os\n\nhome = os.environ['HOME']\n\nimport sys  # [wrong-import-position]\n\nprint(f'Home directory is {home}', file=sys.stderr)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "C0414",
            "name": "useless-import-alias",
            "definition": {
                "checker_name": "imports",
                "msgid": "C0414",
                "symbol": "useless-import-alias",
                "msg": "Import alias does not rename original package",
                "description": "Used when an import alias is same as original package.e.g using import numpy as numpy instead of import numpy as np",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import pandas as pd\n",
            "bad_code": "import pandas as pandas  # [useless-import-alias]\n",
            "details": "**Additional details:**\n\nKnown issue\n-----------\n\nIf you prefer to use \"from-as\" to explicitly reexport in API (``from fruit import orange as orange``)\ninstead of using ``__all__`` this message will be a false positive.\n\nUse ``--allow-reexport-from-package`` to allow explicit reexports by alias\nin package ``__init__`` files.\n",
            "related_links": "**Related links:**\n\n- :ref:`--allow-reexport-from-package<imports-options>`\n- `PEP 8, Import Guideline <https://peps.python.org/pep-0008/#imports>`_\n- :ref:`Pylint block-disable <block_disables>`\n- `mypy --no-implicit-reexport <https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-no-implicit-reexport>`_\n",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "C0415",
            "name": "import-outside-toplevel",
            "definition": {
                "checker_name": "imports",
                "msgid": "C0415",
                "symbol": "import-outside-toplevel",
                "msg": "Import outside toplevel (%s)",
                "description": "Used when an import statement is used anywhere other than the module toplevel. Move this import to the top of the file.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import sys\n\n\ndef print_python_version():\n    print(sys.version_info)\n",
            "bad_code": "def print_python_version():\n    import sys  # [import-outside-toplevel]\n    print(sys.version_info)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "lambda-expressions",
            "id": "C3001",
            "name": "unnecessary-lambda-assignment",
            "definition": {
                "checker_name": "lambda-expressions",
                "msgid": "C3001",
                "symbol": "unnecessary-lambda-assignment",
                "msg": "Lambda expression assigned to a variable. Define a function using the \"def\" keyword instead.",
                "description": "Used when a lambda expression is assigned to variable rather than defining a standard function with the \"def\" keyword.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def foo(x):\n    return x**2 + 2*x + 1\n",
            "bad_code": "foo = lambda x: x**2 + 2*x + 1  # [unnecessary-lambda-assignment]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.lambda_expressions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "lambda-expressions",
            "id": "C3002",
            "name": "unnecessary-direct-lambda-call",
            "definition": {
                "checker_name": "lambda-expressions",
                "msgid": "C3002",
                "symbol": "unnecessary-direct-lambda-call",
                "msg": "Lambda expression called directly. Execute the expression inline instead.",
                "description": "Used when a lambda expression is directly called rather than executing its contents inline.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "y = a**2 + 2*a + 1\n",
            "bad_code": "y = (lambda x: x**2 + 2*x + 1)(a)  # [unnecessary-direct-lambda-call]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.lambda_expressions",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unicode_checker",
            "id": "C2503",
            "name": "bad-file-encoding",
            "definition": {
                "checker_name": "unicode_checker",
                "msgid": "C2503",
                "symbol": "bad-file-encoding",
                "msg": "PEP8 recommends UTF-8 as encoding for Python files",
                "description": "PEP8 recommends UTF-8 default encoding for Python files. See https://peps.python.org/pep-0008/#source-file-encoding",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.unicode",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "C1802",
            "name": "use-implicit-booleaness-not-len",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "C1802",
                "symbol": "use-implicit-booleaness-not-len",
                "msg": "Do not use `len(SEQUENCE)` without comparison to determine if a sequence is empty",
                "description": "Used when Pylint detects that len(sequence) is being used without explicit comparison inside a condition to determine if a sequence is empty. Instead of coercing the length to a boolean, either rely on the fact that empty sequences are false or compare the length against a scalar.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "C1801",
                        "len-as-condition"
                    ]
                ]
            },
            "good_code": "fruits = [\"orange\", \"apple\"]\n\nif fruits:\n    print(fruits)\n",
            "bad_code": "fruits = [\"orange\", \"apple\"]\n\nif len(fruits):  # [use-implicit-booleaness-not-len]\n    print(fruits)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.implicit_booleaness_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "C1803",
            "name": "use-implicit-booleaness-not-comparison",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "C1803",
                "symbol": "use-implicit-booleaness-not-comparison",
                "msg": "'%s' can be simplified to '%s' as an empty sequence is falsey",
                "description": "Used when Pylint detects that collection literal comparison is being used to check for emptiness; Use implicit booleaness insteadof a collection classes; empty collections are considered as false",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "z = []\n\nif z:\n    print(\"z is not an empty sequence\")\n",
            "bad_code": "z = []\n\nif z != []:  # [use-implicit-booleaness-not-comparison]\n    print(\"z is not an empty sequence\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.implicit_booleaness_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "C0200",
            "name": "consider-using-enumerate",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "C0200",
                "symbol": "consider-using-enumerate",
                "msg": "Consider using enumerate instead of iterating with range and len",
                "description": "Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n\nfor i, season in enumerate(seasons):\n    print(i, season)\n",
            "bad_code": "seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n\nfor i in range(len(seasons)):  # [consider-using-enumerate]\n    print(i, seasons[i])\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.recommendation_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "C0201",
            "name": "consider-iterating-dictionary",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "C0201",
                "symbol": "consider-iterating-dictionary",
                "msg": "Consider iterating the dictionary directly instead of calling .keys()",
                "description": "Emitted when the keys of a dictionary are iterated through the ``.keys()`` method or when ``.keys()`` is used for a membership check. It is enough to iterate through the dictionary itself, ``for key in dictionary``. For membership checks, ``if key in dictionary`` is faster.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "FRUITS = {\"apple\": 1, \"pear\": 5, \"peach\": 10}\n\n\nfor fruit in FRUITS:\n    print(fruit)\n",
            "bad_code": "FRUITS = {\"apple\": 1, \"pear\": 5, \"peach\": 10}\n\n\nfor fruit in FRUITS.keys():  # [consider-iterating-dictionary]\n    print(fruit)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.recommendation_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "C0206",
            "name": "consider-using-dict-items",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "C0206",
                "symbol": "consider-using-dict-items",
                "msg": "Consider iterating with .items()",
                "description": "Emitted when iterating over the keys of a dictionary and accessing the value by index lookup. Both the key and value can be accessed by iterating using the .items() method of the dictionary instead.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "ORCHESTRA = {\n    \"violin\": \"strings\",\n    \"oboe\": \"woodwind\",\n    \"tuba\": \"brass\",\n    \"gong\": \"percussion\",\n}\n\n\nfor instrument, section in ORCHESTRA.items():\n    print(f\"{instrument}: {section}\")\n",
            "bad_code": "ORCHESTRA = {\n    \"violin\": \"strings\",\n    \"oboe\": \"woodwind\",\n    \"tuba\": \"brass\",\n    \"gong\": \"percussion\",\n}\n\n\nfor instrument in ORCHESTRA:  # [consider-using-dict-items]\n    print(f\"{instrument}: {ORCHESTRA[instrument]}\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.recommendation_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "C0207",
            "name": "use-maxsplit-arg",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "C0207",
                "symbol": "use-maxsplit-arg",
                "msg": "Use %s instead",
                "description": "Emitted when accessing only the first or last element of str.split(). The first and last element can be accessed by using str.split(sep, maxsplit=1)[0] or str.rsplit(sep, maxsplit=1)[-1] instead.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "url = \"www.example.com\"\nsuffix = url.rsplit(\".\", maxsplit=1)[-1]\n",
            "bad_code": "url = \"www.example.com\"\nsuffix = url.split(\".\")[-1]  # [use-maxsplit-arg]\n",
            "details": "**Additional details:**\n\nBe aware that the performance improvement from not splitting the string\nso many times will only be realized in cases presenting more instances of\nthe splitting character than the minimal example here.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.recommendation_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "C0208",
            "name": "use-sequence-for-iteration",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "C0208",
                "symbol": "use-sequence-for-iteration",
                "msg": "Use a sequence type when iterating over values",
                "description": "When iterating over values, sequence types (e.g., ``lists``, ``tuples``, ``ranges``) are more efficient than ``sets``.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.recommendation_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "C0209",
            "name": "consider-using-f-string",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "C0209",
                "symbol": "consider-using-f-string",
                "msg": "Formatting a regular string which could be a f-string",
                "description": "Used when we detect a string that is being formatted with format() or % which could potentially be a f-string. The use of f-strings is preferred. Requires Python 3.6 and ``py-version >= 3.6``.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "menu = ('eggs', 'spam', 42.4)\n\nf_string_order = f\"{menu[0]} and {menu[1]}: {menu[2]:0.2f} \u00a4\"\n",
            "bad_code": "from string import Template\n\nmenu = (\"eggs\", \"spam\", 42.4)\n\nold_order = \"%s and %s: %.2f \u00a4\" % menu  # [consider-using-f-string]\nbeginner_order = menu[0] + \" and \" + menu[1] + \": \" + str(menu[2]) + \" \u00a4\"\njoined_order = \" and \".join(menu[:2])\n# +1: [consider-using-f-string]\nformat_order = \"{} and {}: {:0.2f} \u00a4\".format(menu[0], menu[1], menu[2])\n# +1: [consider-using-f-string]\nnamed_format_order = \"{eggs} and {spam}: {price:0.2f} \u00a4\".format(\n    eggs=menu[0], spam=menu[1], price=menu[2]\n)\ntemplate_order = Template(\"$eggs and $spam: $price \u00a4\").substitute(\n    eggs=menu[0], spam=menu[1], price=menu[2]\n)\n",
            "details": "**Additional details:**\n\nFormatted string literals (f-strings) give a concise, consistent syntax\nthat can replace most use cases for the ``%`` formatting operator,\n``str.format()`` and ``string.Template``.\n\nF-strings also perform better than alternatives; see\n`this tweet <https://twitter.com/raymondh/status/1205969258800275456>`_ for\na simple example.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.recommendation_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "C0117",
            "name": "unnecessary-negation",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "C0117",
                "symbol": "unnecessary-negation",
                "msg": "Consider changing \"%s\" to \"%s\"",
                "description": "Used when a boolean expression contains an unneeded negation.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "if input():\n    pass\n",
            "bad_code": "if not not input():  # [unnecessary-negation]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.not_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "nonascii-checker",
            "id": "C2401",
            "name": "non-ascii-name",
            "definition": {
                "checker_name": "nonascii-checker",
                "msgid": "C2401",
                "symbol": "non-ascii-name",
                "msg": "%s name \"%s\" contains a non-ASCII character, consider renaming it.",
                "description": "Used when the name contains at least one non-ASCII unicode character. See https://peps.python.org/pep-0672/#confusing-features for a background why this could be bad. \nIf your programming guideline defines that you are programming in English, then there should be no need for non ASCII characters in Python Names. If not you can simply disable this check.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "C0144",
                        "old-non-ascii-name"
                    ]
                ]
            },
            "good_code": "apple_count = 4444\n",
            "bad_code": "\u00e1pple_count = 4444  # [non-ascii-name]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.non_ascii_names",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "nonascii-checker",
            "id": "C2403",
            "name": "non-ascii-module-import",
            "definition": {
                "checker_name": "nonascii-checker",
                "msgid": "C2403",
                "symbol": "non-ascii-module-import",
                "msg": "%s name \"%s\" contains a non-ASCII character, use an ASCII-only alias for import.",
                "description": "Used when the name contains at least one non-ASCII unicode character. See https://peps.python.org/pep-0672/#confusing-features for a background why this could be bad. \nIf your programming guideline defines that you are programming in English, then there should be no need for non ASCII characters in Python Names. If not you can simply disable this check.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from os.path import join as os_join\n\nfoo = os_join(\"a\", \"b\")\n",
            "bad_code": "from os.path import join as \u0142os  # [non-ascii-module-import]\n\nfoo = \u0142os(\"a\", \"b\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.non_ascii_names",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "spelling",
            "id": "C0401",
            "name": "wrong-spelling-in-comment",
            "definition": {
                "checker_name": "spelling",
                "msgid": "C0401",
                "symbol": "wrong-spelling-in-comment",
                "msg": "Wrong spelling of a word '%s' in a comment:\n%s\n%s\nDid you mean: '%s'?",
                "description": "Used when a word in comment is not spelled correctly.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# There's no mistake in this string\n",
            "bad_code": "# There's a mistkae in this string  # [wrong-spelling-in-comment]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.spelling",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "spelling",
            "id": "C0402",
            "name": "wrong-spelling-in-docstring",
            "definition": {
                "checker_name": "spelling",
                "msgid": "C0402",
                "symbol": "wrong-spelling-in-docstring",
                "msg": "Wrong spelling of a word '%s' in a docstring:\n%s\n%s\nDid you mean: '%s'?",
                "description": "Used when a word in docstring is not spelled correctly.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "\"\"\"There's no mistake in this string\"\"\"\n",
            "bad_code": "\"\"\"There's a mistkae in this string\"\"\"  # [wrong-spelling-in-docstring]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.spelling",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "spelling",
            "id": "C0403",
            "name": "invalid-characters-in-docstring",
            "definition": {
                "checker_name": "spelling",
                "msgid": "C0403",
                "symbol": "invalid-characters-in-docstring",
                "msg": "Invalid characters %r in a docstring",
                "description": "Used when a word in docstring cannot be checked by enchant.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "",
            "bad_code": "",
            "details": "**Additional details:**\n\nThis is a message linked to an internal problem in enchant. There's nothing to change in your code,\nbut maybe in pylint's configuration or the way you installed the 'enchant' system library.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.spelling",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "unnecessary-dunder-call",
            "id": "C2801",
            "name": "unnecessary-dunder-call",
            "definition": {
                "checker_name": "unnecessary-dunder-call",
                "msgid": "C2801",
                "symbol": "unnecessary-dunder-call",
                "msg": "Unnecessarily calls dunder method %s. %s.",
                "description": "Used when a dunder method is manually called instead of using the corresponding function/method/operator.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "three = str(3.0)\ntwelve = \"1\" + \"2\"\n\n\ndef is_bigger_than_two(x):\n    return x > 2\n",
            "bad_code": "three = 3.0.__str__()  # [unnecessary-dunder-call]\ntwelve = \"1\".__add__(\"2\")  # [unnecessary-dunder-call]\n\n\ndef is_bigger_than_two(x):\n    return x.__gt__(2)  # [unnecessary-dunder-call]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.dunder_methods",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        }
    ],
    "refactor": [
        {
            "checker": "main",
            "id": "R0022",
            "name": "useless-option-value",
            "definition": {
                "checker_name": "main",
                "msgid": "R0022",
                "symbol": "useless-option-value",
                "msg": "Useless option value for '%s', %s",
                "description": "Used when a value for an option that is now deleted from pylint is encountered.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "E0012",
                        "bad-option-value"
                    ]
                ]
            },
            "good_code": "\"\"\"'bad-continuation' was removed from pylint in https://github.com/PyCQA/pylint/pull/3571\"\"\"\n",
            "bad_code": "\"\"\"'bad-continuation' was removed from pylint in https://github.com/PyCQA/pylint/pull/3571\"\"\"\n\n# pylint: disable=bad-continuation  # [useless-option-value]\n",
            "details": "**Additional details:**\n\nYou can disable this check if you don't want to cleanup your configuration of old messages.\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "R0123",
            "name": "literal-comparison",
            "definition": {
                "checker_name": "basic",
                "msgid": "R0123",
                "symbol": "literal-comparison",
                "msg": "Comparison to literal",
                "description": "Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def is_an_orange(fruit):\n    return fruit == \"orange\"\n",
            "bad_code": "def is_an_orange(fruit):\n    return fruit is \"orange\"  # [literal-comparison]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Comparison operations in Python <https://docs.python.org/3/library/stdtypes.html#comparisons>`_\n",
            "checker_module_name": "pylint.checkers.base.comparison_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "R0124",
            "name": "comparison-with-itself",
            "definition": {
                "checker_name": "basic",
                "msgid": "R0124",
                "symbol": "comparison-with-itself",
                "msg": "Redundant comparison - %s",
                "description": "Used when something is compared against itself.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def is_an_orange(fruit):\n    an_orange = \"orange\"\n    return an_orange == fruit\n",
            "bad_code": "def is_an_orange(fruit):\n    an_orange = \"orange\"\n    return fruit == fruit  # [comparison-with-itself]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.comparison_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "basic",
            "id": "R0133",
            "name": "comparison-of-constants",
            "definition": {
                "checker_name": "basic",
                "msgid": "R0133",
                "symbol": "comparison-of-constants",
                "msg": "Comparison between constants: '%s %s %s' has a constant value",
                "description": "When two literals are compared with each other the result is a constant. Using the constant directly is both easier to read and more performant. Initializing 'True' and 'False' this way is not required since Python 2.3.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def is_the_answer(meaning_of_life: int) -> bool:\n    return meaning_of_life == 42\n",
            "bad_code": "def is_the_answer() -> bool:\n    return 42 == 42  # [comparison-of-constants]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.base.comparison_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "R0202",
            "name": "no-classmethod-decorator",
            "definition": {
                "checker_name": "classes",
                "msgid": "R0202",
                "symbol": "no-classmethod-decorator",
                "msg": "Consider using a decorator instead of calling classmethod",
                "description": "Used when a class method is defined without using the decorator syntax.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    COLORS = []\n\n    def __init__(self, color):\n        self.color = color\n\n    @classmethod\n    def pick_colors(cls, *args):\n        \"\"\"classmethod to pick fruit colors\"\"\"\n        cls.COLORS = args\n",
            "bad_code": "class Fruit:\n    COLORS = []\n\n    def __init__(self, color):\n        self.color = color\n\n    def pick_colors(cls, *args):\n        \"\"\"classmethod to pick fruit colors\"\"\"\n        cls.COLORS = args\n\n    pick_colors = classmethod(pick_colors)  # [no-classmethod-decorator]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "R0203",
            "name": "no-staticmethod-decorator",
            "definition": {
                "checker_name": "classes",
                "msgid": "R0203",
                "symbol": "no-staticmethod-decorator",
                "msg": "Consider using a decorator instead of calling staticmethod",
                "description": "Used when a static method is defined without using the decorator syntax.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Worm:\n    @staticmethod\n    def bore(self):\n        pass\n",
            "bad_code": "class Worm:\n    def bore(self):\n        pass\n\n    bore = staticmethod(bore)  # [no-staticmethod-decorator]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "R0205",
            "name": "useless-object-inheritance",
            "definition": {
                "checker_name": "classes",
                "msgid": "R0205",
                "symbol": "useless-object-inheritance",
                "msg": "Class %r inherits from object, can be safely removed from bases in python3",
                "description": "Used when a class inherit from object, which under python3 is implicit, hence can be safely removed from bases.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Banana:\n    ...\n",
            "bad_code": "class Banana(object):  # [useless-object-inheritance]\n    ...\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "classes",
            "id": "R0206",
            "name": "property-with-parameters",
            "definition": {
                "checker_name": "classes",
                "msgid": "R0206",
                "symbol": "property-with-parameters",
                "msg": "Cannot have defined parameters for properties",
                "description": "Used when we detect that a property also has parameters, which are useless, given that properties cannot be called with additional arguments.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Worm:\n    @property\n    def bore(self):\n        \"\"\"Property accessed with '.bore'.\"\"\"\n        pass\n\n    def bore_with_depth(depth):\n        \"\"\"Function called with .bore_with_depth(depth).\"\"\"\n        pass\n",
            "bad_code": "class Worm:\n    @property\n    def bore(self, depth):  # [property-with-parameters]\n        pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.classes.class_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "code_style",
            "id": "R6101",
            "name": "consider-using-namedtuple-or-dataclass",
            "definition": {
                "checker_name": "code_style",
                "msgid": "R6101",
                "symbol": "consider-using-namedtuple-or-dataclass",
                "msg": "Consider using namedtuple or dataclass for dictionary values",
                "description": "Emitted when dictionary values can be replaced by namedtuples or dataclass instances.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.code_style",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "code_style",
            "id": "R6102",
            "name": "consider-using-tuple",
            "definition": {
                "checker_name": "code_style",
                "msgid": "R6102",
                "symbol": "consider-using-tuple",
                "msg": "Consider using an in-place tuple instead of list",
                "description": "Only for style consistency! Emitted where an in-place defined ``list`` can be replaced by a ``tuple``. Due to optimizations by CPython, there is no performance benefit from it.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "for i in (1, 2, 3):\n    print(i)\n",
            "bad_code": "for i in [1, 2, 3]:  # [consider-using-tuple]\n    print(i)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.code_style",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "code_style",
            "id": "R6103",
            "name": "consider-using-assignment-expr",
            "definition": {
                "checker_name": "code_style",
                "msgid": "R6103",
                "symbol": "consider-using-assignment-expr",
                "msg": "Use '%s' instead",
                "description": "Emitted when an if assignment is directly followed by an if statement and both can be combined by using an assignment expression ``:=``. Requires Python 3.8 and ``py-version >= 3.8``.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "if apples := 2:\n    print(\"God apples!\")\n",
            "bad_code": "apples = 2\n\nif apples:  # [consider-using-assignment-expr]\n    print(\"God apples!\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.code_style",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "confusing_elif",
            "id": "R5601",
            "name": "confusing-consecutive-elif",
            "definition": {
                "checker_name": "confusing_elif",
                "msgid": "R5601",
                "symbol": "confusing-consecutive-elif",
                "msg": "Consecutive elif with differing indentation level, consider creating a function to separate the inner elif",
                "description": "Used when an elif statement follows right after an indented block which itself ends with if or elif. It may not be ovious if the elif statement was willingly or mistakenly unindented. Extracting the indented if statement into a separate function might avoid confusion and prevent errors.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# Option 1: add explicit 'else'\ndef myfunc(shall_continue: bool, shall_exit: bool):\n    if shall_continue:\n        if input(\"Are you sure?\") == \"y\":\n            print(\"Moving on.\")\n        else:\n            pass\n    elif shall_exit:\n        print(\"Exiting.\")\n\n\n# Option 2: extract function\ndef user_confirmation():\n    if input(\"Are you sure?\") == \"y\":\n        print(\"Moving on.\")\n\n\ndef myfunc2(shall_continue: bool, shall_exit: bool):\n    if shall_continue:\n        user_confirmation()\n    elif shall_exit:\n        print(\"Exiting.\")\n",
            "bad_code": "def myfunc(shall_continue: bool, shall_exit: bool):\n    if shall_continue:\n        if input(\"Are you sure?\") == \"y\":\n            print(\"Moving on.\")\n    elif shall_exit:  # [confusing-consecutive-elif]\n        print(\"Exiting.\")\n",
            "details": "**Additional details:**\n\nCreating a function for the nested conditional, or adding an explicit ``else`` in the indented ``if`` statement, even if it only contains a ``pass`` statement, can help clarify the code.\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.confusing_elif",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "else_if_used",
            "id": "R5501",
            "name": "else-if-used",
            "definition": {
                "checker_name": "else_if_used",
                "msgid": "R5501",
                "symbol": "else-if-used",
                "msg": "Consider using \"elif\" instead of \"else\" then \"if\" to remove one indentation level",
                "description": "Used when an else statement is immediately followed by an if statement and does not contain statements that would be unrelated to it.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "if input():\n    pass\nelif len(input()) >= 10:\n    pass\nelse:\n    pass\n",
            "bad_code": "if input():\n    pass\nelse:\n    if len(input()) >= 10:  # [else-if-used]\n        pass\n    else:\n        pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.check_elif",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "R0401",
            "name": "cyclic-import",
            "definition": {
                "checker_name": "imports",
                "msgid": "R0401",
                "symbol": "cyclic-import",
                "msg": "Cyclic import (%s)",
                "description": "Used when a cyclic import between two or more modules is detected.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "imports",
            "id": "R0402",
            "name": "consider-using-from-import",
            "definition": {
                "checker_name": "imports",
                "msgid": "R0402",
                "symbol": "consider-using-from-import",
                "msg": "Use 'from %s import %s' instead",
                "description": "Emitted when a submodule of a package is imported and aliased with the same name. E.g., instead of ``import concurrent.futures as futures`` use ``from concurrent import futures``",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from os import path\n",
            "bad_code": "import os.path as path  # [consider-using-from-import]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.imports",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "multiple_types",
            "id": "R0204",
            "name": "redefined-variable-type",
            "definition": {
                "checker_name": "multiple_types",
                "msgid": "R0204",
                "symbol": "redefined-variable-type",
                "msg": "Redefinition of %s type from %s to %s",
                "description": "Used when the type of a variable changes inside a method or a function.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "x = 1\nx = 2\n",
            "bad_code": "x = 1\nx = \"2\"  # [redefined-variable-type]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.redefined_variable_type",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "no_self_use",
            "id": "R6301",
            "name": "no-self-use",
            "definition": {
                "checker_name": "no_self_use",
                "msgid": "R6301",
                "symbol": "no-self-use",
                "msg": "Method could be a function",
                "description": "Used when a method doesn't use its bound instance, and so could be written as a function.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "R0201",
                        "old-no-self-use"
                    ]
                ]
            },
            "good_code": "def developer_greeting():\n    print(\"Greetings developer!\")\n\n\nclass Person:\n    name = \"Paris\"\n\n    def greeting_1(self):\n        print(f\"Hello from {self.name} !\")\n\n    @staticmethod\n    def greeting_2():\n        print(\"Hi!\")\n",
            "bad_code": "class Person:\n\n    def developer_greeting(self):  # [no-self-use]\n        print(\"Greetings developer!\")\n\n    def greeting_1(self):  # [no-self-use]\n        print(\"Hello!\")\n\n    def greeting_2(self):  # [no-self-use]\n        print(\"Hi!\")\n",
            "details": "**Additional details:**\n\nIf a function is not using any class attribute it can be a ``@staticmethod``,\nor a function outside the class.\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.no_self_use",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "set_membership",
            "id": "R6201",
            "name": "use-set-for-membership",
            "definition": {
                "checker_name": "set_membership",
                "msgid": "R6201",
                "symbol": "use-set-for-membership",
                "msg": "Consider using set for membership test",
                "description": "Membership tests are more efficient when performed on a lookup optimized datatype like ``sets``.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def fruit_is_dangerous_for_cat(fruit: str) -> bool:\n    \"\"\"This list is only a silly example, don't make decision regarding your cat diet based on it.\"\"\"\n    return fruit in {\"cherry\", \"grapes\"}\n",
            "bad_code": "def fruit_is_dangerous_for_cat(fruit: str) -> bool:\n    \"\"\"This list is only a silly example, don't make decision regarding your cat diet based on it.\"\"\"\n    return fruit in [\"cherry\", \"grapes\"]  # [use-set-for-membership]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.set_membership",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R2044",
            "name": "empty-comment",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R2044",
                "symbol": "empty-comment",
                "msg": "Line with empty comment",
                "description": "Used when a # symbol appears on a line not followed by an actual comment",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# comment\n\nx = 0  # comment\n",
            "bad_code": "# +1:[empty-comment]\n#\n\n# +1:[empty-comment]\nx = 0  #\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.extensions.empty_comment",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1701",
            "name": "consider-merging-isinstance",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1701",
                "symbol": "consider-merging-isinstance",
                "msg": "Consider merging these isinstance calls to isinstance(%s, (%s))",
                "description": "Used when multiple consecutive isinstance calls can be merged into one.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from typing import Any\n\n\ndef is_number(value: Any) -> bool:\n    return isinstance(value, (int, float))\n",
            "bad_code": "from typing import Any\n\n\ndef is_number(value: Any) -> bool:\n    return isinstance(value, int) or isinstance(value, float)  # [consider-merging-isinstance]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1702",
            "name": "too-many-nested-blocks",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1702",
                "symbol": "too-many-nested-blocks",
                "msg": "Too many nested blocks (%s/%s)",
                "description": "Used when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "R0101",
                        "old-too-many-nested-blocks"
                    ]
                ]
            },
            "good_code": "def correct_fruits(fruits):\n    if len(fruits) > 1 and \"apple\" in fruits and \"orange\" in fruits:\n        count = fruits[\"orange\"]\n        if count % 2 and \"kiwi\" in fruits and count == 2:\n            return True\n    return False\n",
            "bad_code": "def correct_fruits(fruits):\n    if len(fruits) > 1:  # [too-many-nested-blocks]\n        if \"apple\" in fruits:\n            if \"orange\" in fruits:\n                count = fruits[\"orange\"]\n                if count % 2:\n                    if \"kiwi\" in fruits:\n                        if count == 2:\n                            return True\n    return False\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1703",
            "name": "simplifiable-if-statement",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1703",
                "symbol": "simplifiable-if-statement",
                "msg": "The if statement can be replaced with %s",
                "description": "Used when an if statement can be replaced with 'bool(test)'.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "R0102",
                        "old-simplifiable-if-statement"
                    ]
                ]
            },
            "good_code": "FLYING_THINGS = [\"bird\", \"plane\", \"superman\", \"this example\"]\n\n\ndef is_flying_animal(an_object):\n    is_flying = isinstance(an_object, Animal) and an_object.name in FLYING_THINGS\n    return is_flying\n",
            "bad_code": "FLYING_THINGS = [\"bird\", \"plane\", \"superman\", \"this example\"]\n\n\ndef is_flying_animal(an_object):\n    if isinstance(an_object, Animal) and an_object in FLYING_THINGS:  # [simplifiable-if-statement]\n        is_flying = True\n    else:\n        is_flying = False\n    return is_flying\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1704",
            "name": "redefined-argument-from-local",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1704",
                "symbol": "redefined-argument-from-local",
                "msg": "Redefining argument with the local name %r",
                "description": "Used when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def show(host_id=10.11):\n    for inner_host_id, host in [[12.13, 'Venus'], [14.15, 'Mars']]:\n        print(host_id, inner_host_id, host)\n",
            "bad_code": "def show(host_id=10.11):\n    for host_id, host in [[12.13, 'Venus'], [14.15, 'Mars']]:  # [redefined-argument-from-local]\n        print(host_id, host)\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1705",
            "name": "no-else-return",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1705",
                "symbol": "no-else-return",
                "msg": "Unnecessary \"%s\" after \"return\", %s",
                "description": "Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def compare_numbers(a: int, b: int) -> int:\n    if a == b:\n        return 0\n    if a < b:\n        return -1\n    return 1\n",
            "bad_code": "def compare_numbers(a: int, b: int) -> int:\n    if a == b:  # [no-else-return]\n        return 0\n    elif a < b:\n        return -1\n    else:\n        return 1\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1706",
            "name": "consider-using-ternary",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1706",
                "symbol": "consider-using-ternary",
                "msg": "Consider using ternary (%s)",
                "description": "Used when one of known pre-python 2.5 ternary syntax is used.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "x, y = 1, 2\nmaximum = x if x >= y else y\n",
            "bad_code": "x, y = 1, 2\nmaximum = x >= y and x or y  # [consider-using-ternary]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1707",
            "name": "trailing-comma-tuple",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1707",
                "symbol": "trailing-comma-tuple",
                "msg": "Disallow trailing comma tuple",
                "description": "In Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "COMPASS = (\"north\", \"south\", \"east\", \"west\")\n",
            "bad_code": "COMPASS = \"north\", \"south\", \"east\", \"west\",  # [trailing-comma-tuple]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1708",
            "name": "stop-iteration-return",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1708",
                "symbol": "stop-iteration-return",
                "msg": "Do not raise StopIteration in generator, use return statement instead",
                "description": "According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statement",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def fruit_generator():\n    \"\"\"The example is simple enough you don't need an explicit return.\"\"\"\n    for fruit in [\"apple\", \"banana\"]:\n        yield fruit\n\n\ndef two_fruits_generator(fruits):\n    \"\"\"Catching the StopIteration.\"\"\"\n    for fruit in fruits:\n        try:\n            yield fruit, next(fruits)\n        except StopIteration:\n            print(\"Sorry there is only one fruit left.\")\n            yield fruit, None\n\n\ndef two_good_fruits_generator(fruits):\n    \"\"\"A return can be used to end the iterator early, but not a StopIteration.\"\"\"\n    for fruit in fruits:\n        if not fruit.is_tasty():\n            continue\n        while True:\n            next_fruit = next(fruits, None)\n            if next_fruit is None:\n                print(\"Sorry there is only one fruit left.\")\n                yield fruit, None\n                # We reached the end of the 'fruits' generator but raising a\n                # StopIteration instead of returning would create a RuntimeError\n                return\n            if next_fruit.is_tasty():\n                yield fruit, next_fruit\n                break\n",
            "bad_code": "def fruit_generator():\n    for fruit in [\"apple\", \"banana\"]:\n        yield fruit\n    raise StopIteration  # [stop-iteration-return]\n\n\ndef two_fruits_generator(fruits):\n    for fruit in fruits:\n        yield fruit, next(fruits)  # [stop-iteration-return]\n\n\ndef two_good_fruits_generator(fruits):\n    for fruit in fruits:\n        if not fruit.is_tasty():\n            continue\n        while True:\n            next_fruit = next(fruits)  # [stop-iteration-return]\n            if next_fruit.is_tasty():\n                yield fruit, next_fruit\n                break\n",
            "details": "**Additional details:**\n\nIt's possible to give a default value to ``next`` or catch the ``StopIteration``,\nor return directly. A ``StopIteration`` cannot be propagated from a generator.\n",
            "related_links": "**Related links:**\n\n- `PEP 479 <https://peps.python.org/pep-0479/>`_\n",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1709",
            "name": "simplify-boolean-expression",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1709",
                "symbol": "simplify-boolean-expression",
                "msg": "Boolean expression may be simplified to %s",
                "description": "Emitted when redundant pre-python 2.5 ternary syntax is used.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def has_oranges(oranges, apples=None) -> bool:\n    return oranges\n",
            "bad_code": "def has_oranges(oranges, apples=None) -> bool:\n    return apples and False or oranges  # [simplify-boolean-expression]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1710",
            "name": "inconsistent-return-statements",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1710",
                "symbol": "inconsistent-return-statements",
                "msg": "Either all return statements in a function should return an expression, or none of them should.",
                "description": "According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable)",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def get_the_answer(value: str) -> str | None:\n    if value:\n        return value\n    return None\n",
            "bad_code": "def get_the_answer(value: str) -> str | None:  # [inconsistent-return-statements]\n    if value:\n        return value\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1711",
            "name": "useless-return",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1711",
                "symbol": "useless-return",
                "msg": "Useless return at end of function or method",
                "description": "Emitted when a single \"return\" or \"return None\" statement is found at the end of function or method definition. This statement can safely be removed because Python will implicitly return None",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import sys\n\n\ndef print_python_version():\n    print(sys.version)\n",
            "bad_code": "import sys\n\n\ndef print_python_version():  # [useless-return]\n    print(sys.version)\n    return None\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1712",
            "name": "consider-swap-variables",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1712",
                "symbol": "consider-swap-variables",
                "msg": "Consider using tuple unpacking for swapping variables",
                "description": "You do not have to use a temporary variable in order to swap variables. Using \"tuple unpacking\" to directly swap variables makes the intention more clear.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "a = 1\nb = 2\n\na, b = b, a\n",
            "bad_code": "a = 1\nb = 2\n\ntemp = a  # [consider-swap-variables]\na = b\nb = temp\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1713",
            "name": "consider-using-join",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1713",
                "symbol": "consider-using-join",
                "msg": "Consider using str.join(sequence) for concatenating strings from an iterable",
                "description": "Using str.join(sequence) is faster, uses less memory and increases readability compared to for-loop iteration.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(\"\".join([\"apple\", \"pear\", \"peach\"]))\n",
            "bad_code": "def fruits_to_string(fruits):\n    formatted_fruit = \"\"\n    for fruit in fruits:\n        formatted_fruit += fruit  # [consider-using-join]\n    return formatted_fruit\n\nprint(fruits_to_string([\"apple\", \"pear\", \"peach\"]))\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1714",
            "name": "consider-using-in",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1714",
                "symbol": "consider-using-in",
                "msg": "Consider merging these comparisons with \"in\" to %r",
                "description": "To check if a variable is equal to one of many values,combine the values into a tuple and check if the variable is contained \"in\" it instead of checking for equality against each of the values.This is faster and less verbose.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def fruit_is_round(fruit):\n    return fruit in {\"apple\", \"orange\", \"melon\"}\n",
            "bad_code": "def fruit_is_round(fruit):\n    return fruit == \"apple\" or fruit == \"orange\" or fruit == \"melon\"  # [consider-using-in]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1715",
            "name": "consider-using-get",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1715",
                "symbol": "consider-using-get",
                "msg": "Consider using dict.get for getting values from a dict if a key is present or a default if not",
                "description": "Using the builtin dict.get for getting a value from a dictionary if a key is present or a default if not, is simpler and considered more idiomatic, although sometimes a bit slower",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "knights = {\"Gallahad\": \"the pure\", \"Robin\": \"the brave\"}\n\ndescription = knights.get(\"Gallahad\", \"\")\n",
            "bad_code": "knights = {\"Gallahad\": \"the pure\", \"Robin\": \"the brave\"}\n\nif \"Gallahad\" in knights:  # [consider-using-get]\n    DESCRIPTION = knights[\"Gallahad\"]\nelse:\n    DESCRIPTION = \"\"\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1716",
            "name": "chained-comparison",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1716",
                "symbol": "chained-comparison",
                "msg": "Simplify chained comparison between the operands",
                "description": "This message is emitted when pylint encounters boolean operation like\"a < b and b < c\", suggesting instead to refactor it to \"a < b < c\"",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "a = int(input())\nb = int(input())\nc = int(input())\nif a < b < c:\n    pass\n",
            "bad_code": "a = int(input())\nb = int(input())\nc = int(input())\nif a < b and b < c:  # [chained-comparison]\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1717",
            "name": "consider-using-dict-comprehension",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1717",
                "symbol": "consider-using-dict-comprehension",
                "msg": "Consider using a dictionary comprehension",
                "description": "Emitted when we detect the creation of a dictionary using the dict() callable and a transient list. Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a dict comprehension.Also it is faster since you don't need to create another transient list",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "NUMBERS = [1, 2, 3]\n\nDOUBLED_NUMBERS = {number: number * 2 for number in NUMBERS}\n",
            "bad_code": "NUMBERS = [1, 2, 3]\n\n# +1: [consider-using-dict-comprehension]\nDOUBLED_NUMBERS = dict([(number, number * 2) for number in NUMBERS])\n",
            "details": "**Additional details:**\n\npyupgrade_ can fix this issue automatically.\n\n.. _pyupgrade: https://github.com/asottile/pyupgrade\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1718",
            "name": "consider-using-set-comprehension",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1718",
                "symbol": "consider-using-set-comprehension",
                "msg": "Consider using a set comprehension",
                "description": "Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a set comprehension.Also it is faster since you don't need to create another transient list",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "NUMBERS = [1, 2, 2, 3, 4, 4]\n\nUNIQUE_EVEN_NUMBERS = {number for number in NUMBERS if number % 2 == 0}\n",
            "bad_code": "NUMBERS = [1, 2, 2, 3, 4, 4]\n\n# +1: [consider-using-set-comprehension]\nUNIQUE_EVEN_NUMBERS = set([number for number in NUMBERS if number % 2 == 0])\n",
            "details": "**Additional details:**\n\npyupgrade_ can fix this issue automatically.\n\n.. _pyupgrade: https://github.com/asottile/pyupgrade\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1719",
            "name": "simplifiable-if-expression",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1719",
                "symbol": "simplifiable-if-expression",
                "msg": "The if expression can be replaced with %s",
                "description": "Used when an if expression can be replaced with 'bool(test)' or simply 'test' if the boolean cast is implicit.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "FLYING_THINGS = [\"bird\", \"plane\", \"superman\", \"this example\"]\n\n\ndef is_flying_thing(an_object):\n    return an_object in FLYING_THINGS\n\n\ndef is_not_flying_thing(an_object):\n    return an_object not in FLYING_THINGS\n",
            "bad_code": "FLYING_THINGS = [\"bird\", \"plane\", \"superman\", \"this example\"]\n\n\ndef is_flying_thing(an_object):\n    return True if an_object in FLYING_THINGS else False  # [simplifiable-if-expression]\n\n\ndef is_not_flying_thing(an_object):\n    return False if an_object in FLYING_THINGS else True  # [simplifiable-if-expression]\n",
            "details": "",
            "related_links": "**Related links:**\n\n- `Simplifying an 'if' statement with bool() <https://stackoverflow.com/questions/49546992/>`_\n",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1720",
            "name": "no-else-raise",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1720",
                "symbol": "no-else-raise",
                "msg": "Unnecessary \"%s\" after \"raise\", %s",
                "description": "Used in order to highlight an unnecessary block of code following an if containing a raise statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a raise statement.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def integer_sum(a: int, b: int) -> int:\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError('Function supports only integer parameters.')\n    return a + b\n",
            "bad_code": "def integer_sum(a: int, b: int) -> int:\n    if not (isinstance(a, int) and isinstance(b, int)):    # [no-else-raise]\n        raise ValueError('Function supports only integer parameters.')\n    else:\n        return a + b\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1721",
            "name": "unnecessary-comprehension",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1721",
                "symbol": "unnecessary-comprehension",
                "msg": "Unnecessary use of a comprehension, use %s instead.",
                "description": "Instead of using an identity comprehension, consider using the list, dict or set constructor. It is faster and simpler.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "NUMBERS = [1, 1, 2, 2, 3, 3]\n\nUNIQUE_NUMBERS = set(NUMBERS)\n",
            "bad_code": "NUMBERS = [1, 1, 2, 2, 3, 3]\n\nUNIQUE_NUMBERS = {number for number in NUMBERS}  # [unnecessary-comprehension]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1722",
            "name": "consider-using-sys-exit",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1722",
                "symbol": "consider-using-sys-exit",
                "msg": "Consider using sys.exit()",
                "description": "Instead of using exit() or quit(), consider using the sys.exit().",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import sys\n\nif __name__ == \"__main__\":\n    user = input(\"Enter user name: \")\n    print(f\"Hello, {user}\")\n    sys.exit(0)\n",
            "bad_code": "if __name__ == \"__main__\":\n    user = input(\"Enter user name: \")\n    print(f\"Hello, {user}\")\n    exit(0)  # [consider-using-sys-exit]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1723",
            "name": "no-else-break",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1723",
                "symbol": "no-else-break",
                "msg": "Unnecessary \"%s\" after \"break\", %s",
                "description": "Used in order to highlight an unnecessary block of code following an if containing a break statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a break statement.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def next_seven_elements(iterator):\n    for i, item in enumerate(iterator):\n        if i == 7:\n            break\n        yield item\n",
            "bad_code": "def next_seven_elements(iterator):\n    for i, item in enumerate(iterator):\n        if i == 7:  # [no-else-break]\n            break\n        else:\n            yield item\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1724",
            "name": "no-else-continue",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1724",
                "symbol": "no-else-continue",
                "msg": "Unnecessary \"%s\" after \"continue\", %s",
                "description": "Used in order to highlight an unnecessary block of code following an if containing a continue statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a continue statement.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def even_number_under(n: int):\n    for i in range(n):\n        if i%2 == 1:\n            continue\n        yield i\n",
            "bad_code": "def even_number_under(n: int):\n    for i in range(n):\n        if i%2 == 1:  # [no-else-continue]\n            continue\n        else:\n            yield i\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1725",
            "name": "super-with-arguments",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1725",
                "symbol": "super-with-arguments",
                "msg": "Consider using Python 3 style super() without arguments",
                "description": "Emitted when calling the super() builtin with the current class and instance. On Python 3 these arguments are the default and they can be omitted.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Fruit:\n    pass\n\n\nclass Orange(Fruit):\n    def __init__(self):\n        super().__init__()\n",
            "bad_code": "class Fruit:\n    pass\n\n\nclass Orange(Fruit):\n    def __init__(self):\n        super(Orange, self).__init__()  # [super-with-arguments]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1726",
            "name": "simplifiable-condition",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1726",
                "symbol": "simplifiable-condition",
                "msg": "Boolean condition '%s' may be simplified to '%s'",
                "description": "Emitted when a boolean condition is able to be simplified.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def has_apples(apples) -> bool:\n    return bool(apples)\n",
            "bad_code": "def has_apples(apples) -> bool:\n    return bool(apples or False)  # [simplifiable-condition]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1727",
            "name": "condition-evals-to-constant",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1727",
                "symbol": "condition-evals-to-constant",
                "msg": "Boolean condition '%s' will always evaluate to '%s'",
                "description": "Emitted when a boolean condition can be simplified to a constant value.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def is_a_fruit(fruit):\n    return fruit in {\"apple\", \"orange\"}\n",
            "bad_code": "def is_a_fruit(fruit):\n    return bool(fruit in {\"apple\", \"orange\"} or True)  # [condition-evals-to-constant]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1728",
            "name": "consider-using-generator",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1728",
                "symbol": "consider-using-generator",
                "msg": "Consider using a generator instead '%s(%s)'",
                "description": "If your container can be large using a generator will bring better performance.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "list(0 for y in list(range(10)))\ntuple(0 for y in list(range(10)))\nsum(y**2 for y in list(range(10)))\nmax(y**2 for y in list(range(10)))\nmin(y**2 for y in list(range(10)))\n",
            "bad_code": "list([0 for y in list(range(10))])  # [consider-using-generator]\ntuple([0 for y in list(range(10))])  # [consider-using-generator]\nsum([y**2 for y in list(range(10))])  # [consider-using-generator]\nmax([y**2 for y in list(range(10))])  # [consider-using-generator]\nmin([y**2 for y in list(range(10))])  # [consider-using-generator]\n",
            "details": "**Additional details:**\n\nRemoving ``[]`` inside calls that can use containers or generators should be considered\nfor performance reasons since a generator will have an upfront cost to pay. The\nperformance will be better if you are working with long lists or sets.\n\nFor ``max``, ``min`` and ``sum`` using a generator is also recommended by pep289.\n",
            "related_links": "**Related links:**\n\n- `PEP 289 <https://peps.python.org/pep-0289/>`_\n- `Benchmark and discussion for any/all/list/tuple <https://github.com/PyCQA/pylint/pull/3309#discussion_r576683109>`_\n- `Benchmark and discussion for sum/max/min <https://github.com/PyCQA/pylint/pull/6595#issuecomment-1125704244>`_\n",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1729",
            "name": "use-a-generator",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1729",
                "symbol": "use-a-generator",
                "msg": "Use a generator instead '%s(%s)'",
                "description": "Comprehension inside of 'any', 'all', 'max', 'min' or 'sum' is unnecessary. A generator would be sufficient and faster.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from random import randint\n\nall(randint(-5, 5) > 0 for _ in range(10))\nany(randint(-5, 5) > 0 for _ in range(10))\n",
            "bad_code": "from random import randint\n\nall([randint(-5, 5) > 0 for _ in range(10)])  # [use-a-generator]\nany([randint(-5, 5) > 0 for _ in range(10)])  # [use-a-generator]\n",
            "details": "**Additional details:**\n\nBy using a generator you can cut the execution tree and exit directly at the first element that is ``False`` for ``all`` or ``True`` for ``any`` instead of\ncalculating all the elements. Except in the worst possible case where you still need to evaluate everything (all values\nare True for ``all`` or all values are false for ``any``) performance will be better.\n",
            "related_links": "**Related links:**\n\n- `PEP 289 \u2013 Generator Expressions <https://peps.python.org/pep-0289/>`_\n- `Benchmark and discussion during initial implementation <https://github.com/PyCQA/pylint/pull/3309#discussion_r576683109>`_\n",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1730",
            "name": "consider-using-min-builtin",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1730",
                "symbol": "consider-using-min-builtin",
                "msg": "Consider using '%s' instead of unnecessary if block",
                "description": "Using the min builtin instead of a conditional improves readability and conciseness.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(min(1, 2))\n",
            "bad_code": "def get_min(value1, value2):\n    if value1 > value2:  # [consider-using-min-builtin]\n        value1 = value2\n    return value1\n\n\nprint(get_min(1, 2))\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1731",
            "name": "consider-using-max-builtin",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1731",
                "symbol": "consider-using-max-builtin",
                "msg": "Consider using '%s' instead of unnecessary if block",
                "description": "Using the max builtin instead of a conditional improves readability and conciseness.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "print(max(1, 2))\n",
            "bad_code": "def get_max(value1, value2):\n    if value1 < value2:  # [consider-using-max-builtin]\n        value1 = value2\n    return value1\n\n\nprint(get_max(1, 2))\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1732",
            "name": "consider-using-with",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1732",
                "symbol": "consider-using-with",
                "msg": "Consider using 'with' for resource-allocating operations",
                "description": "Emitted if a resource-allocating assignment or call may be replaced by a 'with' block. By using 'with' the release of the allocated resources is ensured even in the case of an exception.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "with open(\"apple.txt\", \"r\", encoding=\"utf8\") as file:\n    contents = file.read()\n\nwith open(\"banana.txt\", \"r\", encoding=\"utf8\") as f:\n    best = f.read()\n",
            "bad_code": "file = open(\"apple.txt\", \"r\", encoding=\"utf8\")  # [consider-using-with]\ncontents = file.read()\nfile.close()\n\nworst = open(\"banana.txt\", \"r\", encoding=\"utf8\").read()  # [consider-using-with]\n",
            "details": "**Additional details:**\n\nCalling ``write()`` without using the ``with`` keyword or calling ``close()`` might\nresult in the arguments of ``write()`` not being completely written to the disk,\neven if the program exits successfully.\n\nThis message applies to callables of Python's stdlib which can be replaced by a ``with`` statement.\nIt is suppressed in the following cases:\n\n- the call is located inside a context manager\n- the call result is returned from the enclosing function\n- the call result is used in a ``with`` statement itself\n",
            "related_links": "**Related links:**\n\n- `Python doc: Reading and writing files <https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files>`_\n- `PEP 343 <https://peps.python.org/pep-0343/>`_\n- `Context managers in Python <https://johnlekberg.com/blog/2020-10-11-ctx-manage.html>`_ by John Lekberg\n- `Rationale <https://stackoverflow.com/a/73181877/2519059>`_\n",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1733",
            "name": "unnecessary-dict-index-lookup",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1733",
                "symbol": "unnecessary-dict-index-lookup",
                "msg": "Unnecessary dictionary index lookup, use '%s' instead",
                "description": "Emitted when iterating over the dictionary items (key-item pairs) and accessing the value by index lookup. The value can be accessed directly instead.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "FRUITS = {\"apple\": 1, \"orange\": 10, \"berry\": 22}\n\nfor fruit_name, fruit_count in FRUITS.items():\n    print(fruit_count)\n",
            "bad_code": "FRUITS = {\"apple\": 1, \"orange\": 10, \"berry\": 22}\n\nfor fruit_name, fruit_count in FRUITS.items():\n    print(FRUITS[fruit_name])  # [unnecessary-dict-index-lookup]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1734",
            "name": "use-list-literal",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1734",
                "symbol": "use-list-literal",
                "msg": "Consider using [] instead of list()",
                "description": "Emitted when using list() to create an empty list instead of the literal []. The literal is faster as it avoids an additional function call.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "empty_list = []\n",
            "bad_code": "empty_list = list()  # [use-list-literal]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1735",
            "name": "use-dict-literal",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1735",
                "symbol": "use-dict-literal",
                "msg": "Consider using {} instead of dict()",
                "description": "Emitted when using dict() to create an empty dictionary instead of the literal {}. The literal is faster as it avoids an additional function call.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "empty_dict = {}\n\n# create using a literal dict\nnew_dict = {\"foo\": \"bar\"}\n\n# shallow copy a dict\nnew_dict = {**another_dict}\n",
            "bad_code": "empty_dict = dict()  # [use-dict-literal]\nnew_dict = dict(foo=\"bar\")  # [use-dict-literal]\nnew_dict = dict(**another_dict)  # [use-dict-literal]\n",
            "details": "**Additional details:**\n\nhttps://gist.github.com/hofrob/ad143aaa84c096f42489c2520a3875f9\n\nThis example script shows an 18% increase in performance when using a literal over the\nconstructor in python version 3.10.6.\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "refactoring",
            "id": "R1736",
            "name": "unnecessary-list-index-lookup",
            "definition": {
                "checker_name": "refactoring",
                "msgid": "R1736",
                "symbol": "unnecessary-list-index-lookup",
                "msg": "Unnecessary list index lookup, use '%s' instead",
                "description": "Emitted when iterating over an enumeration and accessing the value by index lookup. The value can be accessed directly instead.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "letters = ['a', 'b', 'c']\n\nfor index, letter in enumerate(letters):\n    print(letter)\n",
            "bad_code": "letters = ['a', 'b', 'c']\n\nfor index, letter in enumerate(letters):\n    print(letters[index])  # [unnecessary-list-index-lookup]\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.refactoring.refactoring_checker",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R1260",
            "name": "too-complex",
            "definition": {
                "checker_name": "design",
                "msgid": "R1260",
                "symbol": "too-complex",
                "msg": "%s is too complex. The McCabe rating is %d",
                "description": "Used when a method or function is too complex based on McCabe Complexity Cyclomatic",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.mccabe",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0901",
            "name": "too-many-ancestors",
            "definition": {
                "checker_name": "design",
                "msgid": "R0901",
                "symbol": "too-many-ancestors",
                "msg": "Too many ancestors (%s/%s)",
                "description": "Used when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "class Animal:\n    beaver_tailed: bool\n    can_swim: bool\n    has_beak: bool\n    has_fur: bool\n    has_vertebrae: bool\n    lays_egg: bool\n    protected_specie: bool\n    venomous: bool\n\n\nclass Invertebrate(Animal):\n    has_vertebrae = False\n\n\nclass Vertebrate(Animal):\n    has_vertebrae = True\n\n\nclass Mammal(Vertebrate):\n    has_beak = False\n    has_fur = True\n    lays_egg = False\n    venomous = False\n\n\nclass Playtypus(Mammal):\n    beaver_tailed = True\n    can_swim = True\n    has_beak = True\n    lays_egg = False\n    protected_specie = True\n    venomous = True\n",
            "bad_code": "class Animal: ...\nclass BeakyAnimal(Animal): ...\nclass FurryAnimal(Animal): ...\nclass Swimmer(Animal): ...\nclass EggLayer(Animal): ...\nclass VenomousAnimal(Animal): ...\nclass ProtectedSpecie(Animal): ...\nclass BeaverTailedAnimal(Animal): ...\nclass Vertebrate(Animal): ...\n\n\n# max of 7 by default, can be configured\n# each edge of a diamond inheritance counts\nclass Playtypus(  # [too-many-ancestors]\n    BeakyAnimal,\n    FurryAnimal,\n    Swimmer,\n    EggLayer,\n    VenomousAnimal,\n    ProtectedSpecie,\n    BeaverTailedAnimal,\n    Vertebrate,\n):\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0902",
            "name": "too-many-instance-attributes",
            "definition": {
                "checker_name": "design",
                "msgid": "R0902",
                "symbol": "too-many-instance-attributes",
                "msg": "Too many instance attributes (%s/%s)",
                "description": "Used when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import dataclasses\n\n\n@dataclasses.dataclass\nclass Worm:\n    name: str\n    type: str\n    color: str\n\n\nclass Fruit:\n    def __init__(self):\n        self.name = \"Little Apple\"\n        self.color = \"Bright red\"\n        self.vitamins = [\"A\", \"B1\"]\n        self.antioxidants = None\n        self.worms = [\n            Worm(name=\"Jimmy\", type=\"Codling Moths\", color=\"light brown\"),\n            Worm(name=\"Kim\", type=\"Apple maggot\", color=\"Whitish\"),\n        ]\n",
            "bad_code": "class Fruit:  # [too-many-instance-attributes]\n    def __init__(self):\n        # max of 7 attributes by default, can be configured\n        self.worm_name = \"Jimmy\"\n        self.worm_type = \"Codling Moths\"\n        self.worm_color = \"light brown\"\n        self.fruit_name = \"Little Apple\"\n        self.fruit_color = \"Bright red\"\n        self.fruit_vitamins = [\"A\", \"B1\"]\n        self.fruit_antioxidants = None\n        self.secondary_worm_name = \"Kim\"\n        self.secondary_worm_type = \"Apple maggot\"\n        self.secondary_worm_color = \"Whitish\"\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0903",
            "name": "too-few-public-methods",
            "definition": {
                "checker_name": "design",
                "msgid": "R0903",
                "symbol": "too-few-public-methods",
                "msg": "Too few public methods (%s/%s)",
                "description": "Used when class has too few public methods, so be sure it's really worth it.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "import dataclasses\n\n\nclass Worm:\n    def __init__(self, name: str, fruit_of_residence: Fruit):\n        self.name = name\n        self.fruit_of_residence = fruit_of_residence\n\n    def bore(self):\n        print(f\"{self.name} is boring into {self.fruit_of_residence}\")\n\n    def wiggle(self):\n        print(f\"{self.name} wiggle around wormily.\")\n\n# or\n\n@dataclasses.dataclass\nclass Worm:\n    name:str\n    fruit_of_residence: Fruit\n\ndef bore(worm: Worm):\n    print(f\"{worm.name} is boring into {worm.fruit_of_residence}\")\n\n# or\n\ndef bore(fruit: Fruit, worm_name: str):\n    print(f\"{worm_name} is boring into {fruit}\")\n",
            "bad_code": "class Worm:  # [too-few-public-methods]\n    def __init__(self, name: str, fruit_of_residence: Fruit):\n        self.name = name\n        self.fruit_of_residence = fruit_of_residence\n\n    def bore(self):\n        print(f\"{self.name} is boring into {self.fruit_of_residence}\")\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0904",
            "name": "too-many-public-methods",
            "definition": {
                "checker_name": "design",
                "msgid": "R0904",
                "symbol": "too-many-public-methods",
                "msg": "Too many public methods (%s/%s)",
                "description": "Used when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0911",
            "name": "too-many-return-statements",
            "definition": {
                "checker_name": "design",
                "msgid": "R0911",
                "symbol": "too-many-return-statements",
                "msg": "Too many return statements (%s/%s)",
                "description": "Used when a function or method has too many return statement, making it hard to follow.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "NUMBERS_TO_STRINGS = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven'\n}\n\n\ndef to_string(x):\n    return f'This is {NUMBERS_TO_STRINGS.get(x)}.'\n",
            "bad_code": "def to_string(x):  # [too-many-return-statements]\n    # max of 6 by default, can be configured\n    if x == 1:\n        return 'This is one.'\n    if x == 2:\n        return 'This is two.'\n    if x == 3:\n        return 'This is three.'\n    if x == 4:\n        return 'This is four.'\n    if x == 5:\n        return 'This is five.'\n    if x == 6:\n        return 'This is six.'\n    if x == 7:\n        return 'This is seven.'\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0912",
            "name": "too-many-branches",
            "definition": {
                "checker_name": "design",
                "msgid": "R0912",
                "symbol": "too-many-branches",
                "msg": "Too many branches (%s/%s)",
                "description": "Used when a function or method has too many branches, making it hard to follow.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def num_to_word(x):\n    return {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"for\",\n        5: \"fie\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }.get(x)\n",
            "bad_code": "def num_to_word(x):  # [too-many-branches]\n    if x == 0:\n        return \"zero\"\n    elif x == 1:\n        return \"one\"\n    elif x == 2:\n        return \"two\"\n    elif x == 3:\n        return \"three\"\n    elif x == 4:\n        return \"four\"\n    elif x == 5:\n        return \"five\"\n    elif x == 6:\n        return \"six\"\n    elif x == 7:\n        return \"seven\"\n    elif x == 8:\n        return \"eight\"\n    elif x == 9:\n        return \"nine\"\n    else:\n        return None\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0913",
            "name": "too-many-arguments",
            "definition": {
                "checker_name": "design",
                "msgid": "R0913",
                "symbol": "too-many-arguments",
                "msg": "Too many arguments (%s/%s)",
                "description": "Used when a function or method takes too many arguments.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "from dataclasses import dataclass\n\n\n@dataclass\nclass ThreeDChessPiece:\n    x: int\n    y: int\n    z: int\n    type: str\n\n\ndef three_d_chess_move(\n    white: ThreeDChessPiece,\n    black: ThreeDChessPiece,\n    blue: ThreeDChessPiece,\n    current_player,\n):\n    pass\n",
            "bad_code": "def three_d_chess_move(  # [too-many-arguments]\n    x_white,\n    y_white,\n    z_white,\n    piece_white,\n    x_black,\n    y_black,\n    z_black,\n    piece_black,\n    x_blue,\n    y_blue,\n    z_blue,\n    piece_blue,\n    current_player,\n):\n    pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0914",
            "name": "too-many-locals",
            "definition": {
                "checker_name": "design",
                "msgid": "R0914",
                "symbol": "too-many-locals",
                "msg": "Too many local variables (%s/%s)",
                "description": "Used when a function or method has too many local variables.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0915",
            "name": "too-many-statements",
            "definition": {
                "checker_name": "design",
                "msgid": "R0915",
                "symbol": "too-many-statements",
                "msg": "Too many statements (%s/%s)",
                "description": "Used when a function or method has too many statements. You should then split it in smaller functions / methods.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "design",
            "id": "R0916",
            "name": "too-many-boolean-expressions",
            "definition": {
                "checker_name": "design",
                "msgid": "R0916",
                "symbol": "too-many-boolean-expressions",
                "msg": "Too many boolean expressions in if statement (%s/%s)",
                "description": "Used when an if statement contains too many boolean expressions.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "def can_be_divided_by_two_and_are_not_zero(x, y, z):\n    if all(i and i%2==0 for i in [x, y, z]):\n        pass\n",
            "bad_code": "def can_be_divided_by_two_and_are_not_zero(x, y, z):\n    # Maximum number of boolean expressions in an if statement (by default 5)\n    # +1: [too-many-boolean-expressions]\n    if (x and y and z) and (x % 2 == 0 and y % 2 == 0 and z % 2 == 0):\n        pass\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.checkers.design_analysis",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "similarities",
            "id": "R0801",
            "name": "duplicate-code",
            "definition": {
                "checker_name": "similarities",
                "msgid": "R0801",
                "symbol": "duplicate-code",
                "msg": "Similar lines in %s files\n%s",
                "description": "Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.similar",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typing",
            "id": "R6002",
            "name": "consider-using-alias",
            "definition": {
                "checker_name": "typing",
                "msgid": "R6002",
                "symbol": "consider-using-alias",
                "msg": "'%s' will be deprecated with PY39, consider using '%s' instead%s",
                "description": "Only emitted if 'runtime-typing=no' and a deprecated typing alias is used in a type annotation context in Python 3.7 or 3.8.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.typing",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typing",
            "id": "R6003",
            "name": "consider-alternative-union-syntax",
            "definition": {
                "checker_name": "typing",
                "msgid": "R6003",
                "symbol": "consider-alternative-union-syntax",
                "msg": "Consider using alternative Union syntax instead of '%s'%s",
                "description": "Emitted when 'typing.Union' or 'typing.Optional' is used instead of the alternative Union syntax 'int | None'.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.extensions.typing",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        }
    ],
    "information": [
        {
            "checker": "main",
            "id": "I0001",
            "name": "raw-checker-failed",
            "definition": {
                "checker_name": "main",
                "msgid": "I0001",
                "symbol": "raw-checker-failed",
                "msg": "Unable to run raw checkers on built-in module %s",
                "description": "Used to inform that a built-in module has not been checked using the raw checkers.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "I0010",
            "name": "bad-inline-option",
            "definition": {
                "checker_name": "main",
                "msgid": "I0010",
                "symbol": "bad-inline-option",
                "msg": "Unable to consider inline option %r",
                "description": "Used when an inline option is either badly formatted or can't be used inside modules.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# pylint: disable=line-too-long\n",
            "bad_code": "# 2:[bad-inline-option]\n# pylint: disable line-too-long\n",
            "details": "",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "I0011",
            "name": "locally-disabled",
            "definition": {
                "checker_name": "main",
                "msgid": "I0011",
                "symbol": "locally-disabled",
                "msg": "Locally disabling %s (%s)",
                "description": "Used when an inline option disables a message or a messages category.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "I0013",
            "name": "file-ignored",
            "definition": {
                "checker_name": "main",
                "msgid": "I0013",
                "symbol": "file-ignored",
                "msg": "Ignoring entire file",
                "description": "Used to inform that the file will not be checked",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "I0020",
            "name": "suppressed-message",
            "definition": {
                "checker_name": "main",
                "msgid": "I0020",
                "symbol": "suppressed-message",
                "msg": "Suppressed %s (from line %d)",
                "description": "A message was triggered on a line, but suppressed explicitly by a disable= comment in the file. This message is not generated for messages that are ignored due to configuration settings.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "I0021",
            "name": "useless-suppression",
            "definition": {
                "checker_name": "main",
                "msgid": "I0021",
                "symbol": "useless-suppression",
                "msg": "Useless suppression of %s",
                "description": "Reported when a message is explicitly disabled for a line or a block of code, but never triggered.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "main",
            "id": "I0022",
            "name": "deprecated-pragma",
            "definition": {
                "checker_name": "main",
                "msgid": "I0022",
                "symbol": "deprecated-pragma",
                "msg": "Pragma \"%s\" is deprecated, use \"%s\" instead",
                "description": "Some inline pylint options have been renamed or reworked, only the most recent form should be used. NOTE:skip-all is only available with pylint >= 0.26",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": [
                    [
                        "I0014",
                        "deprecated-disable-all"
                    ]
                ]
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.lint.pylinter",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "miscellaneous",
            "id": "I0023",
            "name": "use-symbolic-message-instead",
            "definition": {
                "checker_name": "miscellaneous",
                "msgid": "I0023",
                "symbol": "use-symbolic-message-instead",
                "msg": "%s",
                "description": "Used when a message is enabled or disabled by id.",
                "scope": "line-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.misc",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        },
        {
            "checker": "typecheck",
            "id": "I1101",
            "name": "c-extension-no-member",
            "definition": {
                "checker_name": "typecheck",
                "msgid": "I1101",
                "symbol": "c-extension-no-member",
                "msg": "%s %r has no %r member%s, but source is unavailable. Consider adding this module to extension-pkg-allow-list if you want to perform analysis based on run-time introspection of living objects.",
                "description": "Used when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.",
                "scope": "node-based-msg",
                "minversion": null,
                "maxversion": null,
                "old_names": []
            },
            "good_code": "# This is a placeholder for correct code for this message.\n",
            "bad_code": "",
            "details": "**Additional details:**\n\nYou can help us make the doc better `by contributing <https://github.com/PyCQA/pylint/issues/5953>`_ !\n",
            "related_links": "",
            "checker_module_name": "pylint.checkers.typecheck",
            "checker_module_path": "REDACTED",
            "shared": false,
            "default_enabled": false
        }
    ]
}