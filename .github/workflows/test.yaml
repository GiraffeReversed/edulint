name: Tests compatibility for several versions


on:
  workflow_call:
    inputs:
      python_matrix:
        type: string
        default: '["3.8"]'
      pylint_matrix:
        type: string
        default: '["2.17.5"]'
      flake8_matrix:
        type: string
        default: '["6.1.0"]'
    secrets:
      PAT_PRIVATE_TESTS:
        required: true


jobs:
  pytest:
    # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python: ${{ fromJSON(inputs.python_matrix) }}

        # https://github.com/actions/runner/issues/1660#issuecomment-1359707506
        pylint: ${{ fromJSON(inputs.pylint_matrix) }}
        # pylint: ${{ fromJSON('["2.16.4", "2.17.4", "3.0.0a6"]') }}

        flake8: ${{ fromJSON(inputs.flake8_matrix) }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          token: '${{ secrets.PAT_PRIVATE_TESTS }}'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'

      - name: Mock pylint version in requirements.txt and setup.cfg
        run: |
          sed -i "s/pylint *[~<>=][^\"]*/pylint==${{ matrix.pylint }}/" requirements.txt

      - name: Mock flake8 version in requirements.txt and setup.cfg
        run: |
          sed -i "s/flake8 *[~<>=][^\"]*/flake8==${{ matrix.flake8 }}/" requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install Edulint
        run: pip install .

      - name: Test with pytest
        run: pytest --junit-xml pytest.xml tests/

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Unit Test Results (Python ${{ matrix.python }})
          path: pytest.xml

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: pytest
    runs-on: ubuntu-latest
    if: success() || failure()
    permissions:
      checks: write
      pull-requests: write  # only needed unless run with comment_mode: off
      contents: read  # only needed for private repository
      issues: read  # only needed for private repository

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.4.2
        with:
          files: "artifacts/**/pytest.xml"
